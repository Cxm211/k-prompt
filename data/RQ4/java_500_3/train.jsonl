{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_3 temp = new TYPE_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; VAR_7 . METHOD_4 ( temp . METHOD_5 ( TYPE_4 . METHOD_6 ( ) ) ) ; VAR_8 . METHOD_7 ( VAR_7 ) ; VAR_9 = VAR_1 ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_9 = VAR_1 ; TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_3 temp = new TYPE_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; VAR_7 . METHOD_4 ( temp . METHOD_5 ( TYPE_4 . METHOD_6 ( ) ) ) ; VAR_8 . METHOD_7 ( VAR_7 ) ; VAR_9 = VAR_1 ; }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 = VAR_2 ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 = VAR_6 ; METHOD_3 ( new java.io.File ( VAR_7 ) ) ; VAR_8 . METHOD_4 ( VAR_9 ) ; VAR_8 . METHOD_5 ( TYPE_1 . METHOD_6 ( getContext ( ) , VAR_10 ) ) ; }\n", "fixed": "protected void METHOD_1 ( ) { VAR_1 = VAR_2 ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 = VAR_6 ; METHOD_3 ( new java.io.File ( VAR_7 ) ) ; VAR_8 . METHOD_4 ( VAR_9 ) ; VAR_8 . METHOD_5 ( TYPE_1 . METHOD_6 ( getContext ( ) , VAR_10 ) ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 ) throws java.io.IOException , TYPE_6 , TYPE_7 { java.lang.String VAR_6 ; try { VAR_6 = TYPE_8 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( TYPE_9 VAR_7 ) { throw new TYPE_10 ( VAR_7 ) ; } TYPE_8 . METHOD_3 ( VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 ) throws java.io.IOException { java.lang.String VAR_6 = TYPE_8 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; TYPE_8 . METHOD_3 ( VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { while ( VAR_1 ) { if ( ( VAR_2 ) == 0 ) { VAR_3 . METHOD_2 ( ) ; VAR_2 = INT_1 ; } VAR_4 . METHOD_3 ( ) ; for ( TYPE_1 VAR_5 : VAR_6 ) { VAR_5 . METHOD_3 ( ) ; } VAR_3 . METHOD_4 ( ) ; ( VAR_2 ) -- ; try { java.lang.Thread . METHOD_5 ( INT_2 ) ; } catch ( TYPE_2 VAR_7 ) { VAR_7 . METHOD_6 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { while ( VAR_1 ) { if ( ( VAR_2 ) == 0 ) { VAR_3 . METHOD_2 ( ) ; VAR_2 = INT_1 ; } VAR_4 . METHOD_3 ( ) ; for ( TYPE_1 VAR_5 : VAR_6 ) { VAR_5 . METHOD_3 ( ) ; } VAR_3 . METHOD_4 ( ) ; ( VAR_2 ) -- ; try { java.lang.Thread . METHOD_5 ( INT_2 ) ; } catch ( TYPE_2 VAR_7 ) { VAR_7 . METHOD_6 ( ) ; } } VAR_3 . METHOD_4 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { int n ; for ( int j = 0 ; j < INT_1 ; j ++ ) { for ( int i = 1 ; i < INT_2 ; i ++ ) { if ( TYPE_1 . METHOD_2 ( i , j , VAR_1 ) ) { n = TYPE_1 . METHOD_3 ( i , j , VAR_1 ) ; if ( n >= 0 ) { VAR_1 [ j ] [ n ] . METHOD_4 ( i ) ; } } } } }\n", "fixed": "public void METHOD_1 ( ) { int n ; for ( int j = 0 ; j < INT_1 ; j ++ ) { for ( int i = 1 ; i < INT_2 ; i ++ ) { if ( TYPE_1 . METHOD_2 ( i , j , VAR_1 ) ) { n = TYPE_1 . METHOD_3 ( i , j , VAR_1 ) ; if ( n >= 0 ) { VAR_1 [ j ] [ n ] . METHOD_4 ( i ) ; break ; } } } } }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; getActivity ( ) . METHOD_3 ( VAR_3 , VAR_1 ) ; METHOD_4 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_4 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; getActivity ( ) . METHOD_3 ( VAR_3 , VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 response = ( ( TYPE_5 ) ( VAR_2 ) ) ; java.lang.System.out.println ( VAR_1 . METHOD_2 ( ) ) ; response . METHOD_3 ( STRING_1 , STRING_2 ) ; response . METHOD_3 ( STRING_3 , STRING_4 ) ; response . METHOD_3 ( STRING_5 , STRING_6 ) ; response . METHOD_3 ( STRING_7 , STRING_8 ) ; VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 response = ( ( TYPE_5 ) ( VAR_2 ) ) ; response . METHOD_3 ( STRING_1 , STRING_2 ) ; response . METHOD_3 ( STRING_3 , STRING_4 ) ; response . METHOD_3 ( STRING_5 , STRING_6 ) ; response . METHOD_3 ( STRING_7 , STRING_8 ) ; VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 item , int count ) { if ( ( count < 1 ) || ( item == null ) ) { return ; } if ( VAR_1 . METHOD_2 ( item ) ) { VAR_1 . put ( item , ( ( VAR_1 . get ( item ) ) + count ) ) ; } else { VAR_1 . put ( item , count ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 item , int count ) throws java.lang.Exception { if ( ( count < 1 ) || ( item == null ) ) { return ; } if ( VAR_1 . METHOD_2 ( item ) ) { VAR_1 . put ( item , ( ( VAR_1 . get ( item ) ) + count ) ) ; } else { VAR_1 . put ( item , count ) ; } if ( ( VAR_1 . get ( item ) ) < 0 ) { throw new java.lang.Exception ( ) ; } }\n"}
{"problem": "private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = VAR_1 ; try { VAR_4 = TYPE_2 . METHOD_2 ( VAR_1 ) . size ( VAR_2 , VAR_3 ) . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } return VAR_4 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = VAR_1 ; try { VAR_4 = TYPE_2 . METHOD_2 ( VAR_1 ) . size ( VAR_2 , VAR_3 ) . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_5 ) { VAR_5 . METHOD_4 ( ) ; } return VAR_4 ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( this . VAR_1 ) > INT_1 ) { METHOD_2 ( ) ; this . VAR_1 = 0 ; } METHOD_3 ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_2 instanceof TYPE_2 ) { METHOD_4 ( ( ( TYPE_2 ) ( VAR_2 ) ) ) ; } } ( this . VAR_1 ) ++ ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( this . VAR_1 ) > INT_1 ) { METHOD_2 ( ) ; this . VAR_1 = 0 ; } METHOD_3 ( ) ; for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_2 instanceof TYPE_2 ) { } } ( this . VAR_1 ) ++ ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.util.regex.Matcher VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; java.lang.String result = STRING_1 ; if ( ( VAR_2 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( ) ) == INT_1 ) ) { result = VAR_2 . METHOD_5 ( INT_1 ) ; } return result ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String result = STRING_1 ; if ( VAR_1 != null ) { java.util.regex.Matcher VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( ) ) == INT_1 ) ) { result = VAR_2 . METHOD_5 ( INT_1 ) ; } } return result ; }\n"}
{"fixCommitSHA1": "dfb59a9e68b9bb0863b1397ddd0df1fa15eccdb8", "projectName": "openmrs.openmrs-core", "bugType": "Less Specific If", "problem": " \t */\r\n \t@ModelAttribute(\"relationshipsMap\")\r\n \tprivate Map<String, Relationship> getRelationshipsMap(@ModelAttribute(\"patientModel\") ShortPatientModel patientModel,\r\n\t        WebRequest request) {\r\n \t\tString showRelationships = Context.getAdministrationService().getGlobalProperty(\r\n \t\t    OpenmrsConstants.GLOBAL_PROPERTY_NEWPATIENTFORM_SHOW_RELATIONSHIPS, \"false\");\r\n\t\tif (\"false\".equals(showRelationships)) {\r\n \t\t\treturn new LinkedHashMap<String, Relationship>();\r\n \t\t}\r", "fixed": " \t */\r\n \t@ModelAttribute(\"relationshipsMap\")\r\n \tprivate Map<String, Relationship> getRelationshipsMap(@ModelAttribute(\"patientModel\") ShortPatientModel patientModel,\r\n\t        BindingResult result, WebRequest request) {\r\n \t\tString showRelationships = Context.getAdministrationService().getGlobalProperty(\r\n \t\t    OpenmrsConstants.GLOBAL_PROPERTY_NEWPATIENTFORM_SHOW_RELATIONSHIPS, \"false\");\r\n\t\tif (\"false\".equals(showRelationships) || result.hasErrors()) {\r\n \t\t\treturn new LinkedHashMap<String, Relationship>();\r\n \t\t}\r", "sourceBeforeFix": "\"false\".equals(showRelationships)", "sourceAfterFix": "\"false\".equals(showRelationships) || result.hasErrors()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { while ( true ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_5 ( ) ; if ( VAR_2 == null ) { METHOD_6 ( ) ; } else { METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; } } catch ( java.lang.Exception VAR_3 ) { VAR_4 . error ( STRING_1 , VAR_3 ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { while ( true ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_5 ( ) ; if ( VAR_2 == null ) { METHOD_6 ( ) ; } else { METHOD_3 ( METHOD_4 ( VAR_2 ) ) ; } } catch ( java.lang.Exception VAR_3 ) { VAR_4 . error ( STRING_1 , VAR_3 ) ; } } }\n"}
{"problem": "public int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { int VAR_3 ; java.lang.String key = ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_5 ) ) + STRING_2 ) + VAR_2 ; if ( TYPE_2 . METHOD_2 ( key ) ) { VAR_3 = TYPE_2 . get ( key ) ; } else { TYPE_3 . i ( VAR_6 , ( STRING_3 + key ) ) ; VAR_3 = ( VAR_7 ) * ( VAR_2 / ( VAR_8 ) ) ; } return VAR_3 ; }\n", "fixed": "public int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { int VAR_3 ; java.lang.String key = ( ( ( ( VAR_4 ) + STRING_1 ) + ( VAR_5 ) ) + STRING_2 ) + VAR_2 ; if ( TYPE_2 . METHOD_2 ( key ) ) { VAR_3 = TYPE_2 . get ( key ) ; } else { TYPE_3 . i ( VAR_6 , ( STRING_3 + key ) ) ; VAR_3 = ( ( VAR_7 ) * VAR_2 ) / ( VAR_8 ) ; } return VAR_3 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; switch ( VAR_3 ) { case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : METHOD_4 ( ) ; break ; default : VAR_12 = TYPE_2 . METHOD_5 ( VAR_13 ) ; METHOD_6 ( ) ; break ; } }\n", "fixed": "public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; switch ( VAR_3 ) { case VAR_7 : case VAR_4 : case VAR_5 : case VAR_6 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : METHOD_4 ( ) ; break ; default : VAR_12 = TYPE_2 . METHOD_5 ( VAR_13 ) ; METHOD_6 ( ) ; break ; } }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 < TYPE_1 , TYPE_4 < TYPE_5 > > > VAR_1 ) throws TYPE_6 { java.util.Map < TYPE_1 , TYPE_5 > VAR_2 = new java.util.HashMap < TYPE_1 , TYPE_5 > ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { TYPE_3 < TYPE_1 , TYPE_4 < TYPE_5 > > VAR_3 = VAR_1 . METHOD_3 ( ) ; return VAR_3 . METHOD_4 ( ) ; } return null ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 < TYPE_1 , TYPE_4 < TYPE_5 > > > VAR_1 ) throws TYPE_6 { while ( VAR_1 . METHOD_2 ( ) ) { TYPE_3 < TYPE_1 , TYPE_4 < TYPE_5 > > VAR_3 = VAR_1 . METHOD_3 ( ) ; return VAR_3 . METHOD_4 ( ) ; } return null ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = context . METHOD_2 ( ) . query ( VAR_1 , null , null , null , null ) ; VAR_2 . METHOD_3 ( ) ; int VAR_3 = VAR_2 . METHOD_4 ( VAR_4 ) ; return VAR_2 . getString ( VAR_3 ) ; }\n", "fixed": "public static java.lang.String METHOD_1 ( android.content.Context context , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = null ; int VAR_3 = 0 ; if ( VAR_1 != null ) { VAR_2 = context . METHOD_2 ( ) . query ( VAR_1 , null , null , null , null ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 = VAR_2 . METHOD_4 ( VAR_4 ) ; } return VAR_2 . getString ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"problem": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { TYPE_1 . i ( VAR_3 , STRING_1 ) ; if ( ( VAR_1 == ( VAR_4 ) ) && ( VAR_2 == ( VAR_5 ) ) ) { android.content.Intent handle = getIntent ( ) ; java.lang.String VAR_6 = handle . METHOD_2 ( ) . getString ( VAR_3 ) ; VAR_7 . setText ( VAR_6 ) ; } }\n", "fixed": "protected void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { TYPE_1 . i ( VAR_3 , STRING_1 ) ; if ( ( VAR_1 == ( VAR_4 ) ) && ( VAR_2 == ( VAR_5 ) ) ) { java.lang.String VAR_6 = data . METHOD_2 ( ) . getString ( VAR_3 ) ; VAR_7 . setText ( VAR_6 ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) instanceof TYPE_2 ) == false ) { throw new TYPE_3 ( STRING_1 ) ; } TYPE_4 VAR_3 = METHOD_2 ( VAR_1 ) ; ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_1 ( VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) instanceof TYPE_2 ) == false ) { throw new TYPE_3 ( STRING_1 ) ; } TYPE_4 VAR_3 = METHOD_2 ( VAR_1 , null ) ; ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_1 ( VAR_3 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { final TYPE_1 VAR_1 = this ; TYPE_2 VAR_2 = new TYPE_2 ( ) { public void METHOD_2 ( ) { try { java.lang.Thread . METHOD_3 ( VAR_3 ) ; new TYPE_3 ( VAR_1 ) ; } catch ( final TYPE_4 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; TYPE_5 . METHOD_5 ( VAR_1 ) ; } } } ; VAR_2 . METHOD_2 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { final TYPE_1 VAR_1 = this ; new java.lang.Thread ( new TYPE_2 ( ) { public void METHOD_2 ( ) { try { java.lang.Thread . METHOD_3 ( VAR_3 ) ; new TYPE_3 ( VAR_1 ) ; } catch ( final TYPE_4 VAR_4 ) { VAR_4 . METHOD_4 ( ) ; TYPE_5 . METHOD_5 ( VAR_1 ) ; } } } ) . start ( ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( STRING_1 , STRING_2 , STRING_3 ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( ) . METHOD_11 ( METHOD_12 ( ) ) . METHOD_13 ( METHOD_14 ( ) ) . METHOD_15 ( STRING_2 ) . METHOD_9 ( ) . METHOD_16 ( ) . METHOD_17 ( METHOD_17 ( ) ) . METHOD_6 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( STRING_2 , STRING_3 ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( ) . METHOD_11 ( METHOD_12 ( ) ) . METHOD_13 ( METHOD_14 ( ) ) . METHOD_15 ( STRING_2 ) . METHOD_9 ( ) . METHOD_16 ( ) . METHOD_17 ( METHOD_17 ( ) ) . METHOD_6 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int status ) { if ( ( VAR_3 ) != null ) { TYPE_3 VAR_4 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_3 VAR_5 = VAR_2 . METHOD_3 ( ) ; METHOD_4 ( ( ( ( STRING_1 + ( VAR_5 . toString ( ) ) ) + STRING_2 ) + ( TYPE_4 . METHOD_5 ( VAR_2 . getValue ( ) ) ) ) ) ; VAR_3 . METHOD_1 ( VAR_4 , VAR_5 ) ; } VAR_6 . METHOD_6 ( true ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int status ) { if ( ( VAR_3 ) != null ) { TYPE_3 VAR_4 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_3 VAR_5 = VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_1 ( VAR_4 , VAR_5 ) ; } VAR_6 . METHOD_6 ( true ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( true ) ; METHOD_3 ( true ) ; VAR_2 = new TYPE_2 ( getActivity ( ) ) ; VAR_3 = new TYPE_3 ( getActivity ( ) . METHOD_4 ( ) ) ; VAR_3 . execute ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( true ) ; METHOD_3 ( true ) ; VAR_2 = new TYPE_2 ( getActivity ( ) ) ; VAR_3 = new TYPE_3 ( getActivity ( ) . METHOD_4 ( ) ) . execute ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final TYPE_4 VAR_3 ) { TYPE_1 result = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; final TYPE_5 VAR_4 = TYPE_6 . METHOD_4 ( VAR_2 ) ; if ( VAR_4 != null ) { result = METHOD_5 ( ( ( TYPE_7 ) ( VAR_1 ) ) , VAR_2 , VAR_4 ) ; if ( result . METHOD_6 ( ) ) { result = METHOD_7 ( ( ( TYPE_7 ) ( VAR_1 ) ) , VAR_2 , VAR_4 ) ; } } return result ; }\n", "fixed": "public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final TYPE_4 VAR_3 ) { TYPE_1 result = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; final TYPE_5 VAR_4 = TYPE_6 . METHOD_4 ( VAR_2 ) ; if ( VAR_4 != null ) { result = METHOD_5 ( ( ( TYPE_7 ) ( VAR_1 ) ) , VAR_2 , VAR_4 ) ; if ( result . METHOD_6 ( ) ) { result = METHOD_7 ( ( ( TYPE_7 ) ( VAR_1 ) ) , VAR_2 , VAR_4 , VAR_3 ) ; } } return result ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String title ) { for ( java.lang.String VAR_2 : title . split ( STRING_1 ) ) { java.lang.System.err.println ( VAR_2 ) ; if ( ( ( VAR_2 . length ( ) ) >= ( VAR_3 ) ) && ( VAR_2 . METHOD_2 ( STRING_2 ) ) ) { ( VAR_4 ) ++ ; if ( VAR_1 . contains ( VAR_2 ) ) { ( VAR_5 ) ++ ; } } } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String title ) { for ( java.lang.String VAR_2 : title . split ( STRING_1 ) ) { if ( ( ( VAR_2 . length ( ) ) >= ( VAR_3 ) ) && ( VAR_2 . METHOD_2 ( STRING_2 ) ) ) { ( VAR_4 ) ++ ; if ( VAR_1 . contains ( VAR_2 ) ) { ( VAR_5 ) ++ ; } } } }\n"}
{"fixCommitSHA1": "320421c66bab7fc9670e766769c4a9ec60063fe8", "projectName": "neo4j.neo4j", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void makeSureStoreCantBeUpgradedByBatchInserterEvenIfExplicitlyToldTo() throws Exception\n     {\n        String path = path( 11 );\n         new EmbeddedGraphDatabase( path ).shutdown();\n         setOlderNeoStoreVersion( path );", "fixed": "     @Test\n     public void makeSureStoreCantBeUpgradedByBatchInserterEvenIfExplicitlyToldTo() throws Exception\n     {\n        String path = path( 14 );\n         new EmbeddedGraphDatabase( path ).shutdown();\n         setOlderNeoStoreVersion( path );", "sourceBeforeFix": "path(11)", "sourceAfterFix": "path(14)"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 . isEmpty ( ) ) { if ( VAR_1 . METHOD_3 ( ) ) { VAR_2 = METHOD_4 ( VAR_1 ) ; } } else { if ( VAR_1 . METHOD_3 ( ) ) { VAR_2 = ( VAR_2 + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; java.lang.System.out.println ( VAR_1 . getTime ( ) . toString ( ) ) ; } } return VAR_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_2 . isEmpty ( ) ) { if ( VAR_1 . METHOD_3 ( ) ) { VAR_2 = METHOD_4 ( VAR_1 ) ; } } else { if ( VAR_1 . METHOD_3 ( ) ) { VAR_2 = ( VAR_2 + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; } } return VAR_2 ; }\n"}
{"problem": "private java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Set < java.lang.String > result = new java.util.HashSet < java.lang.String > ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 . equals ( VAR_3 ) ) ) ) result . add ( VAR_2 ) ; for ( java.lang.String VAR_4 : VAR_1 . METHOD_3 ( ) ) result . add ( VAR_4 ) ; return result ; }\n", "fixed": "private java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > result = new java.util.ArrayList < java.lang.String > ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 . equals ( VAR_3 ) ) ) ) result . add ( VAR_2 ) ; for ( java.lang.String VAR_4 : VAR_1 . METHOD_3 ( ) ) result . add ( VAR_4 ) ; return result ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected static void METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , java.lang.Class < ? > VAR_2 , TYPE_2 VAR_3 ) { java.lang.Class < ? > [ ] VAR_4 = VAR_3 . METHOD_2 ( ) ; TYPE_3 [ ] VAR_5 = VAR_3 . METHOD_3 ( ) ; for ( int i = 0 ; i < ( VAR_4 . length ) ; i ++ ) { TYPE_4 . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 [ i ] , VAR_5 [ i ] , VAR_3 ) ; } }\n", "fixed": "protected static void METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , java.lang.Class < ? > VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 [ ] VAR_5 = VAR_3 . METHOD_3 ( ) ; for ( int i = 0 ; i < ( VAR_5 . length ) ; i ++ ) { TYPE_4 . METHOD_4 ( VAR_1 , VAR_2 , VAR_5 [ i ] , VAR_3 ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDataFormatEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DataFormatEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDataFormatEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DataFormatEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b0e92a07d0ca51f073ea47d2a3c9ec9b81500ddf", "projectName": "square.javapoet", "bugType": "Change Unary Operator\t", "problem": "       }\n     }\n    if (importedClassIndex.isEmpty()) {\n       appendable.append('\\n');\n     }", "fixed": "       }\n     }\n    if (!importedClassIndex.isEmpty()) {\n       appendable.append('\\n');\n     }", "sourceBeforeFix": "importedClassIndex.isEmpty()", "sourceAfterFix": "!importedClassIndex.isEmpty()"}
{"problem": "public void METHOD_1 ( TYPE_1 response ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; METHOD_3 ( true ) ; VAR_2 = VAR_3 . METHOD_4 ( ) ; METHOD_5 ( VAR_3 , response ) ; if ( ! ( VAR_4 . equals ( VAR_5 ) ) ) { final java.util.Map < java.lang.String , java.lang.String > VAR_6 = VAR_7 ; final java.lang.String [ ] VAR_8 = VAR_9 ; VAR_5 . METHOD_6 ( VAR_4 ) ; VAR_7 = VAR_6 ; VAR_9 = VAR_8 ; TYPE_3 . METHOD_7 ( VAR_5 ) ; METHOD_8 ( null ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 response ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; METHOD_3 ( true ) ; VAR_2 = VAR_3 . METHOD_4 ( ) ; METHOD_5 ( VAR_3 , response ) ; if ( ! ( VAR_4 . equals ( VAR_5 ) ) ) { final java.util.Map < java.lang.String , java.lang.String > VAR_6 = VAR_7 ; VAR_5 . METHOD_6 ( VAR_4 ) ; VAR_7 = VAR_6 ; TYPE_3 . METHOD_7 ( VAR_5 ) ; METHOD_8 ( null ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 . info ( STRING_1 ) ; TYPE_1 . info ( STRING_2 , new TYPE_2 ( VAR_1 , 1 ) . append ( VAR_2 , 1 ) ) ; VAR_3 . METHOD_2 ( VAR_4 ) . METHOD_3 ( new TYPE_2 ( VAR_1 , 1 ) . append ( VAR_2 , 1 ) . append ( STRING_3 , true ) ) ; VAR_3 . METHOD_2 ( VAR_5 ) . METHOD_3 ( new TYPE_2 ( VAR_6 , 1 ) . append ( STRING_3 , true ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . info ( STRING_1 ) ; TYPE_1 . info ( STRING_2 , new TYPE_2 ( VAR_1 , 1 ) . append ( VAR_2 , 1 ) ) ; VAR_3 . METHOD_2 ( VAR_4 ) . METHOD_3 ( new TYPE_2 ( VAR_1 , 1 ) . append ( VAR_6 , 1 ) . append ( VAR_2 , 1 ) . append ( STRING_3 , true ) ) ; VAR_3 . METHOD_2 ( VAR_5 ) . METHOD_3 ( new TYPE_2 ( VAR_6 , 1 ) . append ( STRING_3 , true ) ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , double VAR_2 , double VAR_3 , java.lang.String VAR_4 ) { VAR_5 . METHOD_2 ( ) ; VAR_5 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( ) ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . VAR_1 = VAR_1 ; VAR_6 . METHOD_6 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_6 . execute ( new TYPE_1 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , double VAR_2 , double VAR_3 , java.lang.String VAR_4 ) { VAR_5 . METHOD_2 ( ) ; VAR_5 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( ) ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . VAR_1 = VAR_1 ; this . VAR_4 = VAR_4 ; VAR_6 . METHOD_6 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_6 . execute ( new TYPE_1 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 context ) { final TYPE_3 VAR_2 = this . VAR_3 . METHOD_2 ( ) ; final TYPE_4 VAR_4 = this . VAR_3 . METHOD_3 ( ) ; final TYPE_4 VAR_5 = new TYPE_5 ( VAR_4 , VAR_6 ) ; this . METHOD_4 ( VAR_2 , VAR_5 ) ; this . METHOD_5 ( VAR_4 , VAR_5 ) ; this . METHOD_6 ( VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 context ) { final TYPE_3 VAR_2 = this . VAR_3 . METHOD_2 ( ) ; final TYPE_4 VAR_4 = this . VAR_3 . METHOD_3 ( ) ; final TYPE_4 VAR_5 = new TYPE_5 ( VAR_4 , VAR_6 ) ; this . METHOD_4 ( VAR_2 , VAR_5 ) ; this . METHOD_5 ( VAR_5 ) ; this . METHOD_6 ( VAR_4 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( ) ; } while ( VAR_2 ) { try { METHOD_4 ( ) ; try { java.lang.Thread . METHOD_2 ( INT_2 ) ; } catch ( TYPE_1 VAR_3 ) { } } catch ( java.lang.NullPointerException VAR_3 ) { } } }\n", "fixed": "public void METHOD_1 ( ) { try { java.lang.Thread . METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 VAR_1 ) { } while ( VAR_2 ) { try { METHOD_4 ( ) ; try { java.lang.Thread . METHOD_2 ( INT_2 ) ; } catch ( TYPE_1 VAR_3 ) { } } catch ( java.lang.NullPointerException VAR_3 ) { } } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.StringBuilder VAR_3 ) { if ( ( VAR_3 . length ( ) ) > 0 ) { VAR_3 . append ( STRING_1 ) ; } VAR_3 . append ( VAR_1 ) . append ( STRING_2 ) . append ( VAR_2 ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.StringBuilder VAR_3 ) { if ( ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { if ( ( VAR_3 . length ( ) ) > 0 ) { VAR_3 . append ( STRING_1 ) ; } VAR_3 . append ( VAR_1 ) . append ( STRING_2 ) . append ( VAR_2 ) ; } }\n"}
{"fixCommitSHA1": "be91a5326f6a289ae9d34437a63c8ba8434fe2b2", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "   public static final long FIXED_OVERHEAD = ClassSize.align(\n       (4 * Bytes.SIZEOF_LONG) + Bytes.SIZEOF_BOOLEAN +\n      (22 * ClassSize.REFERENCE) + ClassSize.OBJECT + Bytes.SIZEOF_INT);\n   public static final long DEEP_OVERHEAD = ClassSize.align(FIXED_OVERHEAD +\n       (ClassSize.OBJECT * 2) + (2 * ClassSize.ATOMIC_BOOLEAN) +", "fixed": "   public static final long FIXED_OVERHEAD = ClassSize.align(\n       (4 * Bytes.SIZEOF_LONG) + Bytes.SIZEOF_BOOLEAN +\n      (23 * ClassSize.REFERENCE) + ClassSize.OBJECT + Bytes.SIZEOF_INT);\n   public static final long DEEP_OVERHEAD = ClassSize.align(FIXED_OVERHEAD +\n       (ClassSize.OBJECT * 2) + (2 * ClassSize.ATOMIC_BOOLEAN) +", "sourceBeforeFix": "22 * ClassSize.REFERENCE", "sourceAfterFix": "23 * ClassSize.REFERENCE"}
{"problem": "public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; java.util.Date VAR_4 = VAR_1 . METHOD_3 ( ) ; boolean VAR_5 = VAR_2 . METHOD_2 ( VAR_6 ) . METHOD_4 ( ) ; TYPE_2 VAR_7 = TYPE_2 . METHOD_5 ( ) ; TYPE_2 VAR_8 = new TYPE_2 ( VAR_4 ) ; TYPE_3 VAR_9 = new TYPE_3 ( VAR_8 , VAR_7 ) ; return ( ( VAR_9 . METHOD_6 ( ) ) > INT_1 ) || VAR_5 ; }\n", "fixed": "public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; java.util.Date VAR_4 = VAR_1 . METHOD_3 ( ) ; boolean VAR_5 = VAR_2 . METHOD_2 ( VAR_6 ) . METHOD_4 ( ) ; TYPE_2 VAR_7 = TYPE_2 . METHOD_5 ( ) ; TYPE_2 VAR_8 = new TYPE_2 ( VAR_4 ) ; TYPE_3 VAR_9 = new TYPE_3 ( VAR_8 , VAR_7 ) ; return ( ( VAR_9 . METHOD_6 ( ) ) >= INT_1 ) || VAR_5 ; }\n"}
{"name": "SUBSEQUENCES.java", "problem": "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { return new ArrayList(); } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret; } }", "fixed": "public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { ArrayList empty_set = new ArrayList<ArrayList>(); empty_set.add(new ArrayList()); return empty_set; } ArrayList ret = new ArrayList(50); for (int i=a; i<b+1-k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i+1, b, k-1)) { rest.add(0,i); base.add(rest); } ret.addAll(base); } return ret; } }", "hint": "Subsequences\nInput:\n    a: An int", "input": [[1, 2, 6, 72, 7, 33, 4]], "output": [1, 2, 4, 6, 7, 33, 72]}
{"problem": "public void METHOD_1 ( TYPE_1 field ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < > ( ) ; } java.lang.Object value = field . getValue ( ) ; value = ( value == null ) ? null : value . toString ( ) ; this . VAR_1 . put ( field . METHOD_2 ( ) , ( ( java.lang.String ) ( value ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 field ) { java.lang.Object value = field . getValue ( ) ; value = ( value == null ) ? null : value . toString ( ) ; this . VAR_1 . put ( field . METHOD_2 ( ) , ( ( java.lang.String ) ( value ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( double VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) throws java.lang.Exception { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; METHOD_2 ( ) . METHOD_3 ( 0.0 ) ; if ( TYPE_2 . METHOD_4 ( ) ) { VAR_4 . METHOD_5 ( ) . METHOD_6 ( true ) ; java.lang.Thread . METHOD_7 ( INT_1 ) ; } }\n", "fixed": "public void METHOD_1 ( double VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) throws java.lang.Exception { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; METHOD_2 ( ) . METHOD_3 ( 0.0 ) ; if ( TYPE_2 . METHOD_4 ( ) ) { VAR_4 . METHOD_5 ( ) . METHOD_6 ( true ) ; } }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) throws java.lang.ClassNotFoundException , TYPE_1 { java.util.Map VAR_1 = TYPE_2 . getContext ( ) . METHOD_2 ( ) ; TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 . get ( STRING_1 ) ) ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_4 = VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; return VAR_5 ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) throws java.lang.ClassNotFoundException , TYPE_1 { java.util.Map VAR_1 = TYPE_2 . getContext ( ) . METHOD_2 ( ) ; VAR_2 = ( ( TYPE_3 ) ( VAR_1 . get ( STRING_1 ) ) ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_4 = VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; return VAR_5 ; }\n"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tthrow new InvalidDataException(\n \t\t\t\t\t\"Could not find SecurityToken in JSON data\");\n \t\tsecurityToken = data.toString();\n\t\tlogger.debug(\"myq securityToken: {}\", securityToken);\n \t}\n \t/**", "fixed": " \t\t\tthrow new InvalidDataException(\n \t\t\t\t\t\"Could not find SecurityToken in JSON data\");\n \t\tsecurityToken = data.toString();\n\t\tlogger.trace(\"myq securityToken: {}\", securityToken);\n \t}\n \t/**", "sourceBeforeFix": "logger.debug(\"myq securityToken: {}\",securityToken)", "sourceAfterFix": "logger.trace(\"myq securityToken: {}\",securityToken)"}
{"fixCommitSHA1": "ebf33c6e3b3ec94965c07defe2e79f7edec7f64d", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "         }\n     }\n    @Test(timeout = 120000)\n     public void testConcurrentMessageBufferAccess() throws Throwable {\n         EventLoopGroup l = new LocalEventLoopGroup(4, new PrefixThreadFactory(\"l\"));\n         EventExecutorGroup e1 = new DefaultEventExecutorGroup(4, new PrefixThreadFactory(\"e1\"));", "fixed": "         }\n     }\n    @Test(timeout = 30000)\n     public void testConcurrentMessageBufferAccess() throws Throwable {\n         EventLoopGroup l = new LocalEventLoopGroup(4, new PrefixThreadFactory(\"l\"));\n         EventExecutorGroup e1 = new DefaultEventExecutorGroup(4, new PrefixThreadFactory(\"e1\"));", "sourceBeforeFix": "timeout=120000", "sourceAfterFix": "timeout=30000"}
{"fixCommitSHA1": "3066e39a4024e88b26e3346a93bd5b9b56dcefed", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "setLowHighExpected(lowResults, highResults, expectedResults, BLANC_F1, 46.00, 47.25, 46.68);\nsetLowHighExpected(lowResults, highResults, expectedResults, CONLL_SCORE, 53.75, 54.00, 54.01);\n     BenchmarkingHelper.benchmarkResults(results, lowResults, highResults, expectedResults);\n   }", "fixed": "setLowHighExpected(lowResults, highResults, expectedResults, BLANC_F1, 46.00, 47.25, 46.68);\nsetLowHighExpected(lowResults, highResults, expectedResults, CONLL_SCORE, 53.75, 54.10, 54.01);\n     BenchmarkingHelper.benchmarkResults(results, lowResults, highResults, expectedResults);\n   }", "sourceBeforeFix": "setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)", "sourceAfterFix": "setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.10,54.01)"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; int index = 0 ; java.lang.String element = STRING_2 ; TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 ( ) ; boolean VAR_2 = true ; boolean result = VAR_1 . add ( index , element ) ; assertEquals ( VAR_2 , result ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.lang.System.out.println ( STRING_1 ) ; int index = 0 ; java.lang.String element = STRING_2 ; TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 ( ) ; boolean result = VAR_1 . add ( index , element ) ; assertEquals ( true , result ) ; }\n"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { final java.io.File file = VAR_1 . METHOD_2 ( ) ; try ( final TYPE_1 VAR_2 = new TYPE_1 ( file , STRING_1 ) ) { final TYPE_2 VAR_3 = VAR_4 ; final int VAR_5 = INT_1 * INT_2 ; METHOD_3 ( VAR_5 , VAR_6 ) ; final TYPE_3 VAR_7 = new TYPE_3 ( VAR_2 , file . getName ( ) , VAR_3 , false , VAR_5 , null , null , true ) ; assertEquals ( VAR_5 , VAR_7 . METHOD_4 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { final java.io.File file = VAR_1 . METHOD_2 ( ) ; try ( final TYPE_1 VAR_2 = new TYPE_1 ( file , STRING_1 ) ) { final TYPE_2 VAR_3 = VAR_4 ; final int VAR_5 = INT_1 * INT_2 ; METHOD_3 ( VAR_5 , VAR_6 ) ; final TYPE_3 VAR_7 = new TYPE_3 ( VAR_2 , file . getName ( ) , VAR_3 , VAR_5 , null , null , true ) ; assertEquals ( VAR_5 , VAR_7 . METHOD_4 ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { switch ( getType ( ) ) { case VAR_2 : METHOD_2 ( VAR_1 ) ; break ; case VAR_3 : METHOD_3 ( VAR_1 ) ; break ; case VAR_4 : METHOD_4 ( VAR_1 ) ; break ; default : return ; } METHOD_5 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { switch ( getType ( ) ) { case VAR_2 : METHOD_2 ( ) ; break ; case VAR_3 : METHOD_3 ( ) ; break ; case VAR_4 : METHOD_4 ( ) ; break ; default : return ; } METHOD_5 ( ) ; }\n"}
{"project": "Math", "bugId": 54, "problem": " public double toDouble() {\n         Dfp y = this;\n         boolean negate = false;\n        if (lessThan(getZero())) {\n             y = negate();\n             negate = true;\n         }", "fixed": " public double toDouble() {\n         Dfp y = this;\n         boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n             y = negate();\n             negate = true;\n         }", "observations": "", "repairActions": ["assignAdd", "condBranIfAdd", "condBranIfElseAdd", "condExpMod", "mcAdd", "retBranchAdd", "varAdd"], "repairPatterns": ["condBlockOthersAdd", "wrapsIfElse"]}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_4 = ( ( TYPE_2 ) ( VAR_5 ) ) . METHOD_3 ( ) ; java.lang.String VAR_6 = VAR_4 . METHOD_4 ( ) ; while ( VAR_7 ) { if ( VAR_3 == STRING_1 ) { VAR_8 . METHOD_5 ( VAR_6 ) ; break ; } } }\n", "fixed": "public void METHOD_1 ( ) { java.util.Scanner VAR_1 = new java.util.Scanner ( VAR_2 ) ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_4 = ( ( TYPE_2 ) ( VAR_5 ) ) . METHOD_3 ( ) ; java.lang.String VAR_6 = VAR_4 . METHOD_4 ( ) ; while ( VAR_7 ) { if ( VAR_3 . isEmpty ( ) ) { VAR_8 . METHOD_5 ( VAR_6 ) ; break ; } } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 data ) throws java.io.IOException , TYPE_2 { if ( ( ( VAR_1 . METHOD_2 ( ) ) == false ) && ( VAR_2 . METHOD_3 ( VAR_3 , VAR_4 ) ) ) { VAR_5 . METHOD_4 ( data , data , VAR_6 ) ; } else { throw new java.io.IOException ( STRING_1 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 data ) throws java.io.IOException , TYPE_2 { if ( ( VAR_1 . METHOD_2 ( ) ) == false ) { if ( ( VAR_2 . METHOD_3 ( VAR_3 , VAR_4 ) ) == false ) { throw new java.io.IOException ( STRING_1 ) ; } } VAR_5 . METHOD_4 ( data , data , VAR_6 ) ; }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 , TYPE_1 < TYPE_2 > VAR_2 , TYPE_3 out ) { TYPE_1 < ? > [ ] VAR_3 = VAR_2 . METHOD_2 ( ) ; out . METHOD_3 ( STRING_1 ) ; METHOD_4 ( VAR_2 . getType ( ) ) ; out . METHOD_3 ( VAR_2 . METHOD_5 ( ) . getName ( ) ) ; if ( ( VAR_3 . length ) > 0 ) { out . METHOD_3 ( STRING_2 ) ; METHOD_6 ( VAR_3 [ 0 ] , out ) ; } out . METHOD_7 ( STRING_3 ) ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_1 < ? > [ ] VAR_3 = VAR_2 . METHOD_2 ( ) ; out . METHOD_3 ( STRING_1 ) ; METHOD_4 ( VAR_2 . getType ( ) ) ; out . METHOD_3 ( VAR_2 . METHOD_5 ( ) . getName ( ) ) ; if ( ( VAR_3 . length ) > 0 ) { out . METHOD_3 ( STRING_2 ) ; METHOD_6 ( VAR_3 [ 0 ] ) ; } out . METHOD_7 ( STRING_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; TYPE_2 . METHOD_2 ( this , view ) ; if ( VAR_1 != null ) { state = VAR_1 ; } METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; METHOD_11 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view , TYPE_1 VAR_1 ) { super . METHOD_1 ( view , VAR_1 ) ; TYPE_2 . METHOD_2 ( this , view ) ; if ( VAR_1 != null ) { state = VAR_1 ; } METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; METHOD_11 ( ) ; METHOD_7 ( VAR_2 ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { int VAR_1 = 0 ; for ( TYPE_2 event : VAR_2 ) { VAR_1 += event . METHOD_2 ( ) ; if ( ( VAR_1 - ( VAR_3 ) ) < 0 ) { if ( ( VAR_4 ) != 0 ) VAR_3 = ( ( VAR_3 ) ++ ) % ( VAR_4 ) ; else java.lang.System.out.println ( STRING_1 ) ; return VAR_5 . get ( ( ( event . METHOD_3 ( ) ) - 1 ) ) ; } } return null ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { int VAR_1 = 0 ; for ( TYPE_2 event : VAR_2 ) { VAR_1 += event . METHOD_2 ( ) ; if ( ( ( VAR_3 ) - VAR_1 ) < 0 ) { if ( ( VAR_4 ) != 0 ) VAR_3 = ( ( VAR_3 ) ++ ) % ( VAR_4 ) ; else java.lang.System.out.println ( STRING_1 ) ; return VAR_5 . get ( ( ( event . METHOD_3 ( ) ) - 1 ) ) ; } } return null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static int METHOD_1 ( java.util.Scanner VAR_1 ) { int number = 0 ; boolean VAR_2 = true ; while ( VAR_2 ) { try { number = VAR_1 . METHOD_2 ( ) ; if ( ( number < 1 ) || ( number > INT_1 ) ) { java.lang.System.out.println ( STRING_1 ) ; continue ; } else break ; } catch ( TYPE_1 VAR_3 ) { java.lang.System.out.println ( STRING_2 ) ; VAR_1 . METHOD_3 ( ) ; } } return number ; }\n", "fixed": "public static int METHOD_1 ( java.util.Scanner VAR_1 ) { int number = 0 ; boolean VAR_2 = true ; while ( VAR_2 ) { try { number = VAR_1 . METHOD_2 ( ) ; if ( ( number <= 1 ) || ( number > INT_1 ) ) { java.lang.System.out.println ( STRING_1 ) ; continue ; } else break ; } catch ( TYPE_1 VAR_3 ) { java.lang.System.out.println ( STRING_2 ) ; VAR_1 . METHOD_3 ( ) ; } } return number ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( VAR_1 > ( VAR_2 ) ) { throw new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) ) ; } TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 = this . VAR_5 ; VAR_6 = this . VAR_2 ; VAR_7 = ( this . VAR_8 ) + VAR_1 ; VAR_9 = this . VAR_10 ; return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( VAR_1 > ( VAR_2 ) ) { throw new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) ) ; } TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 = this . VAR_5 ; VAR_6 = ( this . VAR_2 ) - VAR_1 ; VAR_7 = ( this . VAR_8 ) + VAR_1 ; VAR_9 = this . VAR_10 ; return VAR_3 ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( STRING_1 . equals ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { super . METHOD_1 ( ) ; } TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ; if ( STRING_1 . equals ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { super . METHOD_1 ( ) ; return ; } METHOD_5 ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , VAR_3 class ) ; VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; VAR_2 . METHOD_6 ( VAR_5 class ) ; VAR_2 . METHOD_6 ( VAR_6 class ) ; TYPE_3 . METHOD_7 ( ) . METHOD_8 ( VAR_2 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , VAR_3 class ) ; VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; VAR_2 . METHOD_6 ( VAR_5 class ) ; TYPE_3 . METHOD_7 ( ) . METHOD_8 ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 file , java.lang.String name , java.lang.String VAR_1 ) { if ( name == null ) { java.lang.System.out.println ( STRING_1 ) ; } else if ( VAR_2 . METHOD_2 ( name ) ) { java.lang.System.out.println ( STRING_2 ) ; } else { TYPE_2 VAR_3 = new TYPE_2 ( file . getId ( ) , name , file , VAR_1 ) ; VAR_2 . put ( name , VAR_3 ) ; VAR_4 . put ( file . getId ( ) , VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 file , java.lang.String name , java.lang.String VAR_1 ) { if ( name == null ) { java.lang.System.out.println ( STRING_1 ) ; } else { TYPE_2 VAR_3 = new TYPE_2 ( file . getId ( ) , name , file , VAR_1 ) ; VAR_2 . put ( name , VAR_3 ) ; VAR_4 . put ( file . getId ( ) , VAR_3 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( VAR_2 != null ) && ( VAR_3 . equals ( VAR_2 . getName ( ) ) ) ) { VAR_1 = VAR_2 ; } else { VAR_1 = METHOD_4 ( ) . METHOD_3 ( VAR_3 ) ; } } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( VAR_2 != null ) && ( VAR_3 . equals ( VAR_2 . getName ( ) ) ) ) { VAR_1 = VAR_2 ; } if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_4 ( ) . METHOD_3 ( VAR_3 ) ; } } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 listener ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_3 = VAR_1 . METHOD_2 ( VAR_4 class ) ; if ( VAR_3 != null ) { for ( TYPE_6 p : VAR_3 . METHOD_3 ( ) ) { VAR_2 . put ( p . getName ( ) , java.lang.String . METHOD_4 ( p . getValue ( ) ) ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 listener ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_3 = VAR_1 . METHOD_2 ( VAR_4 class ) ; if ( VAR_3 != null ) { for ( TYPE_6 p : VAR_3 . METHOD_3 ( ) ) { VAR_2 . put ( p . getName ( ) , java.lang.String . METHOD_4 ( p . getValue ( ) ) ) ; } } super . METHOD_1 ( VAR_1 , VAR_2 , listener ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedInfinispanEndpointBuilder\n             extends\n                 AdvancedInfinispanEndpointConsumerBuilder, AdvancedInfinispanEndpointProducerBuilder {\n         default InfinispanEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedInfinispanEndpointBuilder\n             extends\n                 AdvancedInfinispanEndpointConsumerBuilder, AdvancedInfinispanEndpointProducerBuilder {\n         default InfinispanEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . get ( VAR_1 ) ; VAR_6 . get ( VAR_2 ) . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( ( VAR_3 * INT_1 ) ) ; VAR_4 . METHOD_4 ( ) ; if ( ( VAR_4 . METHOD_5 ( ) ) & ( VAR_1 != 1 ) ) { METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . get ( VAR_1 ) ; VAR_6 . get ( VAR_2 ) . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) ; if ( ( VAR_4 . METHOD_5 ( ) ) & ( VAR_1 != 1 ) ) { METHOD_6 ( ) ; } }\n"}
{"problem": "private java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; int i = 0 ; for ( int [ ] VAR_2 : VAR_3 ) { VAR_1 += ( STRING_2 + ( java.lang.Integer.toString ( i ) ) ) + STRING_3 ; for ( int VAR_4 : VAR_2 ) { VAR_1 += ( STRING_4 + ( java.lang.Integer.toString ( VAR_4 ) ) ) + STRING_5 ; } i ++ ; VAR_1 += \"\\n\" ; } return VAR_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; int i = 0 ; for ( int [ ] VAR_2 : VAR_3 ) { VAR_1 += ( STRING_2 + ( java.lang.Integer.toString ( i ) ) ) + STRING_3 ; for ( int VAR_4 : VAR_2 ) { VAR_1 += ( STRING_4 + ( java.lang.Integer.toString ( VAR_4 ) ) ) + STRING_5 ; } i ++ ; VAR_1 += \"\\n\" ; } return VAR_1 ; }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { synchronized ( VAR_3 ) { if ( ( ! ( VAR_1 . equals ( STRING_1 ) ) ) && ( VAR_2 . equals ( STRING_1 ) ) ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; } } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { synchronized ( VAR_3 ) { if ( ( ! ( VAR_1 . equals ( STRING_1 ) ) ) && ( ! ( VAR_2 . equals ( STRING_1 ) ) ) ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; } } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, false, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "fixed": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, true, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"max-inclusive\",ModelType.BOOLEAN)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"max-inclusive\",ModelType.BOOLEAN,true)"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ; java.util.Date VAR_3 = VAR_4 . METHOD_3 ( STRING_2 ) ; java.util.Date VAR_5 = VAR_4 . METHOD_3 ( STRING_3 ) ; java.lang.String VAR_6 = STRING_4 ; java.lang.String VAR_7 = STRING_5 ; TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 , STRING_6 , VAR_7 , VAR_3 , VAR_5 , VAR_6 , null , VAR_8 ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ; java.util.Date VAR_3 = VAR_4 . METHOD_3 ( STRING_2 ) ; java.util.Date VAR_5 = VAR_4 . METHOD_3 ( STRING_3 ) ; java.lang.String VAR_6 = STRING_4 ; TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 , STRING_6 , VAR_3 , VAR_5 , VAR_6 , null , VAR_8 ) ; }\n"}
{"fixCommitSHA1": "7907f476688eb48f9b46434e90ef0bb02c1ea5d5", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": " public final class ClusterManager extends BaseManager implements ConnectionListener {\r\n    private final int WAIT_SECONDS_BEFORE_JOIN = ConfigProperty.WAIT_SECONDS_BEFORE_JOIN.getInteger();\r\n    private final int MAX_NO_HEARTBEAT_SECONDS = ConfigProperty.MAX_NO_HEARTBEAT_SECONDS.getInteger();\r\n     Set<ScheduledAction> setScheduledActions = new HashSet<ScheduledAction>(1000);\r", "fixed": " public final class ClusterManager extends BaseManager implements ConnectionListener {\r\n    private final long WAIT_MILLIS_BEFORE_JOIN = ConfigProperty.WAIT_SECONDS_BEFORE_JOIN.getInteger() * 1000L;\r\n    private final long MAX_NO_HEARTBEAT_MILLIS = ConfigProperty.MAX_NO_HEARTBEAT_SECONDS.getInteger() * 1000L;\r\n     Set<ScheduledAction> setScheduledActions = new HashSet<ScheduledAction>(1000);\r", "sourceBeforeFix": "System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000", "sourceAfterFix": "System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN"}
{"problem": "void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( STRING_1 , this . VAR_1 , VAR_2 ) ; } synchronized ( VAR_3 ) { if ( ( VAR_4 ) == ( VAR_5 ) ) { TYPE_2 . METHOD_4 ( ( ( VAR_6 ) == null ) , STRING_2 ) ; TYPE_2 . METHOD_4 ( ( ( VAR_7 ) == null ) , STRING_3 ) ; this . VAR_5 = VAR_8 ; this . VAR_2 = false ; this . VAR_9 = true ; METHOD_5 ( ) ; } } }\n", "fixed": "void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( STRING_1 , this . VAR_1 , VAR_2 ) ; } synchronized ( VAR_3 ) { if ( ( VAR_4 ) == ( VAR_5 ) ) { TYPE_2 . METHOD_4 ( ( ( VAR_6 ) == null ) , STRING_2 ) ; TYPE_2 . METHOD_4 ( ( ( VAR_7 ) == null ) , STRING_3 ) ; this . VAR_5 = VAR_8 ; this . VAR_2 = false ; this . VAR_9 = true ; METHOD_5 ( null ) ; } } }\n"}
{"problem": "public static int METHOD_1 ( byte [ ] VAR_1 , int offset ) { int VAR_2 = VAR_1 [ offset ] ; int VAR_3 = VAR_1 [ ( offset + 1 ) ] ; if ( VAR_2 < 0 ) VAR_2 += INT_1 ; if ( VAR_3 < 0 ) VAR_2 += INT_1 ; return ( VAR_2 < < INT_2 ) + ( VAR_3 < < 0 ) ; }\n", "fixed": "public static int METHOD_1 ( byte [ ] VAR_1 , int offset ) { int VAR_2 = VAR_1 [ offset ] ; int VAR_3 = VAR_1 [ ( offset + 1 ) ] ; if ( VAR_2 < 0 ) VAR_2 += INT_1 ; if ( VAR_3 < 0 ) VAR_3 += INT_1 ; return ( VAR_2 < < INT_2 ) + ( VAR_3 < < 0 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "a5fe4f5d8fcb74a5ec054f61153f714c2983b689", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                         } else {\n                            exchange.getOut().setHeader(SqlConstants.SQL_UPDATE_COUNT, ps.getUpdateCount());\n                         }\n                     }\n                     } finally {", "fixed": "                         } else {\n                            exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT, ps.getUpdateCount());\n                         }\n                     }\n                     } finally {", "sourceBeforeFix": "exchange.getOut()", "sourceAfterFix": "exchange.getIn()"}
{"problem": "public TYPE_1 init ( java.lang.String value ) throws java.lang.Exception { java.lang.Thread . METHOD_1 ( INT_1 ) ; java.lang.System.out.println ( value ) ; java.lang.String fileName = ( STRING_1 + ( java.lang.Integer . METHOD_2 ( value ) ) ) + STRING_2 ; java.lang.System.out.println ( fileName ) ; TYPE_2 = new TYPE_3 ( INT_2 , new java.io.File ( fileName ) ) ; java.lang.System.out.println ( ( ( VAR_1 ) ++ ) ) ; return new TYPE_1 ( METHOD_3 ( TYPE_2 . METHOD_4 ( ) . VAR_2 ) ) ; }\n", "fixed": "public TYPE_1 init ( java.lang.String value ) throws java.lang.Exception { java.lang.System.out.println ( value ) ; java.lang.String fileName = ( STRING_1 + ( java.lang.Integer . METHOD_2 ( value ) ) ) + STRING_2 ; java.lang.System.out.println ( fileName ) ; TYPE_2 = new TYPE_3 ( INT_2 , new java.io.File ( fileName ) ) ; java.lang.System.out.println ( ( ( VAR_1 ) ++ ) ) ; return new TYPE_1 ( METHOD_3 ( TYPE_2 . METHOD_4 ( ) . VAR_2 ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( long VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) throws TYPE_2 , TYPE_3 { TYPE_1 VAR_6 = VAR_7 . METHOD_2 ( VAR_1 ) ; VAR_6 . METHOD_3 ( VAR_2 ) ; VAR_6 . METHOD_4 ( VAR_3 ) ; VAR_6 . METHOD_5 ( VAR_4 ) ; VAR_6 . METHOD_6 ( VAR_5 ) ; VAR_7 . update ( VAR_6 ) ; return VAR_6 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( long VAR_1 , java.lang.String VAR_2 , long VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) throws TYPE_2 , TYPE_3 { TYPE_1 VAR_6 = VAR_7 . METHOD_2 ( VAR_1 ) ; VAR_6 . METHOD_3 ( VAR_2 ) ; VAR_6 . METHOD_4 ( VAR_3 ) ; VAR_6 . METHOD_5 ( VAR_4 ) ; VAR_6 . METHOD_6 ( VAR_5 ) ; VAR_7 . update ( VAR_6 ) ; return VAR_6 ; }\n"}
{"fixCommitSHA1": "a6e93b4eb714011e524df69fa6414a4951d16e55", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         map.put(Command.MMCONTAINSENTRY, new ContainsEntryHandler(this));\n         map.put(Command.MMKEYS, new MMKeysHandler(this));\n         map.put(Command.MMLOCK, new LockHandler(this));\n        map.put(Command.MMUNLOCK, new UnlockHandler(this));\n         map.put(Command.MMTRYLOCK, new TryLockHandler(this));\n         map.put(Command.MMLISTEN, new ListenHandler(this));\n         return map;", "fixed": "         map.put(Command.MMCONTAINSENTRY, new ContainsEntryHandler(this));\n         map.put(Command.MMKEYS, new MMKeysHandler(this));\n         map.put(Command.MMLOCK, new LockHandler(this));\n        map.put(Command.MMUNLOCK, new MMUnlockHandler(this));\n         map.put(Command.MMTRYLOCK, new TryLockHandler(this));\n         map.put(Command.MMLISTEN, new ListenHandler(this));\n         return map;", "sourceBeforeFix": "new UnlockHandler(this)", "sourceAfterFix": "new MMUnlockHandler(this)"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 size = TYPE_2 . get ( VAR_1 , VAR_2 , VAR_3 ) ; size . METHOD_2 ( null ) ; size . METHOD_2 ( VAR_4 ) ; if ( VAR_5 ) { return ; } TYPE_3 VAR_6 = new TYPE_3 ( ) ; VAR_6 . METHOD_3 ( VAR_7 ) ; VAR_6 . METHOD_4 ( VAR_8 ) ; VAR_6 . METHOD_5 ( VAR_9 ) ; VAR_1 . METHOD_6 ( VAR_2 , VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( ) { size . METHOD_2 ( VAR_4 ) ; TYPE_3 VAR_6 = new TYPE_3 ( ) ; VAR_6 . METHOD_3 ( VAR_7 ) ; VAR_6 . METHOD_4 ( VAR_8 ) ; VAR_6 . METHOD_5 ( VAR_9 ) ; VAR_1 . METHOD_6 ( VAR_2 , VAR_6 ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return ; } TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) . METHOD_3 ( VAR_3 ) . build ( ) ; TYPE_3 . delete ( VAR_4 , VAR_1 ) . METHOD_4 ( new TYPE_4 < TYPE_5 > ( ) { public void METHOD_5 ( TYPE_5 status ) { TYPE_6 . i ( VAR_5 , ( status . METHOD_6 ( ) ? STRING_1 + ( VAR_2 ) : STRING_2 + ( VAR_2 ) ) ) ; } } ) ; }\n", "fixed": "private void METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return ; } TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) . METHOD_3 ( VAR_3 ) . build ( ) ; TYPE_3 . delete ( VAR_4 , VAR_1 ) . METHOD_4 ( new TYPE_4 < TYPE_5 > ( ) { public void METHOD_5 ( TYPE_5 status ) { TYPE_6 . i ( VAR_5 , ( status . METHOD_6 ( ) ? STRING_1 + ( VAR_2 ) : STRING_2 + ( VAR_2 ) ) ) ; } } ) ; }\n"}
{"problem": "public double METHOD_1 ( ) { try { return ( ( VAR_1 ) + ( VAR_2 ) ) / ( ( ( ( VAR_3 ) + ( VAR_4 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) ; } catch ( TYPE_1 VAR_5 ) { return 0.0 ; } }\n", "fixed": "public double METHOD_1 ( ) { if ( ( ( ( VAR_1 ) + ( VAR_2 ) ) == 0 ) || ( ( ( ( ( VAR_3 ) + ( VAR_4 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) == 0 ) ) { return 0 ; } else { return ( ( VAR_1 ) + ( VAR_2 ) ) / ( ( ( ( VAR_3 ) + ( VAR_4 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) ; } }\n"}
{"fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "fixed": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KafkaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKafkaEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KafkaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKafkaEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public boolean METHOD_1 ( float VAR_1 ) { if ( ( ( METHOD_2 ( ) ) != ( VAR_2 ) ) && ( VAR_1 > 0.0F ) ) { VAR_3 = ( ( VAR_3 ) + VAR_1 ) - FLOAT_1 ; if ( ( VAR_3 ) > 0.0F ) { setState ( VAR_4 ) ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( float VAR_1 ) { if ( ( ( METHOD_2 ( ) ) != ( VAR_2 ) ) && ( VAR_1 > 0.0F ) ) { VAR_3 = ( ( VAR_3 ) + VAR_1 ) - FLOAT_1 ; if ( ( VAR_3 ) >= 0.0F ) { setState ( VAR_4 ) ; } } return false ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = this . METHOD_2 ( ) ; java.lang.String query = STRING_1 + VAR_1 ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( query , null ) ; if ( ( VAR_3 . METHOD_4 ( ) ) <= 0 ) { TYPE_3 . i ( STRING_2 , STRING_3 ) ; VAR_3 . METHOD_5 ( ) ; return false ; } TYPE_3 . i ( STRING_2 , STRING_4 ) ; VAR_3 . METHOD_5 ( ) ; return true ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = this . METHOD_2 ( ) ; java.lang.String query = STRING_1 + VAR_1 ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( query , null ) ; if ( ( VAR_3 . METHOD_4 ( ) ) <= 0 ) { TYPE_3 . i ( STRING_2 , STRING_3 ) ; VAR_3 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; return false ; } TYPE_3 . i ( STRING_2 , STRING_4 ) ; VAR_3 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; return true ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_1 ( VAR_2 ) ; TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) ; VAR_5 . METHOD_3 ( STRING_2 , VAR_3 ) ; VAR_5 . METHOD_4 ( STRING_3 ) ; return VAR_5 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_4 . METHOD_1 ( VAR_2 ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) ; VAR_5 . METHOD_3 ( STRING_2 , VAR_3 ) ; VAR_5 . METHOD_4 ( STRING_3 ) ; return VAR_5 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 node ) { if ( node == null ) return ; for ( TYPE_1 VAR_1 : VAR_2 ) METHOD_1 ( VAR_1 ) ; if ( ( ( VAR_2 . size ( ) ) == 0 ) && ( ( VAR_3 ) == false ) ) { TYPE_1 VAR_4 = this . METHOD_2 ( VAR_5 ) ; VAR_4 . METHOD_3 ( node ) ; return ; } return ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 node ) { if ( ( node == null ) || ( ( VAR_2 ) == null ) ) return ; for ( TYPE_1 VAR_1 : VAR_2 ) METHOD_1 ( VAR_1 ) ; if ( ( ( VAR_2 . size ( ) ) == 0 ) && ( ( VAR_3 ) == false ) ) { TYPE_1 VAR_4 = this . METHOD_2 ( VAR_5 ) ; VAR_4 . METHOD_3 ( node ) ; return ; } return ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic interface TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "fixed": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic abstract class TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; java.util.Map < java.lang.String , TYPE_3 > values = VAR_1 . METHOD_5 ( VAR_3 ) ; for ( java.util.Map.Entry < java.lang.String , TYPE_3 > VAR_4 : values . METHOD_6 ( ) ) { if ( ( VAR_4 . getValue ( ) . intValue ( ) ) != 0 ) { VAR_2 . setValue ( VAR_4 . METHOD_7 ( ) , VAR_4 . getValue ( ) ) ; } } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; java.util.Map < java.lang.String , TYPE_3 > values = VAR_1 . METHOD_5 ( VAR_3 ) ; for ( java.util.Map.Entry < java.lang.String , TYPE_3 > VAR_4 : values . METHOD_6 ( ) ) { if ( ( VAR_4 . getValue ( ) . intValue ( ) ) != 0 ) { VAR_2 . setValue ( VAR_4 . METHOD_7 ( ) , VAR_4 . getValue ( ) ) ; } } }\n"}
{"problem": "public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { java.lang.System.out.println ( ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_1 . get ( i ) ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { java.lang.System.out.println ( ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_1 . get ( i ) ) ) ) ; } } }\n"}
{"problem": "private double [ ] METHOD_1 ( TYPE_1 x ) { double [ ] VAR_1 = new double [ METHOD_2 ( ) ] ; for ( int i = 0 ; i < ( METHOD_2 ( ) ) ; i ++ ) { for ( int j = 0 ; j < ( VAR_2 ) ; j ++ ) { double VAR_3 = VAR_4 [ i ] . METHOD_3 ( j , x ) ; VAR_1 [ i ] += VAR_3 * VAR_3 ; } } return VAR_1 ; }\n", "fixed": "private double [ ] METHOD_1 ( java.util.Vector x ) { double [ ] VAR_1 = new double [ METHOD_2 ( ) ] ; for ( int i = 0 ; i < ( METHOD_2 ( ) ) ; i ++ ) { for ( int j = 0 ; j < ( VAR_2 ) ; j ++ ) { double VAR_3 = VAR_4 [ i ] . METHOD_3 ( j , x ) ; VAR_1 [ i ] += VAR_3 * VAR_3 ; } } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String key , java.util.ArrayList < java.lang.String > VAR_1 ) { METHOD_2 ( key ) ; java.lang.String [ ] VAR_2 = VAR_1 . METHOD_3 ( new java.lang.String [ VAR_1 . size ( ) ] ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( key , TYPE_1 . METHOD_6 ( STRING_1 , VAR_2 ) ) . METHOD_7 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String key , java.util.ArrayList < java.lang.String > VAR_1 ) { if ( key == null ) return ; if ( VAR_1 == null ) return ; java.lang.String [ ] VAR_2 = VAR_1 . METHOD_3 ( new java.lang.String [ VAR_1 . size ( ) ] ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( key , TYPE_1 . METHOD_6 ( STRING_1 , VAR_2 ) ) . METHOD_7 ( ) ; }\n"}
{"problem": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; int VAR_1 = 0 ; VAR_2 = VAR_3 . METHOD_2 ( ) ; for ( TYPE_1 VAR_4 : VAR_2 ) { VAR_4 . METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_5 , VAR_4 ) ; VAR_1 ++ ; } }\n", "fixed": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; int VAR_1 = 0 ; VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_2 ) == null ) { return ; } for ( TYPE_1 VAR_4 : VAR_2 ) { VAR_4 . METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_5 , VAR_4 ) ; VAR_1 ++ ; } }\n"}
{"fixCommitSHA1": "66181be1c62816d916c9301dddd2c8c5bc7be1dc", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "   private static Function compile(String function) {\n     final ContextFactory contextFactory = ContextFactory.getGlobal();\n    Context context = contextFactory.enterContext();\n     context.setOptimizationLevel(9);\n     final ScriptableObject scope = context.initStandardObjects();", "fixed": "   private static Function compile(String function) {\n     final ContextFactory contextFactory = ContextFactory.getGlobal();\n    final Context context = contextFactory.enterContext();\n     context.setOptimizationLevel(9);\n     final ScriptableObject scope = context.initStandardObjects();", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3c136fbd9f79b179f010322aff8ed2b829209db8", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         se3.setLines(\"1,2-3\");\n         se3.setColumns(\"1,2-3\");\n         fc2.addFilter(se3);\n        assertEquals(fc, fc2);\n     }\n     @Test", "fixed": "         se3.setLines(\"1,2-3\");\n         se3.setColumns(\"1,2-3\");\n         fc2.addFilter(se3);\n        assertEquals(fc2, fc);\n     }\n     @Test", "sourceBeforeFix": "assertEquals(fc,fc2)", "sourceAfterFix": "assertEquals(fc2,fc)"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ( this . length ) == 0 ) { throw new TYPE_2 ( STRING_1 ) ; } TYPE_3 < TYPE_1 > VAR_1 = this . VAR_2 . METHOD_2 ( ) ; this . VAR_2 = VAR_1 . METHOD_2 ( ) ; -- ( this . length ) ; return VAR_1 . METHOD_3 ( ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ( this . length ) == 0 ) { throw new TYPE_2 ( STRING_1 ) ; } TYPE_3 < TYPE_1 > VAR_1 = this . VAR_2 . METHOD_2 ( ) ; this . VAR_2 = VAR_1 ; -- ( this . length ) ; return VAR_1 . METHOD_3 ( ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; try { TYPE_2 output = VAR_1 . METHOD_4 ( ) ; if ( ( output . METHOD_5 ( ) ) != 0 ) { return METHOD_6 ( STRING_2 ) ; } return null ; } catch ( TYPE_3 VAR_3 ) { return VAR_3 . METHOD_6 ( ) ; } }\n", "fixed": "public java.lang.String METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; try { METHOD_3 ( VAR_1 , VAR_2 ) ; TYPE_2 output = VAR_1 . METHOD_4 ( ) ; if ( ( output . METHOD_5 ( ) ) != 0 ) { return METHOD_6 ( STRING_2 ) ; } return null ; } catch ( java.lang.Exception VAR_3 ) { return VAR_3 . METHOD_6 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( new TYPE_2 ( new java.util.Date ( ) . getTime ( ) ) ) ; this . VAR_4 . METHOD_1 ( VAR_2 ) ; VAR_5 . METHOD_5 ( VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_4 ( new TYPE_2 ( new java.util.Date ( ) . getTime ( ) ) ) ; this . VAR_4 . METHOD_1 ( VAR_2 ) ; VAR_5 . METHOD_5 ( VAR_4 ) ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = TYPE_1 . METHOD_2 ( java.lang.String . METHOD_3 ( VAR_1 ) ) ; java.lang.String VAR_4 = TYPE_1 . METHOD_2 ( VAR_2 ) ; java.lang.String VAR_5 = TYPE_1 . METHOD_4 ( VAR_3 , VAR_4 ) ; java.lang.String VAR_6 = TYPE_1 . METHOD_2 ( VAR_5 ) ; java.lang.String VAR_7 = ( ( ( ( STRING_1 + VAR_3 ) + STRING_1 ) + VAR_4 ) + STRING_1 ) + VAR_6 ; return VAR_7 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_4 = TYPE_1 . METHOD_2 ( VAR_2 ) ; java.lang.String VAR_5 = TYPE_1 . METHOD_4 ( VAR_3 , VAR_4 ) ; java.lang.String VAR_6 = TYPE_1 . METHOD_2 ( VAR_5 ) ; java.lang.String VAR_7 = ( ( ( ( STRING_1 + VAR_3 ) + STRING_1 ) + VAR_4 ) + STRING_1 ) + VAR_6 ; return VAR_7 ; }\n"}
{"fixCommitSHA1": "888d20138863d627e56808fdcc6288133a8ad4ff", "projectName": "Bukkit.Bukkit", "bugType": "Change Numeric Literal", "problem": "     POWERED_MINECART(343, 1),\n     EGG(344, 16),\n     COMPASS(345),\n    FISHING_ROD(346, 1, 64),\n     WATCH(347),\n     GLOWSTONE_DUST(348),\n     RAW_FISH(349),", "fixed": "     POWERED_MINECART(343, 1),\n     EGG(344, 16),\n     COMPASS(345),\n    FISHING_ROD(346, 1, 32),\n     WATCH(347),\n     GLOWSTONE_DUST(348),\n     RAW_FISH(349),", "sourceBeforeFix": "FISHING_ROD(346,1,64)", "sourceAfterFix": "FISHING_ROD(346,1,32)"}
{"problem": "private java.util.List < TYPE_1 > METHOD_1 ( final int count ) { final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( count ) ; for ( int i = 0 ; i < count ; ++ i ) { VAR_1 . add ( METHOD_2 ( ) ) ; } VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( TYPE_3 : : METHOD_5 ) . METHOD_6 ( ) . METHOD_7 ( TYPE_3 : : METHOD_8 ) . METHOD_6 ( ) ) ; return VAR_1 ; }\n", "fixed": "private java.util.List < TYPE_1 > METHOD_1 ( final int count ) { final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( count ) ; for ( int i = 0 ; i < count ; ++ i ) { VAR_1 . add ( METHOD_2 ( ) ) ; } VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( TYPE_3 : : METHOD_5 ) . METHOD_7 ( TYPE_3 : : METHOD_8 ) . METHOD_6 ( ) ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"problem": "public final TYPE_1 METHOD_1 ( final TYPE_1 response , final TYPE_2 VAR_1 ) throws java.io.IOException { try { return this . VAR_2 . get ( this . index ) . METHOD_1 ( response , VAR_1 ) ; } catch ( final TYPE_3 VAR_3 ) { throw new java.io.IOException ( STRING_1 , VAR_3 ) ; } }\n", "fixed": "public final TYPE_1 METHOD_1 ( final TYPE_1 response , final TYPE_2 VAR_1 ) throws java.io.IOException { if ( ( this . index ) < ( this . VAR_2 . size ( ) ) ) { return this . VAR_2 . get ( this . index ) . METHOD_1 ( response , VAR_1 ) ; } else { throw new java.io.IOException ( STRING_1 ) ; } }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"problem": "public void METHOD_1 ( TYPE_1 iterator , java.lang.Throwable VAR_1 ) { if ( VAR_1 == null ) { for ( TYPE_2 VAR_2 : VAR_3 ) { TYPE_3 VAR_4 = VAR_5 . METHOD_2 ( VAR_2 , VAR_6 , VAR_7 ) ; iterator = VAR_4 . METHOD_3 ( iterator ) ; } VAR_8 . METHOD_1 ( iterator , null ) ; } else { VAR_8 . METHOD_1 ( iterator , VAR_1 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 iterator , java.lang.Throwable VAR_1 ) { if ( VAR_1 == null ) { for ( TYPE_2 VAR_2 : VAR_3 ) { TYPE_3 VAR_4 = VAR_5 . METHOD_2 ( VAR_2 , VAR_6 , VAR_7 ) ; try { iterator = VAR_4 . METHOD_3 ( iterator ) ; } catch ( java.lang.Throwable t ) { VAR_8 . METHOD_1 ( null , t ) ; return ; } } VAR_8 . METHOD_1 ( iterator , null ) ; } else { VAR_8 . METHOD_1 ( iterator , VAR_1 ) ; } }\n"}
{"problem": "public android.view.View getView ( int position , android.view.View VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = 0 ; if ( ( position % INT_1 ) == 0 ) { VAR_3 = VAR_4 ; } else { VAR_3 = VAR_5 ; } android.view.View VAR_6 = VAR_7 . METHOD_1 ( VAR_3 , VAR_2 , false ) ; TYPE_2 VAR_8 = ( ( TYPE_2 ) ( VAR_6 . METHOD_2 ( VAR_9 ) ) ) ; TYPE_3 VAR_10 = this . VAR_11 . get ( position ) ; VAR_8 . setText ( VAR_10 . getName ( ) ) ; return VAR_6 ; }\n", "fixed": "public android.view.View getView ( int position , android.view.View VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 ; if ( ( position % INT_1 ) == 0 ) { VAR_3 = VAR_4 ; } else { VAR_3 = VAR_5 ; } android.view.View VAR_6 = VAR_7 . METHOD_1 ( VAR_3 , VAR_2 , false ) ; TYPE_2 VAR_8 = ( ( TYPE_2 ) ( VAR_6 . METHOD_2 ( VAR_9 ) ) ) ; TYPE_3 VAR_10 = this . VAR_11 . get ( position ) ; VAR_8 . setText ( VAR_10 . getName ( ) ) ; return VAR_6 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3490f93f11a790d91fb00ef945f697a6b74acd3a", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void set( long number )\n     {\n         highestGapFreeNumber = number;\n         outOfOrderQueue.clear();", "fixed": "     }\n     @Override\n    public synchronized void set( long number )\n     {\n         highestGapFreeNumber = number;\n         outOfOrderQueue.clear();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 , boolean VAR_3 ) { if ( ( ( METHOD_2 ( ) . METHOD_3 ( ) ) > 0 ) && ( METHOD_2 ( ) . METHOD_4 ( ) . METHOD_4 ( ) . equals ( VAR_2 . METHOD_4 ( ) ) ) ) { return METHOD_2 ( ) . METHOD_1 ( VAR_4 , VAR_3 ) ; } else { return new TYPE_1 ( METHOD_2 ( ) . METHOD_4 ( ) . METHOD_4 ( ) , 0 ) ; } }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 , boolean VAR_3 ) { if ( ( ( METHOD_2 ( ) . METHOD_3 ( ) ) > 0 ) && ( METHOD_2 ( ) . METHOD_4 ( ) . METHOD_4 ( ) . equals ( VAR_2 . METHOD_4 ( ) ) ) ) { return METHOD_2 ( ) . METHOD_1 ( VAR_4 , VAR_3 ) ; } else { return METHOD_2 ( ) . METHOD_1 ( 0 , false ) ; } }\n"}
{"problem": "private static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 VAR_1 : TYPE_1 . METHOD_3 ( ) ) { VAR_2 . add ( VAR_1 ) ; } VAR_3 = new java.util.HashMap < TYPE_2 , java.util.ArrayList < java.lang.String > > ( ) ; for ( TYPE_2 VAR_1 : VAR_2 ) { VAR_3 . put ( VAR_1 , new java.util.ArrayList < java.lang.String > ( ) ) ; } TYPE_3 . METHOD_4 ( STRING_1 , STRING_2 ) ; }\n", "fixed": "private static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 VAR_1 : TYPE_1 . METHOD_3 ( ) ) { VAR_2 . add ( VAR_1 ) ; } VAR_3 = new java.util.HashMap < java.lang.String , java.util.ArrayList < java.lang.String > > ( ) ; for ( TYPE_2 VAR_1 : VAR_2 ) { VAR_3 . put ( VAR_1 . getId ( ) , new java.util.ArrayList < java.lang.String > ( ) ) ; } TYPE_3 . METHOD_4 ( STRING_1 , STRING_2 ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . equals ( VAR_3 ) ) || ( VAR_2 . equals ( VAR_4 ) ) ) { return VAR_1 + STRING_1 ; } else if ( VAR_2 . equals ( VAR_5 ) ) { return VAR_1 + STRING_2 ; } else if ( ( VAR_2 . equals ( VAR_6 ) ) || ( VAR_2 . equals ( VAR_7 ) ) ) { return VAR_1 + STRING_3 ; } else { return VAR_1 + STRING_4 ; } }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 . equals ( VAR_3 ) ) || ( VAR_2 . equals ( VAR_4 ) ) ) { return VAR_1 + STRING_1 ; } else if ( ( VAR_2 . equals ( VAR_5 ) ) || ( VAR_2 . equals ( VAR_7 ) ) ) { return VAR_1 + STRING_2 ; } else if ( VAR_2 . equals ( VAR_6 ) ) { return VAR_1 + STRING_3 ; } else { return VAR_1 + STRING_4 ; } }\n"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_6 . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_2 ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_5 ) ; TYPE_1 . METHOD_2 ( VAR_1 , STRING_2 ) ; }\n"}
{"problem": "public boolean equals ( java.lang.Object obj ) { if ( getClass ( ) . equals ( obj . getClass ( ) ) ) { TYPE_1 p = ( ( TYPE_1 ) ( obj ) ) ; if ( ( data ) == null ) { return ( p . getData ( ) ) == null ; } else { return data . equals ( p . getData ( ) ) ; } } else { return false ; } }\n", "fixed": "public boolean equals ( java.lang.Object obj ) { if ( ( obj != null ) && ( getClass ( ) . equals ( obj . getClass ( ) ) ) ) { TYPE_1 p = ( ( TYPE_1 ) ( obj ) ) ; if ( ( data ) == null ) { return ( p . getData ( ) ) == null ; } else { return data . equals ( p . getData ( ) ) ; } } else { return false ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = METHOD_2 ( ) ; java.lang.String VAR_2 = intent . METHOD_3 ( STRING_1 ) ; TYPE_1 . METHOD_4 ( STRING_2 , VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_4 , VAR_2 ) ; switch ( VAR_1 . getId ( ) ) { case VAR_5 : VAR_3 . METHOD_5 ( ) ; break ; case VAR_6 : VAR_3 . METHOD_6 ( ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent intent = METHOD_2 ( ) ; java.lang.String VAR_2 = intent . METHOD_3 ( STRING_1 ) ; TYPE_1 . METHOD_4 ( STRING_2 , VAR_2 ) ; VAR_3 = new TYPE_2 ( VAR_4 , VAR_2 ) ; switch ( VAR_1 . getId ( ) ) { case VAR_5 : VAR_3 . METHOD_5 ( ) ; break ; case VAR_6 : VAR_3 . METHOD_6 ( ) ; break ; } }\n"}
{"problem": "private void METHOD_1 ( ) { android.content.Intent intent = getIntent ( ) ; TYPE_1 VAR_1 = intent . METHOD_2 ( ) ; VAR_2 = intent . METHOD_3 ( STRING_1 ) ; if ( ( VAR_2 ) == STRING_2 ) VAR_3 = 1 ; else if ( ( VAR_2 ) == STRING_3 ) VAR_3 = INT_1 ; else if ( ( VAR_2 ) == STRING_4 ) VAR_3 = 0 ; else if ( ( VAR_2 ) == STRING_5 ) VAR_3 = INT_2 ; }\n", "fixed": "private void METHOD_1 ( ) { android.content.Intent intent = getIntent ( ) ; TYPE_1 VAR_1 = intent . METHOD_2 ( ) ; VAR_2 = intent . METHOD_3 ( STRING_1 ) ; if ( VAR_2 . equals ( STRING_2 ) ) { VAR_3 = 1 ; } else if ( VAR_2 . equals ( STRING_3 ) ) { VAR_3 = INT_1 ; } else if ( VAR_2 . equals ( STRING_4 ) ) { VAR_3 = 0 ; } else if ( VAR_2 . equals ( STRING_5 ) ) { VAR_3 = INT_2 ; } }\n"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n        boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }", "fixed": "          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n        private boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"problem": "public java.util.ArrayList < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_3 . add ( VAR_1 ) ; if ( ! ( VAR_4 . isEmpty ( ) ) ) { METHOD_2 ( ) ; } VAR_4 . add ( VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; try { VAR_5 . METHOD_4 ( VAR_2 ) ; } catch ( java.io.IOException VAR_6 ) { VAR_6 . METHOD_5 ( ) ; } return VAR_4 ; }\n", "fixed": "public java.util.ArrayList < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_3 . add ( VAR_1 ) ; if ( ! ( VAR_4 . isEmpty ( ) ) ) { METHOD_2 ( ) ; } VAR_4 . add ( VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; try { VAR_5 . METHOD_4 ( VAR_2 ) ; } catch ( java.io.IOException VAR_6 ) { VAR_6 . METHOD_5 ( ) ; } java.util.Collections.sort ( VAR_4 ) ; return VAR_4 ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 , java.lang.String VAR_3 , java.lang.Object VAR_4 , TYPE_2 VAR_5 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_6 = TYPE_3 . METHOD_2 ( ) ; VAR_6 . put ( VAR_3 , VAR_4 ) ; TYPE_1 VAR_7 = new TYPE_1 ( ) ; VAR_7 . METHOD_3 ( null , VAR_1 , VAR_5 , VAR_2 , VAR_3 ) ; return VAR_7 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 , java.lang.String VAR_3 , java.lang.Object VAR_4 , TYPE_2 VAR_5 ) { TYPE_1 VAR_7 = new TYPE_1 ( ) ; VAR_7 . METHOD_3 ( null , VAR_1 , VAR_5 , VAR_2 , VAR_3 , VAR_4 ) ; return VAR_7 ; }\n"}
{"problem": "private static java.lang.String METHOD_1 ( ) { java.lang.StringBuilder text = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { char VAR_2 = CHAR_1 ; int VAR_3 = ( ( int ) ( ( java.lang.Math.random ( ) ) * INT_1 ) ) ; char VAR_4 = ( ( char ) ( VAR_2 + VAR_3 ) ) ; text . append ( VAR_4 ) ; } }\n", "fixed": "private static java.lang.String METHOD_1 ( ) { java.lang.StringBuilder text = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { char VAR_2 = CHAR_1 ; int VAR_3 = ( ( int ) ( ( java.lang.Math.random ( ) ) * INT_1 ) ) ; char VAR_4 = ( ( char ) ( VAR_2 + VAR_3 ) ) ; text . append ( VAR_4 ) ; } return text . toString ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert ( VAR_1 . getId ( ) ) < ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) return ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; file . METHOD_5 ( VAR_1 . getData ( ) , 0 , VAR_3 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert ( VAR_1 . getId ( ) ) < ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) return ; METHOD_4 ( VAR_1 ) ; file . METHOD_5 ( VAR_1 . getData ( ) , 0 , VAR_3 ) ; VAR_1 . METHOD_3 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( int position , android.view.View VAR_1 ) { METHOD_2 ( VAR_1 , position ) ; if ( ( ( ( VAR_2 ) != null ) && ( ( VAR_2 ) != VAR_1 ) ) && ( ( VAR_3 . METHOD_3 ( ) . get ( VAR_4 ) . METHOD_4 ( ) ) == ( VAR_5 ) ) ) { METHOD_2 ( VAR_2 , VAR_4 ) ; } VAR_2 = VAR_1 ; VAR_4 = position ; }\n", "fixed": "public void METHOD_1 ( int position , android.view.View VAR_1 ) { METHOD_2 ( VAR_1 , position , true ) ; if ( ( ( ( VAR_2 ) != null ) && ( ( VAR_2 ) != VAR_1 ) ) && ( ( VAR_3 . METHOD_3 ( ) . get ( VAR_4 ) . METHOD_4 ( ) ) == ( VAR_5 ) ) ) { METHOD_2 ( VAR_2 , VAR_4 , false ) ; } VAR_2 = VAR_1 ; VAR_4 = position ; }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( false ) ; } VAR_2 = this ; getView ( ) . METHOD_2 ( ) ; getView ( ) . METHOD_3 ( VAR_3 ) ; } else { TYPE_1 . get ( ) . METHOD_4 ( ) . METHOD_2 ( ) ; getView ( ) . METHOD_3 ( VAR_4 ) ; } }\n", "fixed": "public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( false ) ; } VAR_2 = this ; getView ( ) . METHOD_2 ( ) ; getView ( ) . METHOD_3 ( VAR_3 ) ; } else { VAR_2 = null ; TYPE_1 . get ( ) . METHOD_4 ( ) . METHOD_2 ( ) ; getView ( ) . METHOD_3 ( VAR_4 ) ; } }\n"}
{"problem": "public int METHOD_1 ( java.io.FileOutputStream VAR_1 , java.io.FileOutputStream VAR_2 ) { if ( ( VAR_3 ) == null ) return - 1 ; int result = 0 ; if ( ( VAR_3 . METHOD_2 ( ) ) > INT_1 ) { TYPE_1 . METHOD_3 ( ) ; if ( ( VAR_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) == true ) { result = 1 ; } if ( VAR_1 != null ) METHOD_6 ( VAR_1 ) ; if ( VAR_2 != null ) { METHOD_7 ( VAR_2 ) ; } } return result ; }\n", "fixed": "public int METHOD_1 ( java.io.FileOutputStream VAR_1 , java.io.FileOutputStream VAR_2 ) { if ( ( VAR_3 ) == null ) return - 1 ; int result = 0 ; if ( ( VAR_3 . METHOD_2 ( ) ) > INT_1 ) { if ( ( VAR_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) == true ) { result = 1 ; } if ( VAR_1 != null ) METHOD_6 ( VAR_1 ) ; if ( VAR_2 != null ) { METHOD_7 ( VAR_2 ) ; } } return result ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 node , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.util.List < java.lang.String > VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 , boolean VAR_6 , java.lang.String value ) { TYPE_6 VAR_7 = METHOD_2 ( new TYPE_6 ( ) , VAR_2 ) ; METHOD_3 ( VAR_7 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , value ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 node , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.util.List < java.lang.String > VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 , boolean VAR_6 , java.lang.String value ) { TYPE_6 VAR_7 = new TYPE_6 ( ) ; METHOD_3 ( VAR_7 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , value ) ; }\n"}
{"problem": "public java.lang.Object METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( ) . get ( VAR_1 ) ; switch ( VAR_2 ) { case 0 : return VAR_3 . getId ( ) ; case 1 : return VAR_3 . getName ( ) ; case INT_1 : return VAR_3 . METHOD_3 ( ) ; case INT_2 : return VAR_3 . METHOD_4 ( ) ; default : throw new TYPE_2 ( STRING_1 ) ; } }\n", "fixed": "public java.lang.Object METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = list . get ( VAR_1 ) ; switch ( VAR_2 ) { case 0 : return VAR_3 . getId ( ) ; case 1 : return VAR_3 . getName ( ) ; case INT_1 : return VAR_3 . METHOD_3 ( ) ; case INT_2 : return VAR_3 . METHOD_4 ( ) ; default : throw new TYPE_2 ( STRING_1 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { final boolean VAR_1 = ( ( ( VAR_2 != null ) && ( VAR_2 . METHOD_2 ( ) ) ) && ( ! ( VAR_2 . METHOD_3 ( ) ) ) ) && ( VAR_3 . get ( ) ) ; if ( VAR_1 ) { VAR_2 . METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { final boolean VAR_1 = ( ( ( VAR_2 != null ) && ( VAR_2 . METHOD_2 ( ) ) ) && ( ! ( VAR_2 . METHOD_3 ( ) ) ) ) && ( ! ( VAR_3 . get ( ) ) ) ; if ( VAR_1 ) VAR_2 . METHOD_4 ( ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , FLOAT_1 ) ; VAR_2 . put ( STRING_1 , FLOAT_2 ) ; VAR_1 . put ( STRING_2 , FLOAT_3 ) ; VAR_2 . put ( STRING_2 , FLOAT_4 ) ; VAR_1 . put ( STRING_3 , FLOAT_5 ) ; VAR_2 . put ( STRING_3 , FLOAT_6 ) ; VAR_1 . put ( STRING_4 , FLOAT_7 ) ; VAR_2 . put ( STRING_4 , FLOAT_8 ) ; VAR_1 . put ( STRING_5 , FLOAT_9 ) ; VAR_2 . put ( STRING_5 , 1.0 ) ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , 0.0 ) ; VAR_2 . put ( STRING_1 , FLOAT_2 ) ; VAR_1 . put ( STRING_2 , FLOAT_3 ) ; VAR_2 . put ( STRING_2 , FLOAT_4 ) ; VAR_1 . put ( STRING_3 , FLOAT_5 ) ; VAR_2 . put ( STRING_3 , FLOAT_6 ) ; VAR_1 . put ( STRING_4 , FLOAT_7 ) ; VAR_2 . put ( STRING_4 , FLOAT_8 ) ; VAR_1 . put ( STRING_5 , FLOAT_9 ) ; VAR_2 . put ( STRING_5 , 1.0 ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String [ ] args , int start ) { java.lang.String result = STRING_1 ; if ( start < ( args.length ) ) { for ( int i = start ; i < ( args.length ) ; i ++ ) result += ( i == start ? STRING_2 : STRING_1 ) + ( args [ i ] ) ; } return result ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String [ ] args , int start ) { java.lang.String result = STRING_1 ; if ( start < ( args.length ) ) { for ( int i = start ; i < ( args.length ) ; i ++ ) result += ( i != start ? STRING_2 : STRING_1 ) + ( args [ i ] ) ; } return result ; }\n"}
{"problem": "private void METHOD_1 ( java.util.List < java.lang.Double > VAR_1 , double VAR_2 ) { for ( int i = 1 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { VAR_3 . get ( i ) . METHOD_1 ( VAR_3 . get ( ( i - 1 ) ) , VAR_2 ) ; } }\n", "fixed": "private void METHOD_1 ( double VAR_2 ) { for ( int i = 1 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { VAR_3 . get ( i ) . METHOD_1 ( VAR_3 . get ( ( i - 1 ) ) , VAR_2 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( int VAR_1 , TYPE_1 writer , TYPE_2 VAR_2 ) throws java.io.IOException { METHOD_2 ( VAR_1 , writer ) ; writer . append ( STRING_1 ) ; METHOD_3 ( writer ) ; METHOD_4 ( VAR_1 , writer , VAR_2 ) ; METHOD_2 ( VAR_1 , writer ) ; writer . append ( STRING_2 ) ; METHOD_3 ( writer ) ; }\n", "fixed": "protected void METHOD_1 ( int VAR_1 , TYPE_1 writer , TYPE_2 VAR_2 ) throws java.io.IOException { if ( VAR_2 != null ) { METHOD_2 ( VAR_1 , writer ) ; writer . append ( STRING_1 ) ; METHOD_3 ( writer ) ; METHOD_4 ( VAR_1 , writer , VAR_2 ) ; METHOD_2 ( VAR_1 , writer ) ; writer . append ( STRING_2 ) ; METHOD_3 ( writer ) ; } }\n"}
{"problem": "protected final void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) != ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) || ( ( VAR_3 ) != ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ) ) ) { VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_1 ) ; METHOD_6 ( ) ; } }\n", "fixed": "protected final void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) != ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) || ( ( VAR_3 ) != ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ) ) ) { VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ; METHOD_6 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 c , TYPE_2 VAR_1 , TYPE_3 state ) { if ( ( VAR_2 ) != null ) { final float VAR_3 = ( ( VAR_4 ) + ( + ( VAR_5 ) ) ) - ( VAR_6 ) ; final float VAR_7 = ( VAR_8 ) - ( VAR_9 ) ; c . METHOD_2 ( VAR_2 , VAR_3 , VAR_7 , null ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 c , TYPE_2 VAR_1 , TYPE_3 state ) { if ( ( VAR_2 ) != null ) { final float VAR_3 = ( ( VAR_4 ) + ( VAR_5 ) ) - ( VAR_6 ) ; final float VAR_7 = ( VAR_8 ) - ( VAR_9 ) ; c . METHOD_2 ( VAR_2 , VAR_3 , VAR_7 , null ) ; } }\n"}
{"problem": "private long METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 param = VAR_2 . METHOD_2 ( ) ; param . METHOD_3 ( 0 , VAR_1 ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_4 ( VAR_4 , VAR_5 , param ) ; return VAR_3 == null ? - 1L : VAR_3 . METHOD_5 ( \"id\" ) ; }\n", "fixed": "private long METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 param = VAR_2 . METHOD_2 ( ) ; param . METHOD_3 ( 0 , VAR_1 ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_4 ( VAR_4 , VAR_2 , param ) ; return VAR_3 == null ? - 1L : VAR_3 . METHOD_5 ( \"id\" ) ; }\n"}
{"problem": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 args = new TYPE_3 ( ) ; args . METHOD_2 ( STRING_1 , VAR_1 ) ; VAR_2 . METHOD_3 ( args ) ; TYPE_4 VAR_3 = VAR_4 . METHOD_4 ( ) ; VAR_3 . add ( VAR_5 , VAR_2 , STRING_2 ) ; VAR_3 . commit ( ) ; }\n", "fixed": "public void METHOD_1 ( final TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 args = new TYPE_3 ( ) ; args . METHOD_2 ( STRING_1 , VAR_1 ) ; VAR_2 . METHOD_3 ( args ) ; TYPE_4 VAR_3 = VAR_4 . METHOD_4 ( ) ; VAR_3 . add ( VAR_5 , VAR_2 , STRING_2 ) ; VAR_3 . commit ( ) ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fc319b0ad3b3163f7c20be7900d975fa7b9d59a0", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "                     final TransactionalMap<Object, Object> txMap = context.getMap(\"default\");\n                     txMap.put(\"5\", \"5\");\n                     assertEquals(3, txMap.keySet().size());\n                    assertEquals(3, map2.keySet().size());\n                     throw new DummyUncheckedHazelcastTestException();\n                 }", "fixed": "                     final TransactionalMap<Object, Object> txMap = context.getMap(\"default\");\n                     txMap.put(\"5\", \"5\");\n                     assertEquals(3, txMap.keySet().size());\n                    assertEquals(2, map2.keySet().size());\n                     throw new DummyUncheckedHazelcastTestException();\n                 }", "sourceBeforeFix": "assertEquals(3,map2.keySet().size())", "sourceAfterFix": "assertEquals(2,map2.keySet().size())"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 c ) { java.lang.String VAR_2 = c . METHOD_2 ( ) ; if ( VAR_2 == null ) throw new TYPE_3 ( ( ( STRING_1 + ( c . getClass ( ) . getName ( ) ) ) + STRING_2 ) ) ; VAR_2 = VAR_2 . replaceAll ( STRING_3 , \"\\n\" ) ; VAR_2 = VAR_2 . replaceAll ( STRING_4 , \"\\n\" ) ; return VAR_2 ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 c ) { java.lang.String VAR_2 = c . METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_2 = VAR_2 . replaceAll ( STRING_3 , \"\\n\" ) ; VAR_2 = VAR_2 . replaceAll ( STRING_4 , \"\\n\" ) ; } return VAR_2 ; }\n"}
{"problem": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_5 VAR_4 = VAR_3 . METHOD_3 ( ) . get ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_5 = TYPE_6 . METHOD_4 ( ) ; if ( TYPE_7 . METHOD_5 ( VAR_4 ) ) { VAR_5 . add ( METHOD_6 ( TYPE_8 . toString ( ) , STRING_1 ) ) ; VAR_5 . add ( METHOD_6 ( TYPE_9 . toString ( ) , STRING_2 ) ) ; } return VAR_5 ; }\n", "fixed": "public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_5 VAR_4 = VAR_3 . METHOD_3 ( ) . get ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_5 = TYPE_6 . METHOD_4 ( ) ; VAR_5 . add ( METHOD_6 ( TYPE_8 . toString ( ) , STRING_1 ) ) ; if ( TYPE_7 . METHOD_5 ( VAR_4 ) ) { VAR_5 . add ( METHOD_6 ( TYPE_9 . toString ( ) , STRING_2 ) ) ; } return VAR_5 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String className ) { try { java.lang.Class < ? > VAR_1 = VAR_2 . METHOD_2 ( className ) ; for ( TYPE_2 method : VAR_1 . METHOD_3 ( ) ) { if ( METHOD_4 ( method ) ) { return METHOD_5 ( method ) ; } } } catch ( java.lang.ClassNotFoundException VAR_3 ) { } return null ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String className ) { try { java.lang.Class < ? > VAR_1 = VAR_2 . METHOD_2 ( className ) ; for ( TYPE_2 method : VAR_1 . METHOD_3 ( ) ) { if ( METHOD_4 ( method , false ) ) { return METHOD_5 ( method ) ; } } for ( TYPE_2 method : VAR_1 . METHOD_3 ( ) ) { if ( METHOD_4 ( method , true ) ) { return METHOD_5 ( method ) ; } } } catch ( java.lang.ClassNotFoundException VAR_3 ) { } return null ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String value ) { if ( ! ( METHOD_2 ( VAR_1 , value ) ) ) { return ; } if ( METHOD_3 ( ) ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_4 ( ) ) ) ; boolean VAR_3 = ! ( METHOD_5 ( ) ) ; if ( VAR_3 == ( TYPE_2 . METHOD_6 ( VAR_1 ) ) ) { super . METHOD_1 ( VAR_1 , value ) ; } } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String value ) { if ( ! ( METHOD_2 ( VAR_1 , value ) ) ) { return ; } if ( METHOD_3 ( ) ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_4 ( ) ) ) ; boolean VAR_3 = ! ( METHOD_5 ( ) ) ; if ( VAR_3 == ( TYPE_2 . METHOD_6 ( VAR_1 ) ) ) { super . METHOD_1 ( VAR_1 , value ) ; } } else { super . METHOD_1 ( VAR_1 , value ) ; } }\n"}
{"problem": "public TYPE_1 < TYPE_2 > METHOD_1 ( int id , TYPE_3 args ) { VAR_1 = true ; TYPE_4 VAR_2 = new TYPE_4 ( getActivity ( ) , VAR_3 , TYPE_5 . METHOD_2 ( ) , ( ( ( METHOD_3 ( false ) ) + ( VAR_4 ) ) + ( VAR_5 . METHOD_4 ( ) ) ) , VAR_5 . METHOD_5 ( ) , ( ( ( ( ( VAR_6 ) + STRING_1 ) + ( VAR_7 ) ) + STRING_1 ) + ( VAR_8 ) ) ) ; return VAR_2 ; }\n", "fixed": "public TYPE_1 < TYPE_2 > METHOD_1 ( int id , TYPE_3 args ) { VAR_1 = true ; TYPE_4 VAR_2 = new TYPE_4 ( getActivity ( ) , VAR_3 , TYPE_5 . METHOD_2 ( ) , ( ( METHOD_3 ( false ) ) + ( VAR_5 . METHOD_4 ( ) ) ) , VAR_5 . METHOD_5 ( ) , ( ( ( ( ( VAR_6 ) + STRING_1 ) + ( VAR_7 ) ) + STRING_1 ) + ( VAR_8 ) ) ) ; return VAR_2 ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { java.lang.String name = VAR_1 . METHOD_2 ( \"name\" ) ; java.lang.System.out.println ( ( STRING_1 + name ) ) ; response . METHOD_3 ( STRING_2 ) ; response . METHOD_4 ( ) . append ( ( STRING_3 + name ) ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { VAR_1 . METHOD_3 ( STRING_2 ) ; java.lang.String name = VAR_1 . METHOD_2 ( \"name\" ) ; java.lang.System.out.println ( ( STRING_1 + name ) ) ; response . METHOD_3 ( STRING_2 ) ; response . METHOD_4 ( ) . append ( ( STRING_3 + name ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { boolean VAR_2 = true ; try { java.util.List < TYPE_2 > VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 . isEmpty ( ) ) { return false ; } } catch ( TYPE_3 VAR_5 ) { TYPE_4 . METHOD_3 ( ( STRING_1 + VAR_5 ) ) ; } return VAR_2 ; }\n", "fixed": "public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { boolean VAR_2 = true ; try { java.util.List < TYPE_2 > VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 . isEmpty ( ) ) { VAR_2 = false ; } } catch ( TYPE_3 VAR_5 ) { TYPE_4 . METHOD_3 ( ( STRING_1 + VAR_5 ) ) ; VAR_2 = false ; } return VAR_2 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View VAR_2 , int VAR_3 , long VAR_4 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_5 class ) ; TYPE_2 VAR_6 = new TYPE_2 ( ) ; VAR_6 . METHOD_2 ( STRING_1 , java.lang.String . METHOD_3 ( VAR_7 . get ( position ) . METHOD_4 ( ) ) ) ; intent . METHOD_5 ( VAR_6 ) ; METHOD_6 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 < ? > VAR_1 , android.view.View VAR_2 , int VAR_3 , long VAR_4 ) { android.content.Intent intent = new android.content.Intent ( this , VAR_5 class ) ; TYPE_2 VAR_6 = new TYPE_2 ( ) ; VAR_6 . METHOD_2 ( STRING_1 , java.lang.String . METHOD_3 ( VAR_7 . get ( VAR_3 ) . METHOD_4 ( ) ) ) ; intent . METHOD_5 ( VAR_6 ) ; METHOD_6 ( intent ) ; }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 ) { double VAR_2 = VAR_3 . get ( VAR_1 ) ; double VAR_4 = ( VAR_5 ) * VAR_2 ; METHOD_2 ( VAR_1 , ( VAR_2 + VAR_4 ) , ( - 1.0 ) ) ; METHOD_3 ( VAR_6 ) ; METHOD_4 ( VAR_7 , VAR_6 , VAR_4 , VAR_8 ) ; VAR_9 . get ( ( VAR_1 - 1 ) ) . METHOD_5 ( VAR_8 ) ; METHOD_2 ( VAR_1 , VAR_2 , ( - 1.0 ) ) ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) { double VAR_2 = VAR_3 . get ( VAR_1 ) ; double VAR_4 = ( - ( VAR_5 ) ) * VAR_2 ; METHOD_2 ( VAR_1 , ( VAR_2 + VAR_4 ) , ( - 1.0 ) ) ; METHOD_3 ( VAR_6 ) ; METHOD_4 ( VAR_7 , VAR_6 , VAR_4 , VAR_8 ) ; VAR_9 . get ( ( VAR_1 - 1 ) ) . METHOD_5 ( VAR_8 ) ; METHOD_2 ( VAR_1 , VAR_2 , ( - 1.0 ) ) ; }\n"}
{"problem": "protected float METHOD_1 ( ) { float VAR_1 = - 1 ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; int VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_1 != ( - 1 ) ) { VAR_1 = java.lang.Float . METHOD_4 ( ( ( TYPE_2 ) ( METHOD_2 ( VAR_4 ) ) ) . getText ( ) . toString ( ) ) ; } return VAR_1 ; }\n", "fixed": "protected float METHOD_1 ( ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; int VAR_4 = VAR_2 . METHOD_3 ( ) ; return java.lang.Float . METHOD_4 ( ( ( TYPE_2 ) ( METHOD_2 ( VAR_4 ) ) ) . getText ( ) . toString ( ) ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEtcdEndpointBuilder\n             extends\n                 AdvancedEtcdEndpointConsumerBuilder, AdvancedEtcdEndpointProducerBuilder {\n         default EtcdEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEtcdEndpointBuilder\n             extends\n                 AdvancedEtcdEndpointConsumerBuilder, AdvancedEtcdEndpointProducerBuilder {\n         default EtcdEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"project": "Math", "bugId": 34, "problem": " public String toString() {\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n        return chromosomes.iterator();\n     }\n }", "fixed": " public String toString() {\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n        return getChromosomes().iterator();\n     }\n }", "observations": "A direct class attribute access was replaced by a method call that gives indirect access to the object.", "repairActions": ["mcAdd", "varReplMc"], "repairPatterns": ["missComp", "singleLine", "wrongVarRef"]}
{"problem": "public boolean execute ( java.lang.String VAR_1 , TYPE_1 args , TYPE_2 VAR_2 ) throws TYPE_3 { if ( VAR_1 . equals ( STRING_1 ) ) { METHOD_1 ( ) ; } if ( VAR_1 . equals ( STRING_2 ) ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; return true ; } else if ( VAR_1 . equals ( STRING_4 ) ) { METHOD_4 ( ) ; VAR_2 . METHOD_3 ( STRING_5 ) ; return true ; } VAR_2 . error ( STRING_6 ) ; return false ; }\n", "fixed": "public boolean execute ( java.lang.String VAR_1 , TYPE_1 args , TYPE_2 VAR_2 ) throws TYPE_3 { if ( VAR_1 . equals ( STRING_2 ) ) { METHOD_2 ( VAR_2 ) ; return true ; } else if ( VAR_1 . equals ( STRING_4 ) ) { METHOD_4 ( ) ; VAR_2 . METHOD_3 ( STRING_5 ) ; return true ; } VAR_2 . error ( STRING_6 ) ; return false ; }\n"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { java.lang.String VAR_3 = java.lang.String . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_4 ( VAR_5 ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_5 ( VAR_6 class ) . setText ( VAR_3 ) ; } } }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { java.lang.String VAR_3 = java.lang.String . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_4 ( VAR_5 ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_5 ( VAR_6 class ) . setText ( VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . add ( new TYPE_1 ( VAR_1 ) ) ; METHOD_3 ( ) ; show ( ) ; TYPE_2 . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; VAR_2 . METHOD_7 ( true ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . add ( new TYPE_1 ( VAR_1 ) ) ; TYPE_2 . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; METHOD_3 ( ) ; show ( ) ; VAR_2 . METHOD_7 ( true ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . getType ( ) ) == null ) || ( VAR_1 . getType ( ) . toString ( ) . isEmpty ( ) ) ) { return VAR_1 . getId ( ) ; } else { return ( VAR_1 + ( VAR_2 ) ) + ( VAR_1 . getType ( ) . toString ( ) ) ; } }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . getType ( ) ) == null ) || ( VAR_1 . getType ( ) . toString ( ) . isEmpty ( ) ) ) { return VAR_1 . getId ( ) ; } else { return ( ( VAR_1 . getId ( ) ) + ( VAR_2 ) ) + ( VAR_1 . getType ( ) . toString ( ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_2 ) >= ( ( int ) ( INT_1 * FLOAT_1 ) ) ) { int VAR_3 = ( METHOD_2 ( ) ) + 1 ; METHOD_3 ( VAR_3 ) ; } else { int VAR_3 = METHOD_2 ( ) ; METHOD_3 ( VAR_3 ) ; } METHOD_4 ( VAR_4 ) ; METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { int VAR_3 = METHOD_2 ( ) ; if ( ( ( VAR_2 ) >= ( ( int ) ( INT_1 * FLOAT_1 ) ) ) && ( position == VAR_3 ) ) { VAR_3 ++ ; METHOD_3 ( VAR_3 ) ; } else if ( ( ( VAR_2 ) < ( ( int ) ( INT_1 * FLOAT_1 ) ) ) && ( position == VAR_3 ) ) { METHOD_3 ( VAR_3 ) ; } METHOD_4 ( VAR_4 ) ; METHOD_5 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ; if ( VAR_2 . METHOD_4 ( STRING_1 ) ) { java.lang.System.out.println ( STRING_2 ) ; } if ( VAR_2 . METHOD_4 ( STRING_3 ) ) { java.lang.System.out.println ( STRING_4 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 . METHOD_4 ( STRING_1 ) ) { TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ; java.lang.System.out.println ( STRING_2 ) ; } if ( VAR_2 . METHOD_4 ( STRING_3 ) ) { TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ; java.lang.System.out.println ( STRING_4 ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "61572af5c51afa3897afcf177bed5f8fa8dd5b4a", "projectName": "neo4j.neo4j", "bugType": "Same Function Less Args", "problem": "     public void assertReadLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n        final RagManager ragManager = new RagManager( tm );\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );", "fixed": "     public void assertReadLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n        final RagManager ragManager = new RagManager();\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );", "sourceBeforeFix": "new RagManager(tm)", "sourceAfterFix": "new RagManager()"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( new java.util.Date ( ) ) ; VAR_1 . METHOD_5 ( new byte [ ] { 1 , INT_1 , INT_1 , INT_2 , INT_3 , INT_4 } ) ; VAR_1 . METHOD_6 ( 1 ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( new java.util.Date ( ) ) ; VAR_1 . METHOD_5 ( new byte [ ] { 1 , INT_1 , INT_1 , INT_2 , INT_3 , INT_4 } ) ; }\n"}
{"fixCommitSHA1": "97244b143ca72cb9dcd86b428f9408928985b545", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "     Assert.assertEquals(1, appender.getErrorCounts(cutoff).get(0).longValue());\n     Assert.assertEquals(1, appender.getErrorMessagesAndCounts(cutoff).get(0)\n       .size());\n    Thread.sleep(2000);\n     Assert.assertEquals(1, appender.getErrorCounts(cutoff).size());\n     Assert.assertEquals(0, appender.getErrorCounts(cutoff).get(0).longValue());\n     Assert.assertEquals(0, appender.getErrorMessagesAndCounts(cutoff).get(0)", "fixed": "     Assert.assertEquals(1, appender.getErrorCounts(cutoff).get(0).longValue());\n     Assert.assertEquals(1, appender.getErrorMessagesAndCounts(cutoff).get(0)\n       .size());\n    Thread.sleep(3000);\n     Assert.assertEquals(1, appender.getErrorCounts(cutoff).size());\n     Assert.assertEquals(0, appender.getErrorCounts(cutoff).get(0).longValue());\n     Assert.assertEquals(0, appender.getErrorMessagesAndCounts(cutoff).get(0)", "sourceBeforeFix": "Thread.sleep(2000)", "sourceAfterFix": "Thread.sleep(3000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( getActivity ( ) , VAR_2 . METHOD_2 ( ) , new TYPE_2 ( ) , true ) ; VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; TYPE_3 VAR_3 = new TYPE_4 ( getActivity ( ) , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( VAR_3 ) ; return VAR_1 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( getActivity ( ) , VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_4 ( ) , true ) ; TYPE_3 VAR_3 = new TYPE_4 ( getActivity ( ) , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( VAR_3 ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = this . VAR_2 ; if ( ( VAR_2 ) != null ) { while ( ( VAR_1 . METHOD_2 ( ) ) != null ) { java.lang.System.out.println ( VAR_1 . getName ( ) ) ; VAR_1 = VAR_1 . METHOD_2 ( ) ; } } else { java.lang.System.out.println ( STRING_1 ) ; } }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = this . VAR_2 ; if ( ( VAR_2 ) != null ) { while ( ( VAR_1 . METHOD_2 ( ) ) != null ) { java.lang.System.out.println ( VAR_1 . getName ( ) ) ; VAR_1 = VAR_1 . METHOD_2 ( ) ; } java.lang.System.out.println ( VAR_1 . getName ( ) ) ; } else { java.lang.System.out.println ( STRING_1 ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"problem": "public static java.net.URL METHOD_1 ( ) throws TYPE_1 { java.net.URL url ; java.io.File file = new java.io.File ( ( ( TYPE_2 . METHOD_2 ( STRING_1 ) ) + ( VAR_1 ) ) ) ; if ( ! ( file . METHOD_3 ( ) ) ) { throw new TYPE_3 ( ) ; } try { url = file . METHOD_4 ( ) . METHOD_5 ( ) ; } catch ( TYPE_4 VAR_2 ) { throw new TYPE_1 ( STRING_2 , VAR_2 ) ; } return url ; }\n", "fixed": "public static java.net.URL METHOD_1 ( ) throws TYPE_1 { java.net.URL url ; java.io.File file = new java.io.File ( ( ( TYPE_2 . METHOD_2 ( STRING_1 ) ) + ( VAR_1 ) ) ) ; if ( ( file == null ) || ( ! ( file . METHOD_3 ( ) ) ) ) { throw new TYPE_3 ( ) ; } try { url = file . METHOD_4 ( ) . METHOD_5 ( ) ; } catch ( TYPE_4 VAR_2 ) { throw new TYPE_1 ( STRING_2 , VAR_2 ) ; } return url ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( int VAR_1 , java.lang.String [ ] VAR_2 , int [ ] VAR_3 ) { if ( VAR_1 == ( VAR_4 ) ) { if ( ( ( VAR_3 . length ) != 1 ) || ( ( VAR_3 [ 0 ] ) != ( VAR_5 ) ) ) { TYPE_1 . METHOD_2 ( getString ( VAR_6 ) ) . show ( METHOD_3 ( ) , VAR_7 ) ; } } else { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , java.lang.String [ ] VAR_2 , int [ ] VAR_3 ) { if ( VAR_1 == ( VAR_4 ) ) { if ( ( ( VAR_3 . length ) != 1 ) || ( ( VAR_3 [ 0 ] ) != ( VAR_5 ) ) ) { } } else { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( this . VAR_2 ) ) ; TYPE_2 operation = VAR_1 . METHOD_2 ( ) ; operation . METHOD_3 ( STRING_1 , 1 ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( this . VAR_4 ) ) ; VAR_3 . add ( STRING_1 , TYPE_4 . METHOD_4 ( STRING_2 ) , 1 ) ; operation . commit ( ) ; TYPE_5 . METHOD_5 ( VAR_1 . commit ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( this . VAR_2 ) ) ; TYPE_2 operation = VAR_1 . METHOD_2 ( ) ; operation . METHOD_3 ( STRING_1 , 1 ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( this . VAR_4 ) ) ; operation . commit ( ) ; VAR_3 . add ( STRING_1 , TYPE_4 . METHOD_4 ( STRING_2 ) , 1 ) ; TYPE_5 . METHOD_5 ( VAR_1 . commit ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 item ) { VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_2 . METHOD_3 ( ) ) ; i ++ ) { if ( VAR_2 . METHOD_4 ( i ) . equals ( item ) ) { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( true ) ; } else { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( false ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 item ) { VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_2 . METHOD_3 ( ) ) ; i ++ ) { if ( ( VAR_1 . METHOD_5 ( i ) ) != null ) { if ( VAR_2 . METHOD_4 ( i ) . equals ( item ) ) { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( true ) ; } else { VAR_1 . METHOD_5 ( i ) . METHOD_6 ( false ) ; } } } }\n"}
{"problem": "public boolean METHOD_1 ( int i , int j ) { if ( METHOD_2 ( i , j ) ) { i -= i ; j -= j ; int VAR_1 = ( i * ( VAR_2 ) ) + j ; return VAR_3 . METHOD_3 ( VAR_4 , VAR_1 ) ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( int i , int j ) { if ( METHOD_2 ( i , j ) ) { i -= 1 ; j -= 1 ; int VAR_1 = ( i * ( VAR_2 ) ) + j ; return VAR_3 . METHOD_3 ( VAR_4 , VAR_1 ) ; } return false ; }\n"}
{"problem": "private void METHOD_1 ( boolean VAR_1 ) { if ( ( ( METHOD_2 ( ) ) != ( - 1 ) ) && VAR_1 ) METHOD_3 ( TYPE_1 . METHOD_4 ( METHOD_2 ( ) , VAR_2 ) ) ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_5 ( ) ; if ( ( VAR_4 ) != null ) VAR_4 . METHOD_6 ( ) ; if ( ( METHOD_7 ( ) ) != null ) METHOD_7 ( ) . METHOD_8 ( ) ; VAR_5 = true ; TYPE_2 . METHOD_9 ( ) ; }\n", "fixed": "private void METHOD_1 ( boolean VAR_1 ) { if ( ( ( METHOD_2 ( ) ) != ( - 1 ) ) && VAR_1 ) METHOD_3 ( TYPE_1 . METHOD_4 ( METHOD_2 ( ) , VAR_2 ) ) ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_5 ( ) ; if ( ( VAR_4 ) != null ) VAR_4 . METHOD_6 ( ) ; if ( ( METHOD_7 ( ) ) != null ) METHOD_7 ( ) . METHOD_8 ( ) ; VAR_5 = true ; TYPE_2 . METHOD_9 ( this ) ; }\n"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "fixed": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "sourceBeforeFix": "hazelcastFactory.newHazelcastInstance()", "sourceAfterFix": "hazelcastFactory.newHazelcastInstance(newConfig())"}
{"problem": "private void METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( VAR_2 ) ; java.util.List < TYPE_3 > VAR_5 = VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_6 . METHOD_6 ( STRING_1 , VAR_1 ) ; if ( ( VAR_5 . size ( ) ) > 0 ) { VAR_7 = VAR_5 . get ( 0 ) . METHOD_7 ( ) ; } else { throw new TYPE_4 ( ( STRING_2 + VAR_1 ) ) ; } }\n", "fixed": "private void METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( VAR_2 ) ; java.util.List < TYPE_3 > VAR_5 = VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_6 . info ( STRING_1 , VAR_1 ) ; if ( ( VAR_5 . size ( ) ) > 0 ) { VAR_7 = VAR_5 . get ( 0 ) . METHOD_7 ( ) ; } else { throw new TYPE_4 ( ( STRING_2 + VAR_1 ) ) ; } }\n"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"problem": "public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , java.util.ArrayList < TYPE_2 > VAR_2 , TYPE_3 VAR_3 ) { for ( int VAR_4 = 0 ; VAR_4 < ( VAR_1 . size ( ) ) ; VAR_4 ++ ) { TYPE_2 VAR_5 = VAR_2 . get ( VAR_4 ) ; TYPE_1 VAR_6 = VAR_1 . get ( VAR_4 ) ; if ( VAR_3 . METHOD_2 ( ( VAR_4 ++ ) , VAR_6 , VAR_6 , VAR_7 , VAR_5 , this ) ) { TYPE_4 . METHOD_3 ( ) ; } } }\n", "fixed": "public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , java.util.ArrayList < TYPE_2 > VAR_2 , TYPE_3 VAR_3 ) { for ( int VAR_4 = 0 ; VAR_4 < ( VAR_1 . size ( ) ) ; VAR_4 ++ ) { TYPE_2 VAR_5 = VAR_2 . get ( VAR_4 ) ; TYPE_1 VAR_6 = VAR_1 . get ( VAR_4 ) ; if ( VAR_3 . METHOD_2 ( VAR_4 , VAR_6 , VAR_6 , VAR_7 , VAR_5 , this ) ) { TYPE_4 . METHOD_3 ( ) ; } } }\n"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": "  *\n  * <p>The stream is bounded and will complete after about a minute.\n  * The result is always constant.\n * The job is killed on the first attemped and restarted.\n  *\n  * <p>Parameters:\n  * -outputPath Sets the path to where the result data is written.", "fixed": "  *\n  * <p>The stream is bounded and will complete after about a minute.\n  * The result is always constant.\n * The job is killed on the first attempt and restarted.\n  *\n  * <p>Parameters:\n  * -outputPath Sets the path to where the result data is written.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"problem": "private void METHOD_1 ( final long count , final double value ) throws TYPE_1 { if ( ( value < ( VAR_1 ) ) || ( value > ( VAR_2 ) ) ) { METHOD_2 ( value ) ; } long VAR_3 = ( ( long ) ( value * ( VAR_4 ) ) ) ; VAR_5 . METHOD_3 ( VAR_3 , count ) ; }\n", "fixed": "private void METHOD_1 ( final long count , final double value ) throws TYPE_1 { if ( ( value < ( VAR_1 ) ) || ( value >= ( VAR_2 ) ) ) { METHOD_2 ( value ) ; } long VAR_3 = ( ( long ) ( value * ( VAR_4 ) ) ) ; VAR_5 . METHOD_3 ( VAR_3 , count ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 [ ] VAR_1 , java.io.File file ) throws java.io.IOException , TYPE_3 { TYPE_1 data = new TYPE_1 ( name , VAR_1 , response ) ; try ( java.io.BufferedReader VAR_2 = new java.io.BufferedReader ( new TYPE_4 ( new java.io.FileInputStream ( file ) ) ) ) { METHOD_1 ( data , VAR_2 ) ; } return data ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 [ ] VAR_1 , java.io.File file ) throws java.io.IOException , TYPE_3 { try ( java.io.BufferedReader VAR_2 = new java.io.BufferedReader ( new TYPE_4 ( new java.io.FileInputStream ( file ) ) ) ) { return METHOD_1 ( name , VAR_1 , VAR_2 ) ; } }\n"}
{"problem": "public int execute ( java.io.InputStream VAR_1 , TYPE_1 [ ] args ) { try { for ( TYPE_1 arg : args ) { out.write ( arg . METHOD_1 ( ) . METHOD_2 ( ) ) ; out.write ( STRING_1 . METHOD_2 ( ) ) ; } } catch ( java.io.IOException VAR_2 ) { TYPE_2 . METHOD_3 ( VAR_3 , STRING_2 , VAR_2 ) ; return 1 ; } return 0 ; }\n", "fixed": "public int execute ( java.io.InputStream VAR_1 , TYPE_1 [ ] args ) { try { int i = 0 ; for ( TYPE_1 arg : args ) { i ++ ; out.write ( arg . METHOD_1 ( ) . METHOD_2 ( ) ) ; if ( i != ( args.length ) ) { out.write ( STRING_1 . METHOD_2 ( ) ) ; } } out.write ( \"\\n\" . METHOD_2 ( ) ) ; } catch ( java.io.IOException VAR_2 ) { TYPE_2 . METHOD_3 ( VAR_3 , STRING_2 , VAR_2 ) ; return 1 ; } return 0 ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( ) throws java.io.IOException { try ( java.io.BufferedReader VAR_1 = new java.io.BufferedReader ( new java.io.FileReader ( file ) ) ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return STRING_1 ; } else { java.lang.String line = VAR_1 . METHOD_3 ( ) ; return line ; } } catch ( java.io.IOException VAR_2 ) { throw VAR_2 ; } }\n", "fixed": "private java.lang.String METHOD_1 ( ) throws java.io.IOException { try ( java.io.BufferedReader VAR_1 = new java.io.BufferedReader ( new java.io.FileReader ( file ) ) ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return STRING_1 ; } else { return VAR_1 . METHOD_3 ( ) ; } } catch ( java.io.IOException VAR_2 ) { throw VAR_2 ; } }\n"}
{"problem": "public java.lang.String url ( ) { java.lang.StringBuffer VAR_1 = new java.lang.StringBuffer ( ) ; VAR_1 . append ( ( ( java.lang.String ) ( VAR_2 . get ( VAR_3 ) ) ) ) ; java.lang.Object value = VAR_2 . get ( VAR_4 ) ; if ( value != null ) { VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( ( ( java.lang.String ) ( value ) ) ) ; } return VAR_1 . toString ( ) ; }\n", "fixed": "public java.lang.String url ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_1 . append ( ( ( java.lang.String ) ( VAR_2 . get ( VAR_3 ) ) ) ) ; java.lang.Object value = VAR_2 . get ( VAR_4 ) ; if ( value != null ) { VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( ( ( java.lang.String ) ( value ) ) ) ; } return VAR_1 . toString ( ) ; }\n"}
{"problem": "private void update ( ) { int num = METHOD_1 ( ) ; if ( num == ( min ) ) { VAR_1 . setEnabled ( false ) ; } else if ( num == ( VAR_2 ) ) { VAR_3 . setEnabled ( false ) ; } else { VAR_1 . setEnabled ( true ) ; VAR_3 . setEnabled ( true ) ; } }\n", "fixed": "private void update ( ) { int num = METHOD_1 ( ) ; if ( num == ( min ) ) { VAR_1 . setEnabled ( false ) ; VAR_3 . setEnabled ( true ) ; } else if ( num == ( VAR_2 ) ) { VAR_1 . setEnabled ( true ) ; VAR_3 . setEnabled ( false ) ; } else { VAR_1 . setEnabled ( true ) ; VAR_3 . setEnabled ( true ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.print ( STRING_1 ) ; java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( STRING_2 ) ) { METHOD_4 ( ) ; java.lang.System.out.println ( ( STRING_3 + ( VAR_3 ) ) ) ; METHOD_5 ( ) ; } else { java.lang.System.out.println ( ( ( STRING_4 + ( VAR_3 ) ) + STRING_5 ) ) ; java.lang.System.out.println ( ( ( STRING_6 + ( VAR_4 . name ) ) + STRING_7 ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.System.out.print ( STRING_1 ) ; java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( STRING_2 ) ) { METHOD_4 ( ) ; java.lang.System.out.println ( ( STRING_3 + ( VAR_3 ) ) ) ; METHOD_5 ( ) ; } else { java.lang.System.out.println ( ( ( STRING_4 + ( VAR_3 ) ) + STRING_5 ) ) ; java.lang.System.out.println ( ( ( STRING_6 + ( VAR_4 . name ) ) + STRING_7 ) ) ; java.lang.System.exit ( 0 ) ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { java.util.Iterator < TYPE_3 > VAR_2 = VAR_1 . METHOD_2 ( ) . iterator ( ) ; while ( VAR_2 . METHOD_3 ( ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_4 ( ) ; boolean VAR_4 = true ; for ( TYPE_4 VAR_5 : VAR_1 . METHOD_5 ( ) ) { VAR_4 &= VAR_3 . METHOD_6 ( VAR_5 , VAR_6 ) ; } if ( ! VAR_4 ) { VAR_2 . remove ( ) ; } } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { java.util.Iterator < TYPE_3 > VAR_2 = VAR_1 . METHOD_2 ( ) . iterator ( ) ; while ( VAR_2 . METHOD_3 ( ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_4 ( ) ; boolean VAR_4 = true ; for ( TYPE_4 VAR_5 : VAR_1 . METHOD_5 ( ) ) { VAR_4 &= VAR_3 . METHOD_6 ( VAR_5 , VAR_5 , VAR_6 ) ; } if ( ! VAR_4 ) { VAR_2 . remove ( ) ; } } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.info(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "fixed": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "sourceBeforeFix": "logger.info(\"Normalizing\")", "sourceAfterFix": "logger.fine(\"Normalizing\")"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { VAR_2 += VAR_1 ; if ( ( VAR_2 ) >= ( VAR_3 [ VAR_4 ] ) ) { if ( VAR_5 ) { VAR_6 . METHOD_2 ( ) ; VAR_6 . METHOD_3 ( ) ; } VAR_2 -= VAR_3 [ VAR_4 ] ; ( VAR_4 ) ++ ; VAR_7 += INT_1 ; VAR_8 = VAR_7 ; VAR_9 += INT_1 ; VAR_10 = VAR_9 ; VAR_11 = INT_2 ; VAR_12 += INT_3 ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { VAR_2 += VAR_1 ; while ( ( VAR_2 ) >= ( VAR_3 [ VAR_4 ] ) ) { if ( VAR_5 ) { VAR_6 . METHOD_2 ( ) ; VAR_6 . METHOD_3 ( ) ; } VAR_2 -= VAR_3 [ VAR_4 ] ; ( VAR_4 ) ++ ; VAR_7 += INT_1 ; VAR_8 = VAR_7 ; VAR_9 += INT_1 ; VAR_10 = VAR_9 ; VAR_11 = INT_2 ; VAR_12 += INT_3 ; } }\n"}
{"problem": "private void METHOD_1 ( ) { while ( ( ! ( VAR_1 ) ) && ( VAR_2 . get ( ) ) ) { METHOD_2 ( 1.0 ) ; TYPE_1 . METHOD_3 ( FLOAT_1 ) ; if ( ! ( VAR_2 . get ( ) ) ) { VAR_1 = true ; } } VAR_3 = false ; METHOD_2 ( 0 ) ; }\n", "fixed": "private void METHOD_1 ( ) { while ( ( ! ( VAR_1 ) ) && ( VAR_2 . get ( ) ) ) { METHOD_2 ( ( - 1.0 ) ) ; TYPE_1 . METHOD_3 ( FLOAT_1 ) ; if ( ! ( VAR_2 . get ( ) ) ) { VAR_1 = true ; } } VAR_3 = false ; METHOD_2 ( 0 ) ; }\n"}
{"problem": "public void METHOD_1 ( boolean VAR_1 , boolean VAR_2 , boolean VAR_3 , android.content.Context context ) { android.content.Intent intent = new android.content.Intent ( ) ; intent . METHOD_2 ( VAR_4 ) ; intent . METHOD_3 ( VAR_5 , VAR_1 ) ; intent . METHOD_3 ( VAR_6 , VAR_2 ) ; intent . METHOD_3 ( VAR_7 , VAR_3 ) ; context . METHOD_4 ( intent ) ; }\n", "fixed": "private static boolean METHOD_1 ( boolean VAR_1 , boolean VAR_2 , boolean VAR_3 , android.content.Context context ) { intent . METHOD_2 ( VAR_4 ) ; intent . METHOD_3 ( VAR_5 , VAR_1 ) ; intent . METHOD_3 ( VAR_6 , VAR_2 ) ; intent . METHOD_3 ( VAR_7 , VAR_3 ) ; context . METHOD_4 ( intent ) ; return true ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { java.lang.String VAR_3 = STRING_1 ; java.lang.String token = STRING_2 ; java.lang.String value = VAR_1 . METHOD_2 ( STRING_3 ) ; TYPE_4 out = VAR_2 . METHOD_3 ( ) ; if ( token == STRING_4 ) out . METHOD_4 ( ( STRING_5 + value ) ) ; out . METHOD_5 ( ) ; out . METHOD_6 ( ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException , TYPE_3 { java.lang.String VAR_3 = STRING_1 ; java.lang.String token = STRING_2 ; java.lang.String value = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_4 out = VAR_2 . METHOD_3 ( ) ; if ( token == STRING_4 ) out . METHOD_4 ( ( STRING_5 + value ) ) ; out . METHOD_5 ( ) ; out . METHOD_6 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_4 ( VAR_4 ) ; METHOD_5 ( VAR_2 ) ; } else { TYPE_1 . show ( METHOD_6 ( ) , getString ( VAR_5 ) ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { android.content.Intent VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; if ( VAR_2 != null ) { METHOD_5 ( VAR_2 ) ; } else { TYPE_1 . show ( METHOD_6 ( ) , getString ( VAR_5 ) ) ; } }\n"}
{"problem": "private boolean METHOD_1 ( java.lang.String path ) { if ( ! ( path . isEmpty ( ) ) ) { try { VAR_1 . METHOD_2 ( path ) ; VAR_1 . METHOD_3 ( ) ; if ( VAR_1 . METHOD_4 ( ) ) { VAR_1 . METHOD_5 ( ) ; } VAR_1 . start ( ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_6 ( ) ; return false ; } } else { return false ; } return true ; }\n", "fixed": "private boolean METHOD_1 ( java.lang.String path ) { if ( ( path != null ) && ( ! ( path . isEmpty ( ) ) ) ) { try { VAR_1 . METHOD_2 ( path ) ; VAR_1 . METHOD_3 ( ) ; if ( VAR_1 . METHOD_4 ( ) ) { VAR_1 . METHOD_5 ( ) ; } VAR_1 . start ( ) ; } catch ( java.io.IOException VAR_2 ) { VAR_2 . METHOD_6 ( ) ; return false ; } } else { return false ; } return true ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) [ VAR_2 ] ; VAR_5 . METHOD_3 ( new TYPE_3 < java.lang.String > ( METHOD_4 ( ) , VAR_6 , VAR_3 . METHOD_5 ( ) ) ) ; VAR_7 . setText ( ( STRING_1 + ( VAR_3 . getName ( ) ) ) ) ; VAR_1 . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) [ VAR_2 ] ; VAR_5 . METHOD_3 ( new TYPE_3 < java.lang.String > ( METHOD_4 ( ) , VAR_6 , VAR_3 . METHOD_5 ( ) ) ) ; VAR_7 . setText ( ( STRING_1 + ( VAR_3 . getName ( ) ) ) ) ; VAR_4 = VAR_3 ; VAR_1 . METHOD_6 ( ) ; }\n"}
{"problem": "public long METHOD_1 ( TYPE_1 < TYPE_2 , TYPE_3 > query ) { try { long VAR_1 = 0 ; TYPE_4 < TYPE_2 , TYPE_3 > result = query . execute ( ) ; while ( result . METHOD_2 ( ) ) { if ( delete ( result . METHOD_3 ( ) ) ) VAR_1 ++ ; } return 0 ; } catch ( java.lang.Exception VAR_2 ) { return 0 ; } }\n", "fixed": "public long METHOD_1 ( TYPE_1 < TYPE_2 , TYPE_3 > query ) { try { long VAR_1 = 0 ; TYPE_4 < TYPE_2 , TYPE_3 > result = query . execute ( ) ; while ( result . METHOD_2 ( ) ) { if ( delete ( result . METHOD_3 ( ) ) ) VAR_1 ++ ; } return VAR_1 ; } catch ( java.lang.Exception VAR_2 ) { return 0 ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { VAR_2 = false ; java.lang.System.out.println ( STRING_2 ) ; } if ( TYPE_2 . METHOD_3 ( VAR_1 ) ) { VAR_3 = false ; VAR_4 = TYPE_3 . METHOD_4 ( ) ; java.lang.System.out.println ( STRING_3 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { VAR_2 = false ; java.lang.System.out.println ( STRING_2 ) ; } if ( TYPE_2 . METHOD_3 ( VAR_1 ) ) { VAR_3 = false ; VAR_4 = TYPE_3 . METHOD_4 ( ) ; java.lang.System.out.println ( STRING_3 ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.util.Date data ) { java.util.HashMap < java.lang.Integer , java.lang.Boolean > VAR_1 = TYPE_1 . METHOD_2 ( data ) ; for ( int i = INT_1 ; i <= INT_2 ; i ++ ) { if ( VAR_1 . get ( i ) ) { VAR_2 . add ( new TYPE_2 ( i , STRING_1 , true ) ) ; } else { VAR_2 . add ( new TYPE_2 ( i , STRING_2 , false ) ) ; } } }\n", "fixed": "public void METHOD_1 ( java.util.Date data ) { java.util.HashMap < java.lang.Integer , java.lang.Boolean > VAR_1 = TYPE_1 . METHOD_2 ( data ) ; if ( VAR_1 == null ) { return ; } for ( int i = INT_1 ; i <= INT_2 ; i ++ ) { if ( VAR_1 . get ( i ) ) { VAR_2 . add ( new TYPE_2 ( i , STRING_1 , true ) ) ; } else { VAR_2 . add ( new TYPE_2 ( i , STRING_2 , false ) ) ; } } }\n"}
{"problem": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { final android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; VAR_5 = ( ( TYPE_4 ) ( view . METHOD_3 ( VAR_6 ) ) ) ; VAR_5 . METHOD_4 ( VAR_7 ) ; new TYPE_5 ( ) . execute ( ) ; return view ; }\n", "fixed": "public android.view.View METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { new TYPE_5 ( ) . execute ( ) ; final android.view.View view = VAR_1 . METHOD_2 ( VAR_4 , VAR_2 , false ) ; VAR_5 = ( ( TYPE_4 ) ( view . METHOD_3 ( VAR_6 ) ) ) ; VAR_5 . METHOD_4 ( VAR_7 ) ; return view ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; if ( ( VAR_2 . getText ( ) ) != null ) VAR_1 = VAR_2 . getText ( ) . toString ( ) ; VAR_3 = new TYPE_1 ( date , java.lang.String . METHOD_2 ( VAR_4 ) , VAR_1 ) ; }\n", "fixed": "private void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; if ( ( VAR_2 . getText ( ) ) != null ) { if ( ( VAR_2 . getText ( ) . length ( ) ) > 0 ) { VAR_1 = VAR_2 . getText ( ) . toString ( ) ; } } VAR_3 = new TYPE_1 ( date , java.lang.String . METHOD_2 ( VAR_4 ) , VAR_1 ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface OptaPlannerEndpointBuilder\n             extends\n                 OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointBuilder advanced() {", "fixed": "     \n    public interface OptaPlannerEndpointBuilder\n             extends\n                 OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public boolean METHOD_1 ( ) { int sum = 0 ; for ( int i = 0 ; i < ( results . length ) ; i ++ ) { if ( ( results [ i ] ) == INT_1 ) { for ( TYPE_1 VAR_1 : VAR_2 ) { sum += VAR_1 . METHOD_2 ( ) ; } VAR_3 . setText ( java.lang.String . METHOD_3 ( sum ) ) ; break ; } else { VAR_3 . setText ( java.lang.String . METHOD_3 ( \"0\" ) ) ; } } return true ; }\n", "fixed": "public boolean METHOD_1 ( ) { int sum = 0 ; for ( int i = 0 ; i < ( results . length ) ; i ++ ) { if ( ( results [ i ] ) >= INT_1 ) { for ( TYPE_1 VAR_1 : VAR_2 ) { sum += VAR_1 . METHOD_2 ( ) ; } VAR_3 . setText ( java.lang.String . METHOD_3 ( sum ) ) ; break ; } else { VAR_3 . setText ( java.lang.String . METHOD_3 ( \"0\" ) ) ; } } return true ; }\n"}
{"problem": "private void replace ( ) { int x = 0 ; int y = 0 ; for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_1 ( ) . METHOD_2 ( ( ( VAR_3 ) + ( ( VAR_4 ) * x ) ) , ( ( VAR_5 ) - ( ( ( height ) * FLOAT_1 ) * y ) ) ) ; java.lang.System.out.println ( y ) ; x ++ ; if ( x == ( VAR_6 ) ) { x = 0 ; y ++ ; } } }\n", "fixed": "private void replace ( ) { int x = 0 ; int y = 0 ; for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_1 ( ) . METHOD_2 ( ( ( VAR_3 ) + ( ( VAR_4 ) * x ) ) , ( ( VAR_5 ) - ( ( ( height ) * FLOAT_1 ) * y ) ) ) ; x ++ ; if ( x == ( VAR_6 ) ) { x = 0 ; y ++ ; } } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ) { return VAR_1 . METHOD_4 ( ) ; } java.util.Map VAR_3 = new java.util.HashMap ( ) ; VAR_3 . METHOD_5 ( METHOD_6 ( ) ) ; return ( ( VAR_1 . METHOD_7 ( ) ) + STRING_1 ) + ( TYPE_2 . toString ( VAR_3 ) ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ) { return VAR_1 . METHOD_4 ( ) ; } java.util.Map VAR_3 = new java.util.HashMap ( ) ; VAR_3 . METHOD_5 ( METHOD_6 ( VAR_1 ) ) ; return ( ( VAR_1 . METHOD_7 ( ) ) + STRING_1 ) + ( TYPE_2 . toString ( VAR_3 ) ) ; }\n"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private static < TYPE_1 > TYPE_1 [ ] METHOD_1 ( TYPE_1 ... VAR_1 ) { for ( int i = 0 ; i < ( ( VAR_1 . length ) - 1 ) ; i ++ ) { TYPE_2 . assertThat ( VAR_1 [ i ] , TYPE_3 . METHOD_2 ( VAR_1 [ ( i + 1 ) ] ) ) ; } return VAR_1 ; }\n", "fixed": "private static < TYPE_1 > TYPE_1 [ ] METHOD_1 ( TYPE_1 ... VAR_1 ) { for ( int i = 0 ; i < ( ( VAR_1 . length ) - 1 ) ; i ++ ) { assertThat ( VAR_1 [ i ] , TYPE_3 . METHOD_2 ( VAR_1 [ ( i + 1 ) ] ) ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ; VAR_2 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) ; java.lang.System.out.println ( VAR_2 ) ; VAR_3 = new java.util.HashMap < TYPE_1 , TYPE_2 > ( out . get ( VAR_1 ) ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; for ( TYPE_1 k : VAR_3 . METHOD_5 ( ) ) METHOD_6 ( VAR_1 , k , VAR_3 . get ( k ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) ; VAR_3 = new java.util.HashMap < TYPE_1 , TYPE_2 > ( out . get ( VAR_1 ) ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; for ( TYPE_1 k : VAR_3 . METHOD_5 ( ) ) METHOD_6 ( VAR_1 , k , VAR_3 . get ( k ) ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; TYPE_1 VAR_2 = getIntent ( ) . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_2 . getString ( STRING_1 ) ; java.lang.String name = VAR_2 . getString ( \"name\" ) ; intent . METHOD_3 ( \"name\" , name ) ; intent . METHOD_3 ( STRING_1 , STRING_2 ) ; METHOD_4 ( intent ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , VAR_1 class ) ; TYPE_1 VAR_2 = getIntent ( ) . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_2 . getString ( STRING_1 ) ; java.lang.String name = VAR_2 . getString ( \"name\" ) ; intent . METHOD_3 ( \"name\" , name ) ; intent . METHOD_3 ( STRING_1 , VAR_3 ) ; METHOD_4 ( intent ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSWFEndpointBuilder\n             extends\n                 AdvancedSWFEndpointConsumerBuilder, AdvancedSWFEndpointProducerBuilder {\n         default SWFEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSWFEndpointBuilder\n             extends\n                 AdvancedSWFEndpointConsumerBuilder, AdvancedSWFEndpointProducerBuilder {\n         default SWFEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public java.lang.String execute ( ) throws java.lang.Exception { if ( TYPE_1 . METHOD_1 ( VAR_1 ) ) { VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; this . VAR_4 = METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) . size ( ) ) ; VAR_5 = new java.util.ArrayList ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; } else { return VAR_6 ; } return VAR_7 ; }\n", "fixed": "public java.lang.String execute ( ) throws java.lang.Exception { if ( TYPE_1 . METHOD_1 ( VAR_1 ) ) { VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; this . VAR_4 = METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) . size ( ) ) ; VAR_5 = new java.util.ArrayList ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; java.util.Collections.sort ( VAR_5 ) ; } else { return VAR_6 ; } return VAR_7 ; }\n"}
{"fixCommitSHA1": "efdc1c8c89efe76a650fbaa9fd870126cb391feb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Binary Operator", "problem": " public class IndexerSetupService extends AbstractIdleService {\n     private static final Logger LOG = LoggerFactory.getLogger(IndexerSetupService.class);\n     private static final Version MINIMUM_ES_VERSION = Version.V_1_3_4;\n    private static final Version MAXIMUM_ES_VERSION = Version.fromString(\"1.6.99\");\n     private final Node node;\n     private final ElasticsearchConfiguration configuration;", "fixed": " public class IndexerSetupService extends AbstractIdleService {\n     private static final Logger LOG = LoggerFactory.getLogger(IndexerSetupService.class);\n     private static final Version MINIMUM_ES_VERSION = Version.V_1_3_4;\n    private static final Version MAXIMUM_ES_VERSION = Version.fromString(\"1.7.99\");\n     private final Node node;\n     private final ElasticsearchConfiguration configuration;", "sourceBeforeFix": "!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) && !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)", "sourceAfterFix": "!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) || !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)"}
{"problem": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 . isEmpty ( ) ) { METHOD_2 ( ) ; } if ( VAR_2 . isEmpty ( ) ) { METHOD_3 ( ) ; } VAR_3 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; VAR_3 = VAR_4 . query ( STRING_1 , null , STRING_2 , null , null , null , null ) ; VAR_5 . METHOD_6 ( null ) ; VAR_5 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_5 . METHOD_6 ( VAR_6 ) ; }\n", "fixed": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 . isEmpty ( ) ) { METHOD_2 ( ) ; } METHOD_3 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; VAR_3 = VAR_4 . query ( STRING_1 , null , STRING_2 , null , null , null , null ) ; VAR_5 . METHOD_6 ( null ) ; VAR_5 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_5 . METHOD_6 ( VAR_6 ) ; }\n"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( id . getText ( ) . toString ( ) ) ; VAR_3 . METHOD_4 ( name . getText ( ) . toString ( ) ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; VAR_2 . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( id . getText ( ) . toString ( ) ) ; VAR_3 . METHOD_4 ( name . getText ( ) . toString ( ) ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; VAR_2 . METHOD_6 ( ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getText ( ) ; java.lang.String VAR_3 = VAR_4 ; if ( ( VAR_1 == null ) && ( VAR_3 == null ) ) return true ; if ( ( VAR_1 == null ) && ( VAR_3 != null ) ) return true ; if ( ( VAR_1 != null ) && ( VAR_3 == null ) ) return true ; if ( ! ( VAR_1 . equals ( VAR_3 ) ) ) return true ; return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getText ( ) ; java.lang.String VAR_3 = VAR_4 ; if ( ( VAR_1 == null ) && ( VAR_3 == null ) ) return false ; if ( ( VAR_1 == null ) && ( VAR_3 != null ) ) return true ; if ( ( VAR_1 != null ) && ( VAR_3 == null ) ) return true ; if ( ! ( VAR_1 . equals ( VAR_3 ) ) ) return true ; return false ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; try { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 ) ; VAR_4 . add ( VAR_3 ) ; java.lang.System.out.println ( VAR_4 . toString ( ) ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; VAR_6 . METHOD_4 ( METHOD_5 ( VAR_1 , VAR_3 ) ) ; VAR_7 = VAR_8 ; } catch ( TYPE_3 VAR_9 ) { VAR_7 = VAR_10 ; } return METHOD_6 ( VAR_2 , null ) ; }\n", "fixed": "private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; try { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 ) ; VAR_4 . add ( VAR_3 ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; VAR_6 . METHOD_4 ( METHOD_5 ( VAR_1 , VAR_3 ) ) ; VAR_7 = VAR_8 ; } catch ( TYPE_3 VAR_9 ) { VAR_7 = VAR_10 ; } return METHOD_6 ( VAR_2 , null ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( this ) ; VAR_4 . METHOD_3 ( this ) ; VAR_5 . METHOD_4 ( this ) ; } else { VAR_3 . METHOD_5 ( this ) ; VAR_4 . METHOD_5 ( this ) ; VAR_5 . METHOD_6 ( this ) ; VAR_2 . METHOD_7 ( ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( this ) ; VAR_5 . METHOD_4 ( this ) ; } else { VAR_4 . METHOD_5 ( this ) ; VAR_5 . METHOD_6 ( this ) ; VAR_2 . METHOD_7 ( ) ; } }\n"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "fixed": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_2 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_4 ( 1 , VAR_4 ) ; execute ( ) ; METHOD_5 ( VAR_3 , INT_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_4 ( 1 , VAR_4 ) ; execute ( ) ; METHOD_5 ( VAR_3 , INT_1 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "84a3d0b65bf27867edeb1617498726558ce73062", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 }\n                 Page page = serde.deserialize(serializedPage);\n                bytes += page.getSizeInBytes();\n                 rows += page.getPositionCount();\n                 pages.add(new RowIterable(session.toConnectorSession(), types, page));\n             }", "fixed": "                 }\n                 Page page = serde.deserialize(serializedPage);\n                bytes += page.getLogicalSizeInBytes();\n                 rows += page.getPositionCount();\n                 pages.add(new RowIterable(session.toConnectorSession(), types, page));\n             }", "sourceBeforeFix": "page.getSizeInBytes()", "sourceAfterFix": "page.getLogicalSizeInBytes()"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . put ( VAR_2 , id ) ; VAR_1 . put ( VAR_3 , name ) ; VAR_1 . put ( VAR_4 , VAR_5 ) ; VAR_1 . put ( VAR_6 , VAR_7 ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( id ) > ( - 1 ) ) { VAR_1 . put ( VAR_2 , id ) ; } VAR_1 . put ( VAR_3 , name ) ; VAR_1 . put ( VAR_4 , VAR_5 ) ; VAR_1 . put ( VAR_6 , VAR_7 ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "123e2eb64c4d5a57a8841576ffae66c0dcd2afa1", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         childRexNodeLst = rewriteFloorDateChildren(calciteOp, childRexNodeLst);\n       }\n      expr = cluster.getRexBuilder().makeCall(calciteOp, childRexNodeLst);\n     } else {\n       retType = expr.getType();\n     }", "fixed": "         childRexNodeLst = rewriteFloorDateChildren(calciteOp, childRexNodeLst);\n       }\n      expr = cluster.getRexBuilder().makeCall(retType, calciteOp, childRexNodeLst);\n     } else {\n       retType = expr.getType();\n     }", "sourceBeforeFix": "cluster.getRexBuilder().makeCall(calciteOp,childRexNodeLst)", "sourceAfterFix": "cluster.getRexBuilder().makeCall(retType,calciteOp,childRexNodeLst)"}
{"problem": "protected java.lang.String METHOD_1 ( ) { return ( ( ( ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + CHAR_1 ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + ( VAR_3 ) ) + STRING_4 ) + ( new java.lang.String ( VAR_4 ) ) ) + STRING_5 ) + ( new java.lang.String ( VAR_5 ) ) ; }\n", "fixed": "protected java.lang.String METHOD_1 ( ) { return ( ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + CHAR_1 ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + ( VAR_3 ) ) + STRING_5 ) + ( new java.lang.String ( VAR_5 ) ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.StringBuilder VAR_1 ) { if ( VAR_1 == null ) return METHOD_2 ( ) ; int VAR_2 = VAR_1 . length ( ) ; METHOD_3 ( ( ( count ) + VAR_2 ) ) ; TYPE_2 . METHOD_4 ( value , 0 , value , count , count ) ; VAR_1 . METHOD_5 ( 0 , VAR_2 , value , 0 ) ; count += VAR_2 ; return this ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.StringBuilder VAR_1 ) { if ( VAR_1 == null ) return METHOD_2 ( ) ; int VAR_2 = VAR_1 . length ( ) ; METHOD_3 ( ( ( count ) + VAR_2 ) ) ; TYPE_2 . METHOD_4 ( value , 0 , value , VAR_2 , count ) ; VAR_1 . METHOD_5 ( 0 , VAR_2 , value , 0 ) ; count += VAR_2 ; return this ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "protected void METHOD_1 ( java.lang.Long result ) { if ( result == 0 ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_1 , VAR_2 ) . show ( ) ; TYPE_2 . i ( STRING_1 , STRING_2 ) ; } else { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_3 , VAR_2 ) . show ( ) ; } }\n", "fixed": "protected void METHOD_1 ( java.lang.Long result ) { if ( result == 0 ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_1 , VAR_2 ) . show ( ) ; } else { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_3 , VAR_2 ) . show ( ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"problem": "public static boolean METHOD_1 ( java.lang.String string ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; java.lang.String VAR_3 = STRING_3 ; if ( ( ( TYPE_1 . METHOD_2 ( VAR_1 , string ) ) || ( TYPE_1 . METHOD_2 ( VAR_2 , string ) ) ) || ( TYPE_1 . METHOD_2 ( VAR_3 , string ) ) ) { if ( ( TYPE_1 . METHOD_2 ( VAR_1 , string ) ) || ( TYPE_1 . METHOD_2 ( VAR_2 , string ) ) ) { return true ; } return false ; } }\n", "fixed": "public static boolean METHOD_1 ( java.lang.String string ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; java.lang.String VAR_3 = STRING_3 ; if ( ( ( TYPE_1 . METHOD_2 ( VAR_1 , string ) ) || ( TYPE_1 . METHOD_2 ( VAR_2 , string ) ) ) || ( TYPE_1 . METHOD_2 ( VAR_3 , string ) ) ) { return true ; } return false ; }\n"}
{"fixCommitSHA1": "27fb87cfcea241c2d7961baf68e84ce97f2dee7a", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       }\n       statsData.setDecimalStats(decimalStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"date\")) {\n       DateColumnStatsData dateStats = new DateColumnStatsData();\n       Map<String, String> mapProp = work.getMapProp();\n       for (Entry<String, String> entry : mapProp.entrySet()) {", "fixed": "       }\n       statsData.setDecimalStats(decimalStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"date\")\n            || columnType.equalsIgnoreCase(\"timestamp\")) {\n       DateColumnStatsData dateStats = new DateColumnStatsData();\n       Map<String, String> mapProp = work.getMapProp();\n       for (Entry<String, String> entry : mapProp.entrySet()) {", "sourceBeforeFix": "columnType.equalsIgnoreCase(\"double\")", "sourceAfterFix": "columnType.equalsIgnoreCase(\"double\") || columnType.equalsIgnoreCase(\"float\")"}
{"problem": "public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) { android.content.Intent intent = new android.content.Intent ( this , VAR_2 class ) ; METHOD_3 ( intent ) ; METHOD_4 ( ) ; return true ; } if ( id == ( VAR_3 ) ) { return true ; } return super . METHOD_1 ( item ) ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 item ) { int id = item . METHOD_2 ( ) ; if ( id == ( VAR_1 ) ) { METHOD_4 ( ) ; return true ; } if ( id == ( VAR_3 ) ) { return true ; } return super . METHOD_1 ( item ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "private boolean METHOD_1 ( int VAR_1 ) { if ( VAR_1 >= ( VAR_2 . length ) ) { VAR_3 += 1 ; } for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { if ( ( VAR_2 [ i ] [ VAR_1 ] ) == 0 ) { METHOD_2 ( i , VAR_1 ) ; METHOD_3 ( ( VAR_1 + 1 ) ) ; METHOD_4 ( i , VAR_1 ) ; } } return false ; }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) { if ( VAR_1 >= ( VAR_2 . length ) ) { VAR_3 += 1 ; } for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { if ( ( VAR_2 [ i ] [ VAR_1 ] ) == 0 ) { METHOD_2 ( i , VAR_1 ) ; METHOD_1 ( ( VAR_1 + 1 ) ) ; METHOD_4 ( i , VAR_1 ) ; } } }\n"}
{"problem": "public void put ( double [ ] data ) { final int VAR_1 = data . length ; int i = 0 ; while ( i < VAR_1 ) { final double VAR_2 = data [ VAR_1 ] ; min = ( VAR_2 < ( min ) ) ? VAR_2 : min ; VAR_3 = ( VAR_2 > ( VAR_3 ) ) ? VAR_2 : VAR_3 ; } }\n", "fixed": "public void put ( double [ ] data ) { final int VAR_1 = data . length ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { final double VAR_2 = data [ i ] ; min = ( VAR_2 < ( min ) ) ? VAR_2 : min ; VAR_3 = ( VAR_2 > ( VAR_3 ) ) ? VAR_2 : VAR_3 ; } }\n"}
{"problem": "public void start ( TYPE_1 VAR_1 ) throws java.lang.Exception { this . VAR_1 = VAR_1 ; VAR_2 = TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; METHOD_4 ( VAR_1 ) ; if ( ! ( TYPE_4 . METHOD_5 ( TYPE_5 . get ( VAR_3 ) ) ) ) { new TYPE_6 ( this ) ; } }\n", "fixed": "public void start ( TYPE_1 VAR_1 ) throws java.lang.Exception { this . VAR_1 = VAR_1 ; VAR_2 = TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; if ( ! ( TYPE_4 . METHOD_5 ( TYPE_5 . get ( VAR_3 ) ) ) ) { new TYPE_6 ( this ) ; } else { METHOD_4 ( VAR_1 ) ; } }\n"}
{"problem": "protected static void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_2 ) { int i = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( i != ( - 1 ) ) { VAR_1 . get ( i ) . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; } else { VAR_1 . add ( VAR_3 ) ; } } }\n", "fixed": "private static void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_2 ) { int i = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( i != ( - 1 ) ) { VAR_1 . get ( i ) . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; } else { VAR_1 . add ( VAR_3 ) ; } } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( double x , double y , TYPE_2 VAR_1 ) { double VAR_2 = x * ( ( VAR_3 ) + ( VAR_4 ) ) ; double VAR_5 = ( ( y * ( height ) ) + ( ( height ) / INT_1 ) ) - ( ( x * ( height ) ) / INT_1 ) ; return new TYPE_1 ( VAR_2 , VAR_5 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( double x , double y ) { double VAR_2 = x * ( ( VAR_3 ) + ( VAR_4 ) ) ; double VAR_5 = ( ( y * ( height ) ) + ( ( height ) / INT_1 ) ) - ( ( x * ( height ) ) / INT_1 ) ; return new TYPE_1 ( VAR_2 , VAR_5 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "e78b610375a31d161665d2990bb6baa41933e0ee", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                if (nodeEngine.getPartitionService().getPartitionOwner(i).equals(nodeEngine.getClusterService().getThisAddress())) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }", "fixed": "             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                if (nodeEngine.getClusterService().getThisAddress().equals(nodeEngine.getPartitionService().getPartitionOwner(i))) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }", "sourceBeforeFix": "nodeEngine.getPartitionService()", "sourceAfterFix": "nodeEngine.getClusterService()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { if ( this . VAR_1 ) { return ; } this . VAR_2 = 0 ; this . VAR_1 = true ; java.lang.Thread t = new java.lang.Thread ( new TYPE_1 ( ) { public void METHOD_2 ( ) { METHOD_3 ( ) ; } } ) ; t . METHOD_2 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( this . VAR_1 ) { return ; } this . VAR_2 = 0 ; this . VAR_1 = true ; java.lang.Thread t = new java.lang.Thread ( new TYPE_1 ( ) { public void METHOD_2 ( ) { METHOD_3 ( ) ; } } ) ; t . start ( ) ; }\n"}
{"fixCommitSHA1": "53e1975f9795693cfd3819b8462f1fffa5f1ddd1", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     mTfs.setState(file, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Integer>newHashSet());\n     mTfs.setState(dir, mSetPinned);", "fixed": "     mTfs.setState(file, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());\n     mTfs.setState(dir, mSetPinned);", "sourceBeforeFix": "Sets.<Integer>newHashSet()", "sourceAfterFix": "Sets.<Long>newHashSet()"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                }\r\n                if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "fixed": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"problem": "public java.lang.Long METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return null ; else if ( ( VAR_2 ) != null ) return ( VAR_2 ) - ( VAR_1 ) ; else return ( TYPE_1 . METHOD_2 ( ) ) - ( VAR_1 ) ; }\n", "fixed": "public java.lang.Long METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 ) == 0 ) ) return null ; else if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 ) > 0 ) ) return ( VAR_2 ) - ( VAR_1 ) ; else return ( TYPE_1 . METHOD_2 ( ) ) - ( VAR_1 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"problem": "public boolean METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) ) ; if ( ! ( VAR_3 ) ) { VAR_4 . show ( ) ; return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) ) ; if ( ! ( VAR_3 ) ) { VAR_4 . show ( ) ; return true ; } return false ; }\n"}
{"fixCommitSHA1": "335f8c0d2af9c55c731dc7b44d18c5e3796f4bd6", "projectName": "hazelcast.hazelcast", "bugType": "More Specific If", "problem": "             return false;\n         }\n        if (this.referenceId == referenceId) {\n             return true;\n         }", "fixed": "             return false;\n         }\n        if (!this.transactional && this.referenceId == referenceId) {\n             return true;\n         }", "sourceBeforeFix": "this.referenceId == referenceId", "sourceAfterFix": "!this.transactional && this.referenceId == referenceId"}
{"problem": "public static void main ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; TYPE_2 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_4 VAR_3 = VAR_2 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( ) ; VAR_3 . METHOD_6 ( VAR_1 ) ; VAR_3 . METHOD_7 ( ) . commit ( ) ; VAR_3 . METHOD_8 ( ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) { TYPE_2 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_4 VAR_3 = VAR_2 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( ) ; VAR_3 . METHOD_7 ( ) . commit ( ) ; VAR_3 . METHOD_8 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "48e0acb98213234b32dd4c21eb5a7d4d94e25ca2", "projectName": "brettwooldridge.HikariCP", "bugType": "Wrong Function Name", "problem": "    {\n       if (connectionTimeout != Integer.MAX_VALUE) {\n          try {\n            dataSource.setLoginTimeout((int) TimeUnit.MILLISECONDS.toSeconds(Math.min(1000L, connectionTimeout)));\n          }\n          catch (SQLException e) {\n             logger.warn(\"Unable to set DataSource login timeout\", e);", "fixed": "    {\n       if (connectionTimeout != Integer.MAX_VALUE) {\n          try {\n            dataSource.setLoginTimeout((int) TimeUnit.MILLISECONDS.toSeconds(Math.max(1000L, connectionTimeout)));\n          }\n          catch (SQLException e) {\n             logger.warn(\"Unable to set DataSource login timeout\", e);", "sourceBeforeFix": "Math.min(1000L,connectionTimeout)", "sourceAfterFix": "Math.max(1000L,connectionTimeout)"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_1 , TYPE_3 . not ( TYPE_3 . METHOD_3 ( VAR_3 class ) ) ) ; TYPE_4 < ? > VAR_4 = TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ; TYPE_6 . assertTrue ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_4 ) + STRING_3 ) , VAR_4 . METHOD_6 ( ) . contains ( VAR_1 ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) { TYPE_4 < ? > VAR_4 = TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ; TYPE_6 . assertTrue ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_4 ) + STRING_3 ) , VAR_4 . METHOD_6 ( ) . contains ( VAR_1 ) ) ; }\n"}
{"problem": "public java.util.List < java.lang.String > METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 ) { METHOD_2 ( VAR_1 ) ; if ( VAR_1 . equals ( VAR_2 class ) ) { return TYPE_2 . METHOD_1 ( ) ; } if ( VAR_1 . equals ( VAR_3 class ) ) { return TYPE_3 . METHOD_1 ( ) ; } throw METHOD_3 ( VAR_1 ) ; }\n", "fixed": "public java.util.List < java.lang.String > METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 ) { METHOD_2 ( VAR_1 ) ; if ( VAR_1 . equals ( VAR_3 class ) ) { return TYPE_3 . METHOD_1 ( ) ; } if ( VAR_1 . equals ( VAR_2 class ) ) { return TYPE_2 . METHOD_1 ( ) ; } throw METHOD_3 ( VAR_1 ) ; }\n"}
{"problem": "public void METHOD_1 ( java.lang.String field , TYPE_1 data ) { int VAR_1 = field . METHOD_2 ( CHAR_1 ) ; if ( VAR_1 < 0 ) METHOD_3 ( ) ; VAR_2 = field . substring ( 0 , VAR_1 ) ; VAR_3 = field . substring ( ( VAR_1 + 1 ) ) . trim ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String field , TYPE_1 data ) { int VAR_1 = field . METHOD_2 ( CHAR_1 ) ; if ( VAR_1 >= 0 ) { VAR_2 = field . substring ( 0 , VAR_1 ) ; field = field . substring ( ( VAR_1 + 1 ) ) . trim ( ) ; } super . METHOD_1 ( field , data ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void init ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_1 ( VAR_3 class ) . build ( ) ; TYPE_4 VAR_4 = TYPE_5 . METHOD_2 ( ) . METHOD_3 ( TYPE_6 . METHOD_4 ( 0 , INT_1 , 0 ) ) . METHOD_5 ( TYPE_7 . METHOD_6 ( ) . METHOD_7 ( INT_2 ) . METHOD_8 ( INT_3 ) ) . build ( ) ; try { VAR_1 . METHOD_9 ( VAR_2 , VAR_4 ) ; } catch ( TYPE_8 VAR_5 ) { VAR_6 . error ( STRING_1 , VAR_5 ) ; } }\n", "fixed": "public static void init ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_1 ( VAR_3 class ) . build ( ) ; TYPE_4 VAR_4 = TYPE_5 . METHOD_2 ( ) . METHOD_3 ( TYPE_6 . METHOD_4 ( 0 , INT_1 , 0 ) ) . METHOD_5 ( TYPE_7 . METHOD_6 ( ) . METHOD_7 ( INT_3 ) . METHOD_8 ( INT_3 ) ) . build ( ) ; try { VAR_1 . METHOD_9 ( VAR_2 , VAR_4 ) ; } catch ( TYPE_8 VAR_5 ) { VAR_6 . error ( STRING_1 , VAR_5 ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; VAR_1 . init ( VAR_3 ) ; java.lang.String VAR_4 ; if ( ( METHOD_2 ( ) ) != null ) { VAR_4 = METHOD_2 ( ) . getName ( ) ; } else { VAR_4 = null ; } VAR_1 . METHOD_3 ( VAR_4 , null , false ) ; VAR_1 . METHOD_4 ( ) ; this . METHOD_5 ( ) ; return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; VAR_1 . init ( VAR_3 ) ; VAR_1 . METHOD_3 ( METHOD_2 ( ) . getName ( ) , null , false ) ; VAR_1 . METHOD_4 ( ) ; this . METHOD_5 ( ) ; return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.System.out.println ( VAR_1 ) ; if ( METHOD_2 ( ) ) { TYPE_1 p = new TYPE_2 ( ( ( VAR_2 ) + ( ( VAR_3 . METHOD_3 ( ) . VAR_4 ) / INT_1 ) ) , ( ( VAR_5 ) + ( VAR_3 . METHOD_3 ( ) . height ) ) , VAR_6 , ( ( VAR_7 ) - INT_2 ) ) ; VAR_8 . add ( p ) ; TYPE_3 . METHOD_4 ( STRING_1 ) ; VAR_1 = VAR_9 ; } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.System.out.println ( VAR_1 ) ; if ( METHOD_2 ( ) ) { TYPE_1 p = new TYPE_2 ( VAR_2 , ( ( VAR_5 ) - ( VAR_3 . METHOD_3 ( ) . height ) ) , VAR_6 , ( ( - ( VAR_7 ) ) - INT_2 ) ) ; VAR_8 . add ( p ) ; TYPE_3 . METHOD_4 ( STRING_1 ) ; VAR_1 = VAR_9 ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent intent ) { if ( VAR_1 == INT_1 ) { if ( VAR_2 == ( VAR_3 ) ) { for ( int i = 0 ; i < ( VAR_4 . length ) ; i ++ ) { VAR_4 [ i ] = intent . METHOD_2 ( ( STRING_1 + i ) , 0 ) ; TYPE_1 . METHOD_3 ( STRING_2 , java.lang.String . METHOD_4 ( VAR_4 [ i ] ) ) ; } } } new TYPE_2 ( ) . execute ( ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent intent ) { if ( VAR_1 == INT_1 ) { if ( VAR_2 == ( VAR_3 ) ) { for ( int i = 0 ; i < ( VAR_4 . length ) ; i ++ ) { VAR_4 [ i ] = intent . METHOD_2 ( ( STRING_1 + i ) , 0 ) ; } } } new TYPE_2 ( ) . execute ( ) ; }\n"}
{"problem": "public final void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { int id = VAR_1 . getId ( ) ; java.util.HashSet < TYPE_2 > VAR_3 = VAR_4 . get ( id ) ; if ( VAR_3 != null ) { VAR_3 . remove ( VAR_2 ) ; if ( VAR_3 . isEmpty ( ) ) { VAR_5 . METHOD_2 ( VAR_1 ) ; } } }\n", "fixed": "public final void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { int id = VAR_1 . getId ( ) ; java.util.HashSet < TYPE_2 > VAR_3 = VAR_4 . get ( id ) ; if ( VAR_3 != null ) { VAR_3 . remove ( VAR_2 ) ; if ( ( VAR_3 . isEmpty ( ) ) && ( ( VAR_5 ) != null ) ) { VAR_5 . METHOD_2 ( VAR_1 ) ; } } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { try { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , TYPE_2 . toString ( ) , TYPE_3 . toString ( ) ) ; VAR_3 . METHOD_2 ( VAR_4 , VAR_2 , TYPE_2 . toString ( ) , TYPE_3 . toString ( ) ) ; } catch ( java.lang.Exception VAR_5 ) { TYPE_4 . METHOD_3 ( ( STRING_1 + VAR_5 ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { try { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , TYPE_2 . toString ( ) , TYPE_3 . toString ( ) ) ; VAR_3 . METHOD_2 ( VAR_4 , VAR_2 , TYPE_2 . toString ( ) , TYPE_3 . toString ( ) ) ; } catch ( java.lang.Exception VAR_5 ) { TYPE_4 . METHOD_3 ( STRING_1 , VAR_5 ) ; } }\n"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         ret = getMS().updatePartitionColumnStatistics(colStats, partVals);\n         return ret;\n       } finally {\n        endFunction(\"write_partition_column_statistics: \", ret != false);\n       }\n     }", "fixed": "         ret = getMS().updatePartitionColumnStatistics(colStats, partVals);\n         return ret;\n       } finally {\n        endFunction(\"write_partition_column_statistics: \", ret != false, null);\n       }\n     }", "sourceBeforeFix": "endFunction(\"get_column_statistics_by_table: \",statsObj != null)", "sourceAfterFix": "endFunction(\"get_column_statistics_by_table: \",statsObj != null,null)"}
{"problem": "public TYPE_1 METHOD_1 ( ) { if ( ( ( METHOD_2 ( VAR_1 ) ) == null ) || ( ( ( METHOD_2 ( VAR_1 ) ) != null ) && ( ! ( ( METHOD_2 ( VAR_1 ) ) instanceof TYPE_1 ) ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( ) { if ( ( ( METHOD_2 ( VAR_1 ) ) == null ) || ( ( ( METHOD_2 ( VAR_1 ) ) != null ) && ( ! ( ( METHOD_2 ( VAR_1 ) ) instanceof TYPE_1 ) ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return ( ( TYPE_1 ) ( METHOD_2 ( VAR_1 ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String text ) { super . METHOD_1 ( VAR_1 , text ) ; TYPE_2 obj ; try { obj = new TYPE_2 ( text ) ; java.lang.String VAR_2 = obj . getString ( STRING_1 ) ; java.lang.String VAR_3 = obj . getString ( STRING_2 ) ; output ( obj ) ; } catch ( TYPE_3 VAR_4 ) { VAR_4 . METHOD_2 ( ) ; } TYPE_4 . METHOD_3 ( VAR_5 , text ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String text ) { super . METHOD_1 ( VAR_1 , text ) ; TYPE_2 obj ; try { obj = new TYPE_2 ( text ) ; output ( obj ) ; } catch ( TYPE_3 VAR_4 ) { VAR_4 . METHOD_2 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.CharSequence text ) { try { java.lang.String info = STRING_1 ; if ( VAR_1 . METHOD_2 ( text . toString ( ) , ( ( VAR_2 ) == ( VAR_3 ) ) ) ) { info = STRING_2 ; } else { info = STRING_3 ; } TYPE_1 . METHOD_3 ( this , info , VAR_4 ) . show ( ) ; } catch ( java.io.IOException VAR_5 ) { TYPE_1 . METHOD_3 ( this , VAR_5 . METHOD_4 ( ) , VAR_4 ) . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.CharSequence text ) { try { java.lang.String info ; if ( VAR_1 . METHOD_2 ( text . toString ( ) , ( ( VAR_2 ) == ( VAR_3 ) ) ) ) { info = STRING_2 ; } else { info = STRING_3 ; } TYPE_1 . METHOD_3 ( this , info , VAR_4 ) . show ( ) ; } catch ( java.io.IOException VAR_5 ) { TYPE_1 . METHOD_3 ( this , VAR_5 . METHOD_4 ( ) , VAR_4 ) . show ( ) ; } }\n"}
{"problem": "public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_2 = VAR_2 . toLowerCase ( ) ; java.lang.String [ ] VAR_3 = VAR_2 . split ( STRING_1 ) ; for ( java.lang.String VAR_4 : VAR_3 ) { if ( ! ( VAR_5 . contains ( VAR_4 ) ) ) { VAR_6 . add ( VAR_4 ) ; } } java.lang.System.out.println ( VAR_2 ) ; return VAR_6 ; }\n", "fixed": "public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_2 = VAR_2 . toLowerCase ( ) ; java.lang.String [ ] VAR_3 = VAR_2 . split ( STRING_1 ) ; for ( java.lang.String VAR_4 : VAR_3 ) { if ( ! ( VAR_5 . contains ( VAR_4 ) ) ) { VAR_6 . add ( VAR_4 ) ; } } return VAR_6 ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSalesforceEndpointBuilder\n             extends\n                 AdvancedSalesforceEndpointConsumerBuilder, AdvancedSalesforceEndpointProducerBuilder {\n         default SalesforceEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSalesforceEndpointBuilder\n             extends\n                 AdvancedSalesforceEndpointConsumerBuilder, AdvancedSalesforceEndpointProducerBuilder {\n         default SalesforceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "56713d36c65344d448b58f697bb109c882f44dc0", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \tprivate static final Log LOG = LogFactory.getLog(ByteBufferedChannelManager.class);\n\tprivate static final int DEFAULT_NUMBER_OF_READ_BUFFERS = 128;\n\tprivate static final int DEFAULT_NUMBER_OF_WRITE_BUFFERS = 128;\nprivate static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 128 * 1024;\n \tprivate static final boolean DEFAULT_ALLOW_SPILLING = true;", "fixed": " \tprivate static final Log LOG = LogFactory.getLog(ByteBufferedChannelManager.class);\n\tprivate static final int DEFAULT_NUMBER_OF_READ_BUFFERS = 256;\n\tprivate static final int DEFAULT_NUMBER_OF_WRITE_BUFFERS = 256;\nprivate static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 64 * 1024;\n \tprivate static final boolean DEFAULT_ALLOW_SPILLING = true;", "sourceBeforeFix": "DEFAULT_NUMBER_OF_READ_BUFFERS=128", "sourceAfterFix": "DEFAULT_NUMBER_OF_READ_BUFFERS=256"}
{"problem": "private long METHOD_1 ( long VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) == 0 ) { return VAR_1 * ( VAR_3 ) ; } else if ( ( VAR_2 . METHOD_2 ( ) ) == 0 ) { return ( VAR_1 * ( VAR_4 ) ) * ( VAR_3 ) ; } return ( ( VAR_1 * ( VAR_5 ) ) * ( VAR_4 ) ) * ( VAR_3 ) ; }\n", "fixed": "private long METHOD_1 ( long VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) == 0 ) { return VAR_1 * ( VAR_3 ) ; } else if ( ( VAR_2 . METHOD_2 ( ) ) == 1 ) { return ( VAR_1 * ( VAR_4 ) ) * ( VAR_3 ) ; } return ( ( VAR_1 * ( VAR_5 ) ) * ( VAR_4 ) ) * ( VAR_3 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { try { ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) . METHOD_3 ( ) . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_2 ) { } VAR_1 . METHOD_4 ( ) ; } METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { try { ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) . METHOD_3 ( ) . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_2 ) { } try { VAR_1 . METHOD_4 ( ) ; } catch ( java.lang.Exception VAR_2 ) { } } METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "39c42c2dc347f1d8b10311c09e436fd4ade63c4c", "projectName": "libgdx.libgdx", "bugType": "Change Caller in Function Call", "problem": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tconnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "fixed": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tHttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "sourceBeforeFix": "connection.setFollowRedirects(httpRequest.getFollowRedirects())", "sourceAfterFix": "HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . isEmpty ( ) ) || ( ( VAR_3 . METHOD_2 ( ) ) == null ) ) { return ; } final TYPE_2 VAR_4 = ( ( TYPE_2 ) ( VAR_3 . METHOD_2 ( ) ) ) ; java.util.List < TYPE_3 > VAR_5 = VAR_4 . value ; METHOD_3 ( VAR_5 , VAR_4 . METHOD_4 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . isEmpty ( ) ) || ( ( VAR_3 . METHOD_2 ( ) ) == null ) ) { return ; } final TYPE_2 VAR_4 = ( ( TYPE_2 ) ( VAR_3 . METHOD_2 ( ) ) ) ; java.util.List < TYPE_3 > VAR_5 = VAR_4 . value ; METHOD_3 ( VAR_5 ) ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { if ( ( VAR_5 ) == null ) { VAR_6 . info ( STRING_1 , new java.lang.Object [ ] { VAR_1 , VAR_2 , VAR_3 , VAR_4 } ) ; VAR_5 = new TYPE_2 ( ) ; VAR_7 = VAR_2 ; VAR_8 = VAR_3 ; VAR_9 = VAR_1 ; VAR_10 = VAR_4 ; VAR_5 . METHOD_2 ( ) ; } return VAR_5 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 ) { if ( ( VAR_5 ) == null ) { VAR_6 . info ( STRING_1 , new java.lang.Object [ ] { VAR_1 , VAR_2 , VAR_3 } ) ; VAR_5 = new TYPE_2 ( ) ; VAR_7 = VAR_2 ; VAR_8 = VAR_3 ; VAR_9 = VAR_1 ; VAR_5 . METHOD_2 ( ) ; } return VAR_5 ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( STRING_1 , VAR_6 ) ; java.lang.String VAR_7 = VAR_2 . METHOD_5 ( ) . get ( VAR_8 ) ; if ( ! ( TYPE_5 . METHOD_6 ( VAR_7 ) ) ) { VAR_4 . METHOD_4 ( ) . put ( VAR_8 , VAR_7 ) ; } return VAR_4 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( STRING_1 , VAR_6 ) ; return VAR_4 ; }\n"}
{"problem": "public static long METHOD_1 ( ) { java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( true ) ; long size = 0 ; for ( java.lang.String fileName : VAR_1 ) size += TYPE_1 . METHOD_3 ( fileName ) ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 , size ) . METHOD_7 ( ) ; return size ; }\n", "fixed": "public static long METHOD_1 ( ) { java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( true ) ; if ( VAR_1 == null ) return 0 ; long size = 0 ; for ( java.lang.String fileName : VAR_1 ) size += TYPE_1 . METHOD_3 ( fileName ) ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 , size ) . METHOD_7 ( ) ; return size ; }\n"}
{"problem": "public boolean add ( TYPE_1 VAR_1 ) { TYPE_2 values = new TYPE_2 ( ) ; values . put ( STRING_1 , VAR_1 . METHOD_1 ( ) ) ; values . put ( \"name\" , VAR_1 . getName ( ) ) ; values . put ( STRING_2 , VAR_1 . METHOD_2 ( ) ) ; values . put ( STRING_3 , VAR_1 . METHOD_3 ( ) ) ; return ( TYPE_3 . METHOD_4 ( VAR_2 , null , values ) ) == ( - 1 ) ; }\n", "fixed": "public boolean add ( TYPE_1 VAR_1 ) { TYPE_2 values = new TYPE_2 ( ) ; values . put ( STRING_1 , VAR_1 . METHOD_1 ( ) ) ; values . put ( \"name\" , VAR_1 . getName ( ) ) ; values . put ( STRING_2 , VAR_1 . METHOD_2 ( ) ) ; values . put ( STRING_3 , VAR_1 . METHOD_3 ( ) ) ; return ( TYPE_3 . METHOD_4 ( VAR_2 , null , values ) ) != ( - 1 ) ; }\n"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "    * @param consumerAuth Consumer key to use for signature calculation\n    * @param userAuth     Request/access token to use for signature calculation\n    */\n  OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth) {\n     this.consumerAuth = consumerAuth;\n     this.userAuth = userAuth;\n   }", "fixed": "    * @param consumerAuth Consumer key to use for signature calculation\n    * @param userAuth     Request/access token to use for signature calculation\n    */\n  public OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth) {\n     this.consumerAuth = consumerAuth;\n     this.userAuth = userAuth;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * before growing the backing table. */\n \tpublic ObjectSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic ObjectSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) . setValue ( VAR_3 ) ; } else { TYPE_4 . METHOD_7 ( this , STRING_1 , VAR_5 ) . show ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) . setValue ( VAR_3 ) ; } else { TYPE_4 . METHOD_7 ( this , STRING_1 , VAR_5 ) . show ( ) ; } }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"name": "FIND_IN_SORTED.java", "problem": "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { return binsearch(arr, x, mid, end); } else { return mid; } } public static int find_in_sorted(int[] arr, int x) { return binsearch(arr, x, 0, arr.length); } }", "fixed": "public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { return binsearch(arr, x, mid+1, end); } else { return mid; } } public static int find_in_sorted(int[] arr, int x) { return binsearch(arr, x, 0, arr.length); } }", "hint": "Binary Search\nInput:\n    arr: A sorted list of ints", "input": [[3, 4, 5, 5, 5, 5, 6], 5], "output": 3}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { TYPE_3 VAR_2 = new TYPE_3 ( ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; return VAR_2 . METHOD_6 ( TYPE_5 . METHOD_7 ( VAR_3 ) ) ; }\n", "fixed": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; return VAR_2 . METHOD_6 ( TYPE_5 . METHOD_7 ( VAR_3 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( VAR_1 . equals ( VAR_2 ) ) { TYPE_1 . METHOD_2 ( VAR_3 , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; VAR_4 = false ; METHOD_3 ( ) ; METHOD_4 ( VAR_5 ) ; METHOD_4 ( VAR_6 ) ; } }\n", "fixed": "public void METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_3 , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; if ( VAR_1 . equals ( VAR_2 ) ) { VAR_4 = false ; METHOD_3 ( ) ; METHOD_4 ( VAR_5 ) ; METHOD_4 ( VAR_6 ) ; } }\n"}
{"problem": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { METHOD_2 ( STRING_1 ) ; if ( TYPE_1 . equals ( intent . METHOD_3 ( ) ) ) { VAR_1 = false ; if ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ) { if ( VAR_2 . METHOD_5 ( ) ) { METHOD_6 ( ) ; } } } }\n", "fixed": "public void METHOD_1 ( android.content.Context context , android.content.Intent intent ) { if ( TYPE_1 . equals ( intent . METHOD_3 ( ) ) ) { VAR_1 = false ; if ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ) { if ( VAR_2 . METHOD_5 ( ) ) { METHOD_6 ( ) ; } } } }\n"}
{"problem": "public void METHOD_1 ( ) { java.io.File file = new java.io.File ( STRING_1 ) ; if ( ! ( file . METHOD_2 ( ) ) ) METHOD_3 ( file ) ; try ( java.io.InputStream VAR_1 = new java.io.FileInputStream ( file ) ) { VAR_2 = new java.util.Properties ( ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; } catch ( java.io.IOException VAR_3 ) { TYPE_1 . METHOD_4 ( ) . error ( VAR_3 . METHOD_5 ( ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { java.io.File file = new java.io.File ( STRING_1 ) ; if ( ! ( file . METHOD_2 ( ) ) ) METHOD_3 ( file ) ; try ( java.io.InputStream VAR_1 = new java.io.FileInputStream ( file ) ) { VAR_2 = new java.util.Properties ( ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; } catch ( java.io.IOException VAR_3 ) { TYPE_1 . METHOD_4 ( ) . error ( VAR_3 . METHOD_5 ( ) , VAR_3 ) ; } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastTopicEndpointBuilder\n             extends\n                 HazelcastTopicEndpointConsumerBuilder, HazelcastTopicEndpointProducerBuilder {\n         default AdvancedHazelcastTopicEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastTopicEndpointBuilder\n             extends\n                 HazelcastTopicEndpointConsumerBuilder, HazelcastTopicEndpointProducerBuilder {\n         default AdvancedHazelcastTopicEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . contains ( VAR_1 ) ) { VAR_3 . put ( VAR_1 , ( ( VAR_3 . get ( VAR_1 ) ) + 1 ) ) ; } else { VAR_2 . add ( VAR_1 ) ; VAR_3 . put ( VAR_1 , 1 ) ; } if ( VAR_1 != null ) { VAR_4 += VAR_1 . METHOD_2 ( ) ; } return STRING_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . contains ( VAR_1 ) ) { VAR_3 . put ( VAR_1 , ( ( VAR_3 . get ( VAR_1 ) ) + 1 ) ) ; } else { VAR_2 . add ( VAR_1 ) ; VAR_3 . put ( VAR_1 , 1 ) ; } VAR_4 += VAR_1 . METHOD_2 ( ) ; return STRING_1 ; }\n"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "1806dbce41bddc3cbb6741ca87c05f5fe83cb3f4", "projectName": "apache.hive", "bugType": "More Specific If", "problem": "          * as Join conditions\n          */\n         Set<String> dests = qb.getParseInfo().getClauseNames();\n        if ( dests.size() == 1 ) {\n           String dest = dests.iterator().next();\n           ASTNode whereClause = qb.getParseInfo().getWhrForClause(dest);\n           if ( whereClause != null ) {", "fixed": "          * as Join conditions\n          */\n         Set<String> dests = qb.getParseInfo().getClauseNames();\n        if ( dests.size() == 1 && joinTree.getNoOuterJoin()) {\n           String dest = dests.iterator().next();\n           ASTNode whereClause = qb.getParseInfo().getWhrForClause(dest);\n           if ( whereClause != null ) {", "sourceBeforeFix": "dests.size() == 1", "sourceAfterFix": "dests.size() == 1 && joinTree.getNoOuterJoin()"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; VAR_4 . METHOD_4 ( VAR_5 [ VAR_6 ] ) ; TYPE_4 . METHOD_5 ( VAR_7 , ( ( STRING_1 + STRING_2 ) + VAR_6 ) ) ; VAR_3 . replace ( VAR_8 , VAR_4 , null ) ; VAR_3 . commit ( ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; VAR_4 . METHOD_4 ( VAR_5 [ VAR_6 ] ) ; VAR_3 . replace ( VAR_8 , VAR_4 , null ) ; VAR_3 . commit ( ) ; }\n"}
{"problem": "private void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = ( VAR_3 ) + VAR_1 ; if ( ( ( VAR_4 ) + VAR_1 ) >= ( VAR_5 . length ) ) { METHOD_3 ( ) ; } for ( int i = 0 ; i < VAR_1 ; i ++ ) { ( VAR_5 [ ( ( VAR_4 ) + i ) ] ) ++ ; } VAR_4 = ( VAR_4 ) + VAR_1 ; }\n", "fixed": "private void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 = ( VAR_3 ) + VAR_1 ; METHOD_3 ( ( ( VAR_4 ) + VAR_1 ) ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { ( VAR_5 [ ( ( VAR_4 ) + i ) ] ) ++ ; } VAR_4 = ( VAR_4 ) + VAR_1 ; }\n"}
{"problem": "protected java.lang.Long METHOD_1 ( java.net.URL ... VAR_1 ) { long VAR_2 = 0 ; int VAR_3 = 1 ; long time = ( TYPE_1 . METHOD_2 ( ) ) / INT_1 ; long VAR_4 = time + VAR_3 ; boolean VAR_5 = true ; METHOD_3 ( 0 ) ; while ( VAR_5 ) { time = ( TYPE_1 . METHOD_2 ( ) ) / INT_1 ; if ( time >= VAR_4 ) { VAR_4 = time + VAR_3 ; message ( STRING_1 , false ) ; METHOD_3 ( 0 ) ; } } return VAR_2 ; }\n", "fixed": "protected java.lang.Long METHOD_1 ( java.net.URL ... VAR_1 ) { long VAR_2 = 0 ; int VAR_3 = 1 ; long time = ( TYPE_1 . METHOD_2 ( ) ) / INT_1 ; long VAR_4 = time + VAR_3 ; boolean VAR_5 = true ; METHOD_3 ( 0 ) ; while ( VAR_5 ) { time = ( TYPE_1 . METHOD_2 ( ) ) / INT_1 ; if ( time >= VAR_4 ) { VAR_4 = time + VAR_3 ; METHOD_3 ( 0 ) ; } } return VAR_2 ; }\n"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       try {\n         ret = getMS().deleteTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_table: \", ret != false);\n       }\n       return ret;\n    }", "fixed": "       try {\n         ret = getMS().deleteTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_table: \", ret != false, null);\n       }\n       return ret;\n    }", "sourceBeforeFix": "endFunction(\"get_column_statistics_by_partition: \",statsObj != null)", "sourceAfterFix": "endFunction(\"get_column_statistics_by_partition: \",statsObj != null,null)"}
{"problem": "public static java.lang.String format ( long VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; if ( VAR_1 > ( VAR_3 ) ) { VAR_2 = ( java.lang.Math.round ( ( VAR_1 / ( VAR_3 ) ) ) ) + STRING_2 ; } java.lang.String VAR_4 = ( VAR_1 < 0 ) ? STRING_3 : STRING_1 ; return ( VAR_4 + VAR_2 ) + ( VAR_5 . format ( new java.util.Date ( java.lang.Math.abs ( VAR_1 ) ) ) ) ; }\n", "fixed": "public static java.lang.String format ( long VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; if ( VAR_1 >= ( VAR_3 ) ) { VAR_2 = ( java.lang.Math.round ( ( VAR_1 / ( VAR_3 ) ) ) ) + STRING_2 ; } java.lang.String VAR_4 = ( VAR_1 < 0 ) ? STRING_3 : STRING_1 ; return ( VAR_4 + VAR_2 ) + ( VAR_5 . format ( new java.util.Date ( java.lang.Math.abs ( VAR_1 ) ) ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = ( VAR_1 ) + STRING_1 ; VAR_2 . METHOD_2 ( ) ; try { java.lang.Thread . METHOD_3 ( INT_1 ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } VAR_2 . METHOD_2 ( ) ; METHOD_5 ( INT_2 , VAR_4 ) . METHOD_6 ( VAR_1 ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = ( VAR_1 ) + STRING_1 ; try { java.lang.Thread . METHOD_3 ( INT_1 ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } VAR_2 . METHOD_2 ( ) ; try { java.lang.Thread . METHOD_3 ( INT_1 ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } VAR_2 . METHOD_2 ( ) ; METHOD_5 ( INT_2 , VAR_4 ) . METHOD_6 ( VAR_1 ) ; }\n"}
{"project": "Mockito", "bugId": 6, "problem": " public static byte anyByte() {\n      * @return <code>0</code>.\r\n      */\r\n     public static char anyChar() {\r\n        return reportMatcher(Any.ANY).returnChar();\r\n     }\r\n     /**\r", "fixed": " public static byte anyByte() {\n      * @return <code>0</code>.\r\n      */\r\n     public static char anyChar() {\r\n        return reportMatcher(new InstanceOf(Character.class)).returnChar();\r\n     }\r\n     /**\r", "observations": "Instantiates specific objects in place of call do Any.ANY", "repairActions": ["mcParValChange", "objInstAdd", "varReplMc"], "repairPatterns": ["copyPaste", "wrongMethodRef", "wrongVarRef"]}
{"problem": "public synchronized void METHOD_1 ( java.lang.Object VAR_1 ) { try { if ( ( VAR_2 ) != null ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; } } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } }\n", "fixed": "public synchronized void METHOD_1 ( java.lang.Object VAR_1 ) { try { if ( ( ( VAR_2 ) != null ) && ( VAR_1 != null ) ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; } } catch ( java.io.IOException VAR_3 ) { VAR_3 . METHOD_4 ( ) ; } }\n"}
{"problem": "public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( this . VAR_1 ) + STRING_1 ) + ( this . VAR_2 ) ) + STRING_1 ) + ( this . VAR_3 ) ) + ( this . date ) ) + ( this . VAR_4 ) ) + STRING_1 ) + ( this . VAR_5 ) ; }\n", "fixed": "public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( ( this . VAR_1 ) + STRING_1 ) + ( this . VAR_2 ) ) + STRING_1 ) + ( this . VAR_3 ) ) + STRING_1 ) + ( this . date ) ) + STRING_1 ) + ( this . VAR_4 ) ) + STRING_1 ) + ( this . VAR_5 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = VAR_2 ; METHOD_3 ( ) ; assertEquals ( VAR_1 , VAR_3 ) ; METHOD_4 ( ) ; VAR_1 = VAR_2 ; METHOD_5 ( STRING_1 ) ; METHOD_3 ( ) ; assertEquals ( VAR_1 , VAR_4 ) ; VAR_1 = VAR_2 ; METHOD_5 ( STRING_2 ) ; METHOD_3 ( ) ; assertEquals ( VAR_1 , VAR_5 ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = VAR_2 ; METHOD_3 ( ) ; assertEquals ( VAR_1 , VAR_3 ) ; METHOD_4 ( ) ; VAR_1 = VAR_2 ; METHOD_5 ( STRING_1 ) ; METHOD_3 ( ) ; assertEquals ( VAR_1 , VAR_4 ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; TYPE_2 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_2 . METHOD_1 ( STRING_4 ) ; java.lang.String VAR_3 = TYPE_2 . METHOD_3 ( STRING_2 ) ; TYPE_2 . METHOD_4 ( VAR_3 , ( STRING_2 + STRING_5 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; assertEquals ( STRING_1 , TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 ) ) ; TYPE_2 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_2 . METHOD_1 ( STRING_4 ) ; }\n"}
{"fixCommitSHA1": "c52a15b7ae80a8f3619791df1577774b374ac4d4", "projectName": "wildfly.wildfly", "bugType": "More Specific If", "problem": "                 }\n             }\n         }\n        if (securityDomain != null)\n             description.setSecurityDomain(securityDomain);\n        else if (globalSecurityDomain != null)\n             description.setSecurityDomain(globalSecurityDomain);\n     }", "fixed": "                 }\n             }\n         }\n        if (securityDomain != null && ! securityDomain.isEmpty())\n             description.setSecurityDomain(securityDomain);\n        else if (globalSecurityDomain != null && !globalSecurityDomain.isEmpty())\n             description.setSecurityDomain(globalSecurityDomain);\n     }", "sourceBeforeFix": "securityDomain != null", "sourceAfterFix": "securityDomain != null && !securityDomain.isEmpty()"}
{"fixCommitSHA1": "8616612734924c0a8a9781aed94669c866b12981", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (EJBException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "fixed": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (IllegalStateException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "sourceBeforeFix": "EJBException nsee", "sourceAfterFix": "IllegalStateException nsee"}
{"fixCommitSHA1": "89ed905358dd09d005398028198cc388b9b59a94", "projectName": "square.javapoet", "bugType": "Wrong Function Name", "problem": "   }\n   @Test public void eolComment() throws IOException {\n    javaWriter.emitSingleLineCOmment(\"foo\");\nassertCode(\"\n   }", "fixed": "   }\n   @Test public void eolComment() throws IOException {\n    javaWriter.emitSingleLineComment(\"foo\");\nassertCode(\"\n   }", "sourceBeforeFix": "javaWriter.emitSingleLineCOmment(\"foo\")", "sourceAfterFix": "javaWriter.emitSingleLineComment(\"foo\")"}
{"problem": "public java.util.Collection < TYPE_1 > METHOD_1 ( ) { final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 . add ( VAR_3 ) ; } if ( ( VAR_4 ) != null ) { VAR_1 . add ( VAR_4 ) ; } return VAR_1 ; }\n", "fixed": "public java.util.Collection < TYPE_1 > METHOD_1 ( ) { final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 . add ( VAR_2 ) ; } if ( ( VAR_4 ) != null ) { VAR_1 . add ( VAR_4 ) ; } return VAR_1 ; }\n"}
{"fixCommitSHA1": "3b47b9b23bf3f10d124f26f37dff3245fe09ec56", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n                 }\n             }", "fixed": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n             }", "sourceBeforeFix": "coreThreads.asString()", "sourceAfterFix": "queueLength.asString()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PgEventEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPgEventEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PgEventEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPgEventEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void main ( java.lang.String [ ] args ) throws java.io.IOException { java.io.FileOutputStream out ; TYPE_1 p ; try { out = new java.io.FileOutputStream ( STRING_1 ) ; p = new TYPE_1 ( out ) ; p . METHOD_1 ( STRING_2 ) ; p . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_1 ) { } }\n", "fixed": "public static void main ( java.lang.String [ ] args ) throws java.io.IOException { java.io.FileOutputStream out ; TYPE_1 p ; try { out = new java.io.FileOutputStream ( STRING_1 ) ; p = new TYPE_1 ( out ) ; p . METHOD_1 ( STRING_2 ) ; p . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_1 ) { throw new java.io.IOException ( VAR_1 ) ; } }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( ( VAR_3 ) != null ) && ( ! ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ) return false ; if ( ! ( VAR_4 . METHOD_4 ( ) ) ) return true ; double VAR_5 = TYPE_3 . METHOD_5 ( VAR_6 , VAR_7 ) ; double VAR_8 = TYPE_3 . METHOD_5 ( VAR_9 , VAR_10 ) ; return VAR_4 . contains ( VAR_5 , VAR_8 ) ; }\n", "fixed": "protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( ( VAR_3 ) != null ) && ( ! ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ) return false ; if ( ! ( VAR_4 . METHOD_4 ( ) ) ) return true ; double VAR_5 = TYPE_3 . METHOD_5 ( VAR_6 , VAR_7 ) ; double VAR_8 = TYPE_3 . METHOD_5 ( VAR_9 , VAR_10 ) ; return VAR_4 . contains ( VAR_5 , VAR_8 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( ) throws java.io.IOException { VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_1 ) ) ; boolean VAR_5 = ! ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; if ( ! VAR_5 ) { VAR_6 . METHOD_6 ( true , TYPE_1 . METHOD_7 ( VAR_2 . METHOD_8 ( VAR_1 ) ) ) ; } return VAR_5 ; }\n", "fixed": "public boolean METHOD_1 ( ) throws java.io.IOException { VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_1 ) ) ; boolean VAR_5 = VAR_2 . METHOD_5 ( VAR_1 ) ; if ( ! VAR_5 ) { VAR_6 . METHOD_6 ( true , TYPE_1 . METHOD_7 ( VAR_2 . METHOD_8 ( VAR_1 ) ) ) ; } return ! VAR_5 ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 , new TYPE_2 ( 0 , 1 ) ) ; if ( ( VAR_2 == null ) || ( ( VAR_2 . size ( ) ) == 0 ) ) { return STRING_1 ; } return VAR_3 . METHOD_2 ( VAR_1 , new TYPE_2 ( 0 , 1 ) ) . get ( 0 ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 , new TYPE_2 ( 0 , 1 ) ) ; if ( ( VAR_2 == null ) || ( ( VAR_2 . size ( ) ) == 0 ) ) { return null ; } return VAR_3 . METHOD_2 ( VAR_1 , new TYPE_2 ( 0 , 1 ) ) . get ( 0 ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static android.content.Intent METHOD_1 ( java.lang.String url , java.lang.String title , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { android.content.Intent intent = new android.content.Intent ( VAR_3 ) ; intent . METHOD_2 ( STRING_1 ) ; intent . METHOD_3 ( VAR_4 , url ) ; intent . METHOD_3 ( VAR_5 , title ) ; intent . METHOD_3 ( STRING_2 , VAR_1 ) ; intent . METHOD_3 ( STRING_3 , VAR_2 ) ; return intent ; }\n", "fixed": "public static android.content.Intent METHOD_1 ( java.lang.String url , java.lang.String title , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { android.content.Intent intent = new android.content.Intent ( VAR_3 ) ; intent . METHOD_2 ( STRING_1 ) ; intent . METHOD_3 ( VAR_4 , url ) ; if ( title != null ) intent . METHOD_3 ( VAR_5 , title ) ; if ( VAR_1 != null ) intent . METHOD_3 ( STRING_2 , VAR_1 ) ; if ( VAR_2 != null ) intent . METHOD_3 ( STRING_3 , VAR_2 ) ; return intent ; }\n"}
{"problem": "public static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , long VAR_3 ) throws java.lang.Exception { TYPE_2 VAR_4 = VAR_1 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_6 , VAR_2 ) ; if ( TYPE_3 . METHOD_5 ( ) ) { TYPE_3 . info ( STRING_1 ) ; } try { VAR_7 = new TYPE_4 ( VAR_4 , true ) ; VAR_7 . METHOD_6 ( VAR_1 , true ) ; } catch ( java.lang.Exception VAR_8 ) { throw VAR_8 ; } }\n", "fixed": "public static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , long VAR_3 ) throws java.lang.Exception { TYPE_2 VAR_4 = VAR_1 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_6 , VAR_2 ) ; if ( TYPE_3 . METHOD_5 ( ) ) { TYPE_3 . info ( STRING_1 ) ; } try { VAR_7 = new TYPE_4 ( VAR_4 , true ) ; VAR_7 . METHOD_6 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_8 ) { throw VAR_8 ; } }\n"}
{"problem": "private void METHOD_1 ( ) { for ( int i = ( VAR_1 . length ) - 1 ; i >= 0 ; i -- ) { TYPE_1 VAR_2 = new TYPE_1 ( getContext ( ) ) ; VAR_2 . setText ( VAR_1 [ i ] ) ; VAR_2 . METHOD_2 ( VAR_3 [ i ] ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; TYPE_2 params = new TYPE_2 ( VAR_5 , VAR_6 ) ; VAR_7 . METHOD_4 ( VAR_2 , 0 , params ) ; } }\n", "fixed": "private void METHOD_1 ( ) { for ( int i = ( VAR_1 . size ( ) ) - 1 ; i >= 0 ; i -- ) { TYPE_1 VAR_2 = new TYPE_1 ( getContext ( ) ) ; VAR_2 . setText ( VAR_1 . get ( i ) ) ; VAR_2 . METHOD_2 ( VAR_3 . get ( i ) ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; TYPE_2 params = new TYPE_2 ( VAR_5 , VAR_6 ) ; VAR_7 . METHOD_4 ( VAR_2 , 0 , params ) ; } }\n"}
{"problem": "public void set ( TYPE_1 < ? > value ) { TYPE_2 data = new TYPE_2 ( this . VAR_1 . getName ( value . getName ( ) ) , value . getValue ( ) , value . METHOD_1 ( ) . getTime ( ) ) ; this . buffer . add ( data ) ; if ( ( this . buffer . size ( ) ) >= ( this . VAR_2 ) ) { METHOD_2 ( ) ; } }\n", "fixed": "public void set ( TYPE_1 < ? > value ) { TYPE_2 data = new TYPE_2 ( this . VAR_1 . getName ( value . getName ( ) ) , value . getValue ( ) , value . METHOD_1 ( ) . getTime ( ) ) ; synchronized ( this . buffer ) { this . buffer . add ( data ) ; if ( ( this . buffer . size ( ) ) >= ( this . VAR_2 ) ) { METHOD_2 ( ) ; } } }\n"}
{"fixCommitSHA1": "150cc0a5beacbec117eb141846a4c6f1aeab5847", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "                     invokeAtmosphereHandler(r);\n                     try {\n                        r.getResponse().sendError(503);\n                         r.getResponse().getOutputStream().close();\n                     } catch (Throwable t) {\n                         try {", "fixed": "                     invokeAtmosphereHandler(r);\n                     try {\n                        r.getResponse().sendError(503, \"Remotely closed\");\n                         r.getResponse().getOutputStream().close();\n                     } catch (Throwable t) {\n                         try {", "sourceBeforeFix": "r.getResponse().sendError(503)", "sourceAfterFix": "r.getResponse().sendError(503,\"Remotely closed\")"}
{"problem": "public void METHOD_1 ( int VAR_1 ) { this . METHOD_2 ( ) ; this . add ( VAR_2 ) ; this . METHOD_3 ( new TYPE_1 ( INT_1 , 0 ) ) ; VAR_3 . setText ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; this . add ( VAR_3 ) ; this . add ( VAR_4 ) ; if ( VAR_1 > 0 ) { this . add ( VAR_5 ) ; } this . add ( VAR_6 ) ; this . METHOD_4 ( ) ; this . METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( int VAR_1 ) { this . METHOD_2 ( ) ; this . add ( VAR_2 ) ; this . METHOD_3 ( new TYPE_1 ( INT_1 , 0 ) ) ; VAR_3 . setText ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; this . add ( VAR_3 ) ; this . add ( VAR_4 ) ; if ( VAR_1 < 0 ) { this . add ( VAR_5 ) ; } this . add ( VAR_6 ) ; this . METHOD_4 ( ) ; this . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "30315bc85fc46b6fa08ededecdf1b9ebc781c7d1", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "         this.sampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n         this.sampledContinuationGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_CONTINUATION, UNSUPPORTED_GAUGE);\r\n         this.unsampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n        this.unsampledContinuationGuage = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n     }\r\n     @Override\r", "fixed": "         this.sampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n         this.sampledContinuationGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_CONTINUATION, UNSUPPORTED_GAUGE);\r\n         this.unsampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n        this.unsampledContinuationGuage = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_CONTINUATION, UNSUPPORTED_GAUGE);\r\n     }\r\n     @Override\r", "sourceBeforeFix": "MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_NEW,UNSUPPORTED_GAUGE)", "sourceAfterFix": "MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_CONTINUATION,UNSUPPORTED_GAUGE)"}
{"problem": "public android.view.View getView ( int position , android.view.View VAR_1 , TYPE_1 VAR_2 ) { android.view.View view ; if ( VAR_1 == null ) { TYPE_2 VAR_3 = ( ( TYPE_2 ) ( context . METHOD_1 ( VAR_4 ) ) ) ; view = VAR_3 . METHOD_2 ( VAR_5 , VAR_2 ) ; } else { view = VAR_1 ; } java.lang.String VAR_6 = VAR_7 . get ( position ) ; TYPE_3 VAR_8 = ( ( TYPE_3 ) ( view . METHOD_3 ( VAR_9 ) ) ) ; VAR_8 . setText ( VAR_6 ) ; return view ; }\n", "fixed": "public android.view.View getView ( int position , android.view.View VAR_1 , TYPE_1 VAR_2 ) { android.view.View view ; if ( VAR_1 == null ) { view = android.view.View . METHOD_2 ( context , VAR_5 , null ) ; } else { view = VAR_1 ; } java.lang.String VAR_6 = VAR_7 . get ( position ) ; TYPE_3 VAR_8 = ( ( TYPE_3 ) ( view . METHOD_3 ( VAR_9 ) ) ) ; VAR_8 . setText ( VAR_6 ) ; return view ; }\n"}
{"problem": "public static TYPE_1 METHOD_1 ( int VAR_1 ) { java.util.Random VAR_2 = new java.util.Random ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( ) , VAR_2 . METHOD_2 ( VAR_1 ) , TYPE_3 . METHOD_3 ( INT_1 , 0 , VAR_1 ) ) ; boolean VAR_4 = true ; for ( int source : VAR_5 ) { if ( ( VAR_6 ) == source ) { VAR_4 = false ; break ; } } if ( ! VAR_4 ) VAR_3 = TYPE_3 . METHOD_1 ( VAR_1 ) ; return VAR_3 ; }\n", "fixed": "public static TYPE_1 METHOD_1 ( java.util.Random VAR_2 , int VAR_1 ) { TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( ) , VAR_2 . METHOD_2 ( VAR_1 ) , TYPE_3 . METHOD_3 ( VAR_2 , INT_1 , 0 , VAR_1 ) ) ; boolean VAR_4 = true ; for ( int source : VAR_5 ) { if ( ( VAR_6 ) == source ) { VAR_4 = false ; break ; } } if ( ! VAR_4 ) VAR_3 = TYPE_3 . METHOD_1 ( VAR_2 , VAR_1 ) ; return VAR_3 ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"problem": "public void METHOD_1 ( java.lang.String path , java.lang.Double type ) { if ( ! ( getConfig ( ) . contains ( path ) ) ) { getConfig ( ) . METHOD_2 ( path , type ) ; getConfig ( ) . METHOD_3 ( ) . METHOD_4 ( true ) ; } METHOD_5 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String path , java.lang.Double type ) { if ( ! ( p . getConfig ( ) . contains ( path ) ) ) { p . getConfig ( ) . METHOD_2 ( path , type ) ; p . getConfig ( ) . METHOD_3 ( ) . METHOD_4 ( true ) ; } p . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "11fc33161f47544de5d2c50444340438f09a5b82", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\t}\r\n \t\tpublic boolean hasChild (String name) {\r\n\t\t\tif (attributes == null) return false;\r\n \t\t\treturn getChildByName(name) != null;\r\n \t\t}\r", "fixed": " \t\t}\r\n \t\tpublic boolean hasChild (String name) {\r\n\t\t\tif (children == null) return false;\r\n \t\t\treturn getChildByName(name) != null;\r\n \t\t}\r", "sourceBeforeFix": "attributes == null", "sourceAfterFix": "children == null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { int VAR_1 = TYPE_1 . METHOD_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , VAR_3 ) ; int VAR_4 = VAR_2 . METHOD_2 ( ) ; if ( VAR_4 == 1 ) java.lang.System.out.println ( STRING_1 ) ; else if ( VAR_4 == INT_1 ) java.lang.System.out.println ( STRING_2 ) ; else java.lang.System.err.println ( STRING_3 ) ; }\n", "fixed": "public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { int VAR_4 = 0 ; int VAR_1 = TYPE_1 . METHOD_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , VAR_3 ) ; if ( VAR_1 == 1 ) { } else { VAR_4 = VAR_2 . METHOD_2 ( ) ; } if ( VAR_4 == 1 ) java.lang.System.out.println ( STRING_1 ) ; else if ( VAR_4 == INT_1 ) java.lang.System.out.println ( STRING_2 ) ; }\n"}
{"problem": "public boolean handle ( java.lang.Object data ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( data ) ) ; if ( TYPE_2 . METHOD_1 ( VAR_1 ) ) { METHOD_2 ( VAR_1 ) ; } else { TYPE_2 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . getName ( ) ) ; } return true ; }\n", "fixed": "public boolean handle ( java.lang.Object data ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( data ) ) ; if ( TYPE_2 . METHOD_1 ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( ) . getName ( ) ) ) { METHOD_2 ( VAR_1 ) ; } return true ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 key , TYPE_2 VAR_1 ) { java.util.HashMap < TYPE_2 , TYPE_3 > VAR_2 = VAR_3 . get ( key ) ; if ( ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) ) { return ; } for ( TYPE_2 VAR_4 : VAR_2 . METHOD_3 ( ) ) { if ( ! ( VAR_5 . METHOD_4 ( VAR_1 , VAR_4 ) ) ) { VAR_2 . get ( VAR_4 ) . METHOD_5 ( ) ; } } }\n", "fixed": "private void METHOD_1 ( TYPE_1 key , TYPE_2 VAR_1 ) { java.util.HashMap < TYPE_2 , TYPE_3 > VAR_2 = VAR_3 . get ( key ) ; if ( VAR_2 == null ) { return ; } for ( TYPE_2 VAR_4 : VAR_2 . METHOD_3 ( ) ) { if ( ! ( VAR_5 . METHOD_4 ( VAR_1 , VAR_4 ) ) ) { VAR_2 . get ( VAR_4 ) . METHOD_5 ( ) ; } } }\n"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Caller in Function Call", "problem": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "fixed": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "sourceBeforeFix": "SOURCE.deref()", "sourceAfterFix": "SOURCE_PATH.deref()"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; VAR_1 . METHOD_4 ( INT_2 ) ; VAR_1 . METHOD_5 ( ( - INT_3 ) ) ; TYPE_2 . METHOD_6 ( VAR_2 . METHOD_7 ( VAR_3 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; VAR_1 . METHOD_4 ( INT_2 ) ; VAR_1 . METHOD_5 ( ( - INT_3 ) ) ; TYPE_2 . METHOD_6 ( VAR_2 . METHOD_7 ( VAR_1 ) ) ; }\n"}
{"problem": "void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.util.ArrayList < TYPE_3 > VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 , int VAR_6 ) { if ( VAR_7 ) { VAR_7 = false ; if ( VAR_8 ) { VAR_9 . METHOD_2 ( ) ; VAR_10 . METHOD_3 ( ) ; VAR_11 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , null , VAR_9 , 0 ) ; } } }\n", "fixed": "void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.util.ArrayList < TYPE_3 > VAR_3 , TYPE_5 VAR_5 ) { if ( VAR_7 ) { VAR_7 = false ; if ( VAR_8 ) { VAR_9 . METHOD_2 ( ) ; VAR_10 . METHOD_3 ( ) ; VAR_11 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , this , VAR_5 , 0 ) ; } } }\n"}
{"fixCommitSHA1": "2dd62979bbcb4172fc801c918a750e6fcc4ec648", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n            \"path\", indexOutURI.getPath()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());", "fixed": "       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n            \"path\", indexOutURI.toString()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());", "sourceBeforeFix": "indexOutURI.getPath()", "sourceAfterFix": "indexOutURI.toString()"}
{"problem": "public void METHOD_1 ( ) { int VAR_1 = 0 ; for ( java.util.Map.Entry < TYPE_1 , TYPE_2 > VAR_2 : VAR_3 . METHOD_2 ( ) ) { TYPE_2 p = VAR_2 . getValue ( ) ; if ( VAR_1 == 0 ) { VAR_1 = p . METHOD_3 ( ) ; } else { if ( ( p . METHOD_3 ( ) ) < VAR_1 ) { VAR_1 = p . METHOD_3 ( ) ; } } } VAR_4 = VAR_1 ; }\n", "fixed": "public void METHOD_1 ( ) { java.lang.Double VAR_1 = 0.0 ; for ( java.util.Map.Entry < TYPE_1 , TYPE_2 > VAR_2 : VAR_3 . METHOD_2 ( ) ) { TYPE_2 p = VAR_2 . getValue ( ) ; if ( VAR_1 == 0.0 ) { VAR_1 = p . METHOD_3 ( ) ; } else { if ( ( p . METHOD_3 ( ) ) < VAR_1 ) { VAR_1 = p . METHOD_3 ( ) ; } } } VAR_4 = VAR_1 ; }\n"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( VAR_1 == ( VAR_4 ) ) { final TYPE_4 VAR_5 = VAR_6 . METHOD_2 ( VAR_7 ) ; TYPE_5 . METHOD_3 ( ( VAR_5 instanceof TYPE_6 ) , STRING_1 ) ; METHOD_4 ( ( ( TYPE_6 ) ( VAR_5 ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( VAR_1 == ( VAR_4 ) ) { final TYPE_4 VAR_5 = VAR_6 . METHOD_2 ( VAR_7 ) ; if ( VAR_5 instanceof TYPE_6 ) { METHOD_4 ( ( ( TYPE_6 ) ( VAR_5 ) ) ) ; } } }\n"}
{"problem": "public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; assertNotNull ( VAR_1 ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_3 ( 1 ) ; assertEquals ( VAR_1 . get ( 0 ) , VAR_3 ) ; int VAR_4 = VAR_2 . METHOD_4 ( 1 , INT_1 , STRING_1 ) . METHOD_5 ( ) ; assertEquals ( VAR_1 . size ( ) , VAR_4 ) ; }\n", "fixed": "public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; assertNotNull ( VAR_1 ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_3 ( 1 ) ; assertEquals ( VAR_1 . get ( 0 ) , VAR_3 ) ; int VAR_4 = VAR_2 . METHOD_4 ( 1 , INT_1 , STRING_1 , 1 ) . METHOD_5 ( ) ; assertEquals ( VAR_1 . size ( ) , VAR_4 ) ; }\n"}
{"problem": "public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( ) { final java.util.Map < java.lang.String , TYPE_1 > VAR_1 = new java.util.HashMap < > ( ) ; METHOD_2 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 ) ; return VAR_1 ; }\n", "fixed": "public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( ) { final java.util.Map < java.lang.String , TYPE_1 > VAR_1 = new java.util.HashMap < > ( ) ; METHOD_2 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_12 , STRING_13 ) ; return VAR_1 ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 response = VAR_1 . METHOD_1 ( STRING_1 , STRING_1 ) ; TYPE_2 . assertTrue ( ( ( response . METHOD_3 ( ) ) == INT_1 ) ) ; response = VAR_1 . METHOD_1 ( STRING_2 , STRING_1 ) ; TYPE_2 . assertTrue ( ( ( response . METHOD_3 ( ) ) == INT_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 response = VAR_1 . METHOD_1 ( STRING_1 , STRING_1 ) ; TYPE_2 . assertTrue ( ( ( response . METHOD_3 ( ) ) == INT_1 ) ) ; response = VAR_1 . METHOD_1 ( STRING_2 , STRING_1 ) ; TYPE_2 . assertTrue ( ( ( response . METHOD_3 ( ) ) != INT_1 ) ) ; }\n"}
{"problem": "public static void main ( java.lang.String [ ] args ) throws java.io.IOException { TYPE_1 out = new TYPE_1 ( STRING_1 ) ; TYPE_2 VAR_1 = new TYPE_2 ( STRING_2 ) ; boolean VAR_2 = true ; VAR_1 . METHOD_1 ( ) ; while ( VAR_2 ) { out . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( ) ; out . METHOD_4 ( ) ; VAR_2 = false ; } }\n", "fixed": "public static void main ( java.lang.String [ ] args ) throws java.io.IOException { TYPE_1 out = new TYPE_1 ( STRING_1 ) ; TYPE_2 VAR_1 = new TYPE_2 ( STRING_2 ) ; boolean VAR_2 = true ; VAR_1 . METHOD_1 ( ) ; while ( VAR_2 ) { VAR_1 . METHOD_3 ( ) ; out . METHOD_4 ( ) ; VAR_2 = false ; } }\n"}
{"problem": "private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Map < java.lang.String , TYPE_1 > result = new TYPE_2 < > ( ) ; if ( VAR_1 != null ) { for ( TYPE_1 item : VAR_1 ) { result . put ( item . getId ( ) , item ) ; } } return result ; }\n", "fixed": "private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Map < java.lang.String , TYPE_1 > result = new TYPE_2 < > ( 0 ) ; if ( VAR_1 != null ) { result = new TYPE_2 ( VAR_1 . size ( ) ) ; for ( TYPE_1 item : VAR_1 ) { result . put ( item . getId ( ) , item ) ; } } return result ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 t ) { TYPE_1 [ ] VAR_1 = VAR_2 . get ( t . METHOD_2 ( ) ) ; if ( VAR_1 != null ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_1 [ i ] . setState ( ( ( VAR_1 [ i ] ) == t ) ) ; VAR_3 . METHOD_3 ( t . METHOD_2 ( ) , t . getName ( ) ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 t ) { TYPE_1 [ ] VAR_1 = VAR_2 . get ( t . METHOD_2 ( ) ) ; if ( VAR_1 != null ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_1 [ i ] . setState ( ( ( VAR_1 [ i ] ) == t ) ) ; } } VAR_3 . METHOD_3 ( t . METHOD_2 ( ) , t . getName ( ) ) ; }\n"}
{"problem": "public static java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { java.lang.String VAR_4 = STRING_1 ; java.lang.String VAR_5 = STRING_1 ; java.lang.String VAR_6 = STRING_1 ; if ( VAR_1 < INT_1 ) VAR_5 = \"0\" + VAR_1 ; else VAR_5 = STRING_1 + VAR_1 ; if ( VAR_2 < INT_1 ) VAR_6 = \"0\" + VAR_2 ; else VAR_6 = STRING_1 + VAR_2 ; VAR_4 = ( ( ( VAR_5 + STRING_2 ) + VAR_6 ) + STRING_2 ) + VAR_3 ; return VAR_4 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { java.lang.String VAR_4 = STRING_1 ; java.lang.String VAR_5 = STRING_1 ; java.lang.String VAR_6 = STRING_1 ; if ( VAR_1 < INT_1 ) VAR_5 = \"0\" + VAR_1 ; else VAR_5 = STRING_1 + VAR_1 ; if ( VAR_2 < INT_1 ) VAR_6 = \"0\" + ( VAR_2 + 1 ) ; else VAR_6 = STRING_1 + ( VAR_2 + 1 ) ; VAR_4 = ( ( ( VAR_5 + STRING_2 ) + VAR_6 ) + STRING_2 ) + VAR_3 ; return VAR_4 ; }\n"}
{"fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "projectName": "netty.netty", "bugType": "Change Caller in Function Call", "problem": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + data.limit());\n         }\n         dst.put(tmpBuf);\n     }", "fixed": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + buffer.limit());\n         }\n         dst.put(tmpBuf);\n     }", "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}
{"problem": "private int METHOD_1 ( int index ) { int VAR_1 = 0 ; int VAR_2 = - 1 ; for ( TYPE_1 a : TYPE_2 . METHOD_2 ( ) ) { VAR_1 ++ ; VAR_2 ++ ; int VAR_3 = a . METHOD_3 ( ) ; VAR_2 += VAR_3 ; if ( ( index >= ( VAR_2 - VAR_3 ) ) && ( index <= VAR_2 ) ) { return VAR_1 ; } } java.lang.System.out.println ( STRING_1 ) ; return - 1 ; }\n", "fixed": "private int METHOD_1 ( int index ) { int VAR_1 = - 1 ; int VAR_2 = - 1 ; for ( TYPE_1 a : TYPE_2 . METHOD_2 ( ) ) { VAR_1 ++ ; VAR_2 ++ ; int VAR_3 = a . METHOD_3 ( ) ; VAR_2 += VAR_3 ; if ( ( index >= ( VAR_2 - VAR_3 ) ) && ( index <= VAR_2 ) ) { return VAR_1 ; } } java.lang.System.out.println ( STRING_1 ) ; return - 1 ; }\n"}
{"problem": "public boolean METHOD_1 ( ) { if ( ! ( VAR_1 ) ) return false ; if ( ( VAR_2 . getSelection ( ) . VAR_3 ) || ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) { TYPE_1 . METHOD_4 ( VAR_2 . METHOD_2 ( ) , VAR_4 ) ; return true ; } else { return VAR_1 = false ; } }\n", "fixed": "public boolean METHOD_1 ( ) { if ( ! ( VAR_1 ) ) return false ; if ( ( VAR_2 . getSelection ( ) . VAR_3 ) || ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) { return true ; } else { TYPE_1 . METHOD_4 ( VAR_2 . METHOD_2 ( ) , VAR_4 ) ; return VAR_1 = false ; } }\n"}
{"problem": "public void METHOD_1 ( java.lang.String output ) { java.lang.System.out.println ( output ) ; if ( output . equals ( STRING_1 ) ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . setText ( STRING_2 ) ; VAR_3 . setText ( ( STRING_3 + VAR_4 ) ) ; } else if ( output . equals ( STRING_4 ) ) { VAR_1 . METHOD_2 ( VAR_5 ) ; VAR_1 . setText ( STRING_5 ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String output ) { if ( output . equals ( STRING_1 ) ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . setText ( STRING_2 ) ; VAR_3 . setText ( ( STRING_3 + VAR_4 ) ) ; } else if ( output . equals ( STRING_4 ) ) { VAR_1 . METHOD_2 ( VAR_5 ) ; VAR_1 . setText ( STRING_5 ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = new java.util.HashMap < > ( ) ; VAR_1 . put ( STRING_1 , 0 ) ; VAR_1 . put ( STRING_2 , 0 ) ; VAR_1 . put ( STRING_3 , 0 ) ; VAR_1 . put ( STRING_4 , 0 ) ; VAR_1 . put ( STRING_5 , 0 ) ; VAR_1 . put ( STRING_6 , 0 ) ; VAR_1 . put ( STRING_7 , 0 ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = new java.util.HashMap < > ( ) ; VAR_1 . put ( STRING_1 , 0 ) ; VAR_1 . put ( STRING_2 , 0 ) ; VAR_1 . put ( STRING_3 , 0 ) ; VAR_1 . put ( STRING_4 , 0 ) ; VAR_1 . put ( STRING_7 , 0 ) ; VAR_1 . put ( STRING_5 , 0 ) ; VAR_1 . put ( STRING_6 , 0 ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { VAR_1 = VAR_3 ; } else if ( ( VAR_1 ) == ( VAR_3 ) ) { VAR_1 = VAR_2 ; } y = ( y ) + ( height ) ; VAR_4 = ( VAR_4 ) * FLOAT_1 ; }\n", "fixed": "public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { VAR_1 = VAR_3 ; } else if ( ( VAR_1 ) == ( VAR_3 ) ) { VAR_1 = VAR_2 ; } y = ( y ) + ( height ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 p ) throws TYPE_2 { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 ) != p ) ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . info ( ( STRING_1 + ( VAR_1 ) ) ) ; } throw new TYPE_3 ( STRING_2 ) ; } else { VAR_1 = p ; return ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 p ) throws TYPE_2 { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 ) != p ) ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . info ( ( STRING_1 + ( VAR_1 ) ) ) ; } throw new TYPE_3 ( STRING_2 ) ; } else { VAR_1 = p ; } }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 < java.util.Set < TYPE_2 > > VAR_3 ) { TYPE_1 VAR_4 = VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_1 = VAR_4 ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 < java.util.Set < TYPE_2 > > VAR_3 ) { VAR_1 = VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedChatScriptEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ChatScriptEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedChatScriptEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ChatScriptEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 class ) ; TYPE_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_3 . METHOD_6 ( ) ) . METHOD_5 ( VAR_2 ) ; return VAR_3 ; }\n", "fixed": "private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_4 class ) ; METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . METHOD_5 ( VAR_1 ) ; METHOD_3 ( VAR_3 . METHOD_6 ( ) ) . METHOD_5 ( VAR_2 ) ; return VAR_3 ; }\n"}
{"problem": "public boolean METHOD_1 ( ) throws java.io.IOException , TYPE_1 , TYPE_2 { if ( VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 ) ; return false ; } if ( VAR_3 . METHOD_3 ( VAR_4 ) ) { return true ; } VAR_2 . info ( STRING_2 , this . getClass ( ) . METHOD_4 ( ) ) ; return super . METHOD_1 ( ) ; }\n", "fixed": "public boolean METHOD_1 ( ) throws java.io.IOException , TYPE_1 , TYPE_2 { if ( VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 ) ; return false ; } if ( ! ( VAR_3 . METHOD_3 ( VAR_4 ) ) ) { VAR_2 . info ( STRING_2 , this . getClass ( ) . METHOD_4 ( ) ) ; return false ; } return super . METHOD_1 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( java.io.InputStream VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 ; if ( VAR_2 != null ) VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; else VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) ; byte [ ] VAR_6 ; if ( VAR_2 != null ) VAR_6 = VAR_4 . METHOD_4 ( VAR_2 ) ; else VAR_6 = VAR_4 . METHOD_4 ( ) ; VAR_7 . METHOD_1 ( new TYPE_2 ( VAR_6 ) , null ) ; }\n", "fixed": "public void METHOD_1 ( java.io.InputStream VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 ; if ( VAR_2 != null ) VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; else VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) ; byte [ ] VAR_6 ; if ( VAR_2 != null ) VAR_6 = VAR_4 . METHOD_4 ( VAR_2 ) ; else VAR_6 = VAR_4 . METHOD_4 ( ) ; VAR_7 . METHOD_1 ( new TYPE_2 ( VAR_6 ) , VAR_2 ) ; }\n"}
{"problem": "protected void METHOD_1 ( int VAR_1 , int VAR_2 ) { super . METHOD_1 ( TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , VAR_3 ) , TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_4 ( ( ( height ) + ( VAR_4 ? 1 : 0 ) ) ) , VAR_3 ) ) ; }\n", "fixed": "protected void METHOD_1 ( int VAR_1 , int VAR_2 ) { super . METHOD_1 ( TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , VAR_3 ) , TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_4 ( getContext ( ) , ( ( height ) + ( VAR_4 ? 1 : 0 ) ) ) , VAR_3 ) ) ; }\n"}
{"problem": "public static void METHOD_1 ( java.lang.String file ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new java.io.File ( file ) . METHOD_3 ( ) ) ; VAR_2 = TYPE_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( INT_1 ) ; VAR_2 . open ( VAR_1 ) ; } catch ( java.lang.Exception VAR_3 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_3 . METHOD_6 ( ) ; } }\n", "fixed": "public static void METHOD_1 ( java.lang.String file ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new java.io.File ( file ) . METHOD_3 ( ) ) ; VAR_2 = TYPE_2 . METHOD_4 ( ) ; VAR_2 . open ( VAR_1 ) ; } catch ( java.lang.Exception VAR_3 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_3 . METHOD_6 ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": "     }\n     if (!isProperlyConfigured) {\n      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.error(\"InfluxDB is not yet connected\");\n       return;\n     }", "fixed": "     }\n     if (!isProperlyConfigured) {\n      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }", "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")", "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"}
{"problem": "private void METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { if ( ( this . getClass ( ) . equals ( VAR_1 ) ) && ( ! ( ( this ) instanceof TYPE_3 ) ) ) { return ; } android.content.Intent i = new android.content.Intent ( this , VAR_1 ) ; i . METHOD_2 ( VAR_3 ) ; if ( VAR_2 != null ) { i . METHOD_3 ( VAR_2 ) ; } METHOD_4 ( i ) ; VAR_4 . METHOD_5 ( ) ; }\n", "fixed": "private void METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { if ( ( this . getClass ( ) . equals ( VAR_1 ) ) && ( ! ( ( this ) instanceof TYPE_3 ) ) ) { return ; } android.content.Intent intent = new android.content.Intent ( this , VAR_1 ) ; intent . METHOD_2 ( VAR_3 ) ; if ( VAR_2 != null ) { intent . METHOD_3 ( VAR_2 ) ; } METHOD_4 ( intent ) ; VAR_4 . METHOD_5 ( ) ; }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( this ) ; TYPE_4 VAR_4 = TYPE_4 . METHOD_4 ( this ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; new TYPE_5 ( this , VAR_4 , VAR_3 ) ; }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_2 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( this ) ; TYPE_4 VAR_4 = TYPE_4 . METHOD_4 ( this ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; new TYPE_5 ( this , VAR_4 , VAR_3 ) ; }\n"}
{"problem": "public long METHOD_1 ( long VAR_1 , double value ) { if ( java.lang.Double . METHOD_2 ( value ) ) throw new TYPE_1 ( STRING_1 ) ; long VAR_2 = java.lang.Math.round ( ( value / ( VAR_3 ) ) ) ; METHOD_3 ( java.lang.Math.round ( ( VAR_2 * ( VAR_3 ) ) ) ) ; VAR_2 <<= VAR_4 ; VAR_1 &= ~ ( VAR_5 ) ; return VAR_1 | VAR_2 ; }\n", "fixed": "public long METHOD_1 ( long VAR_1 , double value ) { if ( java.lang.Double . METHOD_2 ( value ) ) throw new TYPE_1 ( STRING_1 ) ; long VAR_2 = java.lang.Math.round ( ( value / ( VAR_3 ) ) ) ; METHOD_3 ( ( ( long ) ( VAR_2 * ( VAR_3 ) ) ) ) ; VAR_2 <<= VAR_4 ; VAR_1 &= ~ ( VAR_5 ) ; return VAR_1 | VAR_2 ; }\n"}
{"problem": "private boolean remove ( java.util.ArrayList < TYPE_1 > VAR_1 , java.lang.String VAR_2 ) { boolean VAR_3 = false ; for ( TYPE_1 event : VAR_1 ) { if ( event . METHOD_1 ( ) . equals ( VAR_2 ) ) { VAR_1 . remove ( event ) ; event . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ) ; VAR_3 = true ; } } return VAR_3 ; }\n", "fixed": "private boolean remove ( java.util.ArrayList < TYPE_1 > VAR_1 , java.lang.String VAR_2 ) { boolean VAR_3 = false ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( VAR_1 . get ( i ) . METHOD_1 ( ) . equals ( VAR_2 ) ) { VAR_1 . get ( i ) . METHOD_2 ( ) ; VAR_1 . remove ( i ) ; VAR_3 = true ; i -- ; } } VAR_4 . METHOD_3 ( ) ; return VAR_3 ; }\n"}
{"problem": "private TYPE_1 METHOD_1 ( int VAR_1 ) { return new TYPE_1 ( ( ( ( VAR_1 - 1 ) * INT_1 ) + 1 ) , ( ( ( int ) ( TYPE_2 . METHOD_2 ( ( ( VAR_1 - 1 ) / INT_1 ) ) ) ) + 1 ) ) ; }\n", "fixed": "public TYPE_1 METHOD_1 ( int VAR_1 ) { return new TYPE_1 ( ( ( ( VAR_1 - 1 ) * INT_1 ) + 1 ) , ( ( ( int ) ( TYPE_2 . METHOD_2 ( ( ( VAR_1 - 1 ) / INT_1 ) ) ) ) + 1 ) ) ; }\n"}
{"problem": "public java.util.Date METHOD_1 ( java.lang.String date ) { if ( ! ( TYPE_1 . METHOD_2 ( date ) ) ) { try { TYPE_2 VAR_1 = new TYPE_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( false ) ; return VAR_1 . METHOD_4 ( date ) ; } catch ( TYPE_3 VAR_2 ) { throw new TYPE_4 ( ( ( STRING_2 + date ) + STRING_3 ) , VAR_2 ) ; } } return new java.util.Date ( 0 ) ; }\n", "fixed": "public java.util.Date METHOD_1 ( java.lang.String date ) { if ( ! ( TYPE_1 . METHOD_2 ( date ) ) ) { try { TYPE_2 VAR_1 = new TYPE_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( false ) ; return VAR_1 . METHOD_4 ( date ) ; } catch ( TYPE_3 VAR_2 ) { throw new TYPE_4 ( ( ( STRING_2 + date ) + STRING_3 ) , VAR_2 ) ; } } return null ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( INT_1 ) ; TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_1 ) ) ; java.lang.String VAR_3 = TYPE_5 . METHOD_3 ( ) . toString ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; TYPE_3 . info ( STRING_2 , VAR_1 . getId ( ) ) ; TYPE_3 . info ( STRING_3 , VAR_1 . METHOD_5 ( ) ) ; TYPE_6 . METHOD_6 ( ) . METHOD_1 ( METHOD_7 ( VAR_2 ) ) ; return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( INT_1 ) ; TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_1 ) ) ; java.lang.String VAR_3 = TYPE_5 . METHOD_3 ( ) . toString ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; TYPE_6 . METHOD_6 ( ) . METHOD_1 ( METHOD_7 ( VAR_2 ) ) ; TYPE_3 . info ( STRING_3 , VAR_1 . METHOD_5 ( ) ) ; TYPE_3 . info ( STRING_2 , VAR_2 . getId ( ) ) ; return VAR_3 ; }\n"}
{"problem": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { final java.util.Set < TYPE_3 > VAR_2 = new java.util.HashSet < TYPE_3 > ( ) ; new TYPE_4 ( ) . METHOD_2 ( VAR_3 , VAR_2 , true ) ; TYPE_5 . METHOD_3 ( new TYPE_6 ( ) { public void METHOD_1 ( ) { VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( ) . METHOD_6 ( ) , VAR_2 ) ; } } ) ; } catch ( TYPE_7 VAR_6 ) { TYPE_8 . METHOD_7 ( VAR_7 class , VAR_8 , VAR_6 ) ; } return VAR_9 ; }\n", "fixed": "protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { final java.util.Set < TYPE_3 > VAR_2 = new java.util.HashSet < TYPE_3 > ( ) ; new TYPE_4 ( ) . METHOD_2 ( VAR_3 , VAR_2 , true ) ; VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( ) . METHOD_6 ( ) , VAR_2 ) ; } catch ( TYPE_7 VAR_6 ) { TYPE_8 . METHOD_7 ( VAR_7 class , VAR_8 , VAR_6 ) ; } return VAR_9 ; }\n"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"problem": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_2 = new int [ ] [ ] { new int [ ] { 0 , 0 } , new int [ ] { 0 , 0 } , new int [ ] { 0 , 0 } , new int [ ] { 0 , 0 } } ; VAR_3 = new TYPE_1 [ INT_1 ] [ INT_2 ] ; VAR_4 = false ; VAR_5 = false ; }\n", "fixed": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_2 = new int [ ] [ ] { new int [ ] { 0 , 0 } , new int [ ] { 0 , 0 } , new int [ ] { 0 , 0 } , new int [ ] { 0 , 0 } } ; VAR_3 = new TYPE_1 [ INT_1 ] [ INT_2 ] ; VAR_4 = false ; VAR_5 = false ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public TYPE_1 [ ] METHOD_1 ( TYPE_1 [ ] a ) { if ( ( a . length ) < 1 ) { a = ( ( TYPE_1 [ ] ) ( TYPE_2 . METHOD_2 ( a . getClass ( ) . METHOD_3 ( ) , 1 ) ) ) ; } a [ 0 ] = data ; if ( ( a . length ) > 0 ) { a [ 1 ] = null ; } return a ; }\n", "fixed": "public TYPE_1 [ ] METHOD_1 ( TYPE_1 [ ] a ) { if ( ( a . length ) < 1 ) { a = ( ( TYPE_1 [ ] ) ( TYPE_2 . METHOD_2 ( a . getClass ( ) . METHOD_3 ( ) , 1 ) ) ) ; } a [ 0 ] = data ; if ( ( a . length ) > 1 ) { a [ 1 ] = null ; } return a ; }\n"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      */\n     private static String getSummarySentence(DetailNode ast) {\n         boolean flag = true;\n        final StringBuilder result = new StringBuilder();\n         for (DetailNode child : ast.getChildren()) {\n             if (ALLOWED_TYPES.contains(child.getType())) {\n                 result.append(child.getText());", "fixed": "      */\n     private static String getSummarySentence(DetailNode ast) {\n         boolean flag = true;\n        final StringBuilder result = new StringBuilder(256);\n         for (DetailNode child : ast.getChildren()) {\n             if (ALLOWED_TYPES.contains(child.getType())) {\n                 result.append(child.getText());", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { this . VAR_2 = VAR_3 . METHOD_2 ( ) ; this . file . METHOD_3 ( this . file . length ( ) ) ; this . file . METHOD_4 ( ( VAR_1 + CHAR_1 ) ) ; VAR_2 . METHOD_5 ( ) ; METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { this . VAR_2 = VAR_3 . METHOD_2 ( ) ; this . file . METHOD_3 ( this . file . length ( ) ) ; this . file . METHOD_4 ( ( VAR_1 + CHAR_1 ) ) ; VAR_2 . METHOD_5 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ; try { VAR_2 . METHOD_5 ( ) ; java.util.List < TYPE_4 > VAR_3 = VAR_2 . METHOD_6 ( STRING_1 ) . list ( ) ; for ( TYPE_4 VAR_4 : VAR_3 ) { VAR_1 . add ( VAR_4 ) ; } } catch ( TYPE_5 VAR_5 ) { VAR_5 . METHOD_7 ( ) ; } finally { java.lang.System.out.println ( STRING_2 ) ; VAR_2 . METHOD_8 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ; try { VAR_2 . METHOD_5 ( ) ; java.util.List < TYPE_4 > VAR_3 = VAR_2 . METHOD_6 ( STRING_1 ) . list ( ) ; for ( TYPE_4 VAR_4 : VAR_3 ) { VAR_1 . add ( VAR_4 ) ; } } catch ( TYPE_5 VAR_5 ) { VAR_5 . METHOD_7 ( ) ; } finally { VAR_2 . METHOD_8 ( ) ; } }\n"}
{"problem": "private int [ ] METHOD_1 ( java.lang.String string ) { int [ ] VAR_1 = new int [ 0 ] ; TYPE_1 VAR_2 = new TYPE_1 ( string , VAR_3 ) ; int index = 0 ; while ( VAR_2 . METHOD_2 ( ) ) { TYPE_2 . METHOD_3 ( VAR_1 , ( ( VAR_1 . length ) + 1 ) ) ; VAR_1 [ index ] = java.lang.Integer.parseInt ( VAR_2 . METHOD_4 ( ) ) ; index ++ ; } return VAR_1 ; }\n", "fixed": "private int [ ] METHOD_1 ( java.lang.String string ) { int [ ] VAR_1 = new int [ 0 ] ; TYPE_1 VAR_2 = new TYPE_1 ( string , VAR_3 ) ; int index = 0 ; while ( VAR_2 . METHOD_2 ( ) ) { VAR_1 = TYPE_2 . METHOD_3 ( VAR_1 , ( ( VAR_1 . length ) + 1 ) ) ; VAR_1 [ index ] = java.lang.Integer.parseInt ( VAR_2 . METHOD_4 ( ) ) ; index ++ ; } return VAR_1 ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { try { TYPE_2 VAR_2 = VAR_1 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( VAR_2 , java.lang.String.format ( STRING_1 , VAR_4 , STRING_2 , VAR_2 . METHOD_7 ( ) ) ) ; } catch ( java.lang.Exception VAR_5 ) { throw new TYPE_3 ( VAR_5 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { try { TYPE_2 VAR_2 = VAR_1 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_5 ) { throw new TYPE_3 ( VAR_5 ) ; } } }\n"}
{"problem": "public int METHOD_1 ( java.util.ArrayList < java.lang.Integer > VAR_1 ) { int VAR_2 = 0 ; int VAR_3 = 0 ; for ( int i : VAR_1 ) { if ( i == INT_1 ) { VAR_2 += 1 ; VAR_3 += i ; } else { VAR_2 += i ; VAR_3 += i ; } } if ( VAR_4 . equals ( STRING_1 ) ) return VAR_2 ; else if ( ( VAR_4 . equals ( STRING_2 ) ) && ( VAR_3 > INT_2 ) ) return VAR_2 ; else return VAR_3 ; }\n", "fixed": "public int METHOD_1 ( java.util.ArrayList < java.lang.Integer > VAR_1 ) { int VAR_2 = 0 ; int VAR_3 = 0 ; for ( int i : VAR_1 ) { if ( i == 1 ) { VAR_2 += i ; VAR_3 += INT_1 ; } else { VAR_2 += i ; VAR_3 += i ; } } if ( VAR_4 . equals ( STRING_1 ) ) return VAR_2 ; else if ( ( VAR_4 . equals ( STRING_2 ) ) && ( VAR_3 > INT_2 ) ) return VAR_2 ; else return VAR_3 ; }\n"}
{"problem": "public java.lang.Double METHOD_1 ( java.util.List < TYPE_1 < TYPE_2 > > data ) throws java.lang.Exception { if ( ( data . size ( ) ) == 0 ) { return 0.0 ; } java.lang.Double VAR_1 = new java.lang.Double ( 0 ) ; for ( TYPE_1 < TYPE_2 > VAR_2 : data ) { VAR_1 += VAR_2 . getValue ( ) . METHOD_2 ( ) ; } return VAR_1 ; }\n", "fixed": "public java.lang.Double METHOD_1 ( java.util.List < TYPE_1 < TYPE_2 > > data ) throws java.lang.Exception { if ( ( data . size ( ) ) == 0 ) { return 0.0 ; } java.lang.Double VAR_1 = new java.lang.Double ( 0 ) ; for ( TYPE_1 < TYPE_2 > VAR_2 : data ) { VAR_1 += VAR_2 . getValue ( ) . METHOD_2 ( ) ; } return VAR_1 / ( data . size ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { for ( java.lang.String VAR_1 : new java.util.ArrayList ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 . remove ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_4 . remove ( VAR_1 ) ) ; } VAR_5 . METHOD_4 ( ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_5 ( ) ; VAR_3 . METHOD_6 ( ) ; VAR_3 = null ; } }\n", "fixed": "public void METHOD_1 ( ) { for ( java.lang.String VAR_1 : new java.util.ArrayList ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 . remove ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_4 . remove ( VAR_1 ) ) ; } VAR_5 . METHOD_4 ( ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_5 ( ) ; } }\n"}
{"problem": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = TYPE_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( this ) ; if ( ! ( VAR_3 . METHOD_5 ( ) ) ) { VAR_4 = METHOD_6 ( VAR_5 , VAR_6 ) ; METHOD_7 ( ) ; } }\n", "fixed": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = TYPE_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( this ) ; VAR_4 = METHOD_6 ( VAR_5 , VAR_6 ) ; if ( ! ( VAR_3 . METHOD_5 ( ) ) ) { METHOD_7 ( ) ; } }\n"}
{"problem": "public TYPE_1 METHOD_1 ( TYPE_2 file ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( file != null ) && ( file . isEmpty ( ) ) ) { try { VAR_1 . METHOD_2 ( file . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( file . METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( file . METHOD_7 ( ) ) ; } catch ( java.io.IOException VAR_2 ) { throw new TYPE_3 ( VAR_2 . METHOD_8 ( ) , VAR_2 ) ; } } return VAR_1 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( TYPE_2 file ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( file != null ) && ( ! ( file . isEmpty ( ) ) ) ) { try { VAR_1 . METHOD_2 ( file . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( file . METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( file . METHOD_7 ( ) ) ; } catch ( java.io.IOException VAR_2 ) { throw new TYPE_3 ( VAR_2 . METHOD_8 ( ) , VAR_2 ) ; } } return VAR_1 ; }\n"}
{"problem": "protected void METHOD_1 ( java.lang.Boolean VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_1 + VAR_1 ) , VAR_3 ) . show ( ) ; VAR_4 . METHOD_3 ( 0 ) ; VAR_5 . setText ( STRING_2 ) ; } else { TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_3 + VAR_1 ) , VAR_3 ) . show ( ) ; } TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_4 + ( VAR_6 ) ) , VAR_3 ) . show ( ) ; }\n", "fixed": "protected void METHOD_1 ( java.lang.Boolean VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_1 + VAR_1 ) , VAR_3 ) . show ( ) ; VAR_4 . METHOD_3 ( 0 ) ; VAR_5 . setText ( STRING_2 ) ; } else { TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_3 + VAR_1 ) , VAR_3 ) . show ( ) ; } }\n"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId);\n     @GET\n     @Path(\"/inventory\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId) throws Exception;\n     @GET\n     @Path(\"/inventory\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"problem": "public void METHOD_1 ( ) { filename = name ; VAR_1 = context . METHOD_2 ( ) . open ( filename ) ; VAR_2 = new java.io.BufferedReader ( new TYPE_1 ( VAR_1 ) ) ; java.lang.String str ; while ( str = ( VAR_2 . METHOD_3 ( ) ) != null ) { ( VAR_3 ) ++ ; } }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 = context . METHOD_2 ( ) . open ( filename ) ; VAR_2 = new java.io.BufferedReader ( new TYPE_1 ( VAR_1 ) ) ; java.lang.String str ; while ( str = ( VAR_2 . METHOD_3 ( ) ) != null ) { ( VAR_3 ) ++ ; } }\n"}
{"problem": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 file ; while ( true ) { file = VAR_1 . METHOD_2 ( ( STRING_1 + ( VAR_2 ) ) ) ; try { file . METHOD_3 ( ) ; file . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( file ) ; return file ; } catch ( TYPE_2 VAR_3 ) { } } }\n", "fixed": "public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 file ; while ( true ) { file = VAR_1 . METHOD_2 ( ( STRING_1 + ( VAR_2 ) ) ) ; try { file . METHOD_3 ( ) ; file . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( file ) ; return file ; } catch ( TYPE_2 VAR_3 ) { } } }\n"}
{"problem": "private void METHOD_1 ( int VAR_1 ) throws java.io.IOException { int VAR_2 = 0 ; while ( true ) { TYPE_1 VAR_3 = METHOD_2 ( ) ; if ( ( ( ( VAR_3 == ( VAR_4 ) ) || ( VAR_3 == ( VAR_5 ) ) ) || ( VAR_3 == ( VAR_6 ) ) ) || ( VAR_2 >= VAR_1 ) ) { } METHOD_3 ( VAR_7 ) ; VAR_1 += VAR_7 ; } }\n", "fixed": "private void METHOD_1 ( int VAR_1 ) throws java.io.IOException { int VAR_2 = 0 ; while ( true ) { TYPE_1 VAR_3 = METHOD_2 ( ) ; if ( ( ( ( VAR_3 == ( VAR_4 ) ) || ( VAR_3 == ( VAR_5 ) ) ) || ( VAR_3 == ( VAR_6 ) ) ) || ( VAR_2 >= VAR_1 ) ) { break ; } METHOD_3 ( VAR_7 ) ; VAR_1 += VAR_7 ; } }\n"}
{"problem": "synchronized void METHOD_1 ( boolean VAR_1 , java.lang.Object ... arg ) { if ( ( ( VAR_2 ) == null ) || ( ( ! VAR_1 ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) ) return ; METHOD_3 ( ) ; TYPE_1 msg = TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; msg . obj = new java.lang.Object [ ] { this , arg } ; msg . METHOD_6 ( ) ; }\n", "fixed": "synchronized void METHOD_1 ( boolean VAR_1 , java.lang.Object ... arg ) { synchronized ( this ) { if ( ( ( VAR_2 ) == null ) || ( ( ! VAR_1 ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) ) return ; } METHOD_3 ( ) ; TYPE_1 msg = TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; msg . obj = new java.lang.Object [ ] { this , arg } ; msg . METHOD_6 ( ) ; }\n"}
{"problem": "public void METHOD_1 ( android.content.Context context , long VAR_1 , java.lang.String date ) { TYPE_1 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , context ) ; if ( ! ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( date ) ) ) { TYPE_1 . METHOD_2 ( ) . METHOD_4 ( context , TYPE_2 . METHOD_2 ( ) . METHOD_5 ( date ) ) ; } }\n", "fixed": "public void METHOD_1 ( android.content.Context context , long VAR_1 , java.lang.String date ) { TYPE_1 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , context ) ; if ( ! ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( date ) ) ) { TYPE_1 . METHOD_2 ( ) . METHOD_4 ( context , TYPE_2 . METHOD_2 ( ) . METHOD_5 ( date ) , false ) ; } }\n"}
{"problem": "private void error ( java.lang.String data ) { java.lang.String op = data . split ( STRING_1 ) [ 0 ] ; java.lang.String error = data . split ( STRING_1 ) [ 1 ] ; error . replaceAll ( STRING_2 , STRING_3 ) ; error = ( error . substring ( 0 , 1 ) . toUpperCase ( ) ) + ( error . substring ( 1 ) ) ; TYPE_1 . METHOD_1 ( STRING_4 , ( ( op + STRING_3 ) + error ) ) ; METHOD_2 ( error ) ; }\n", "fixed": "private void error ( java.lang.String data ) { java.lang.String op = data . split ( STRING_1 ) [ 0 ] ; java.lang.String error = data . substring ( ( ( op . length ( ) ) + 1 ) ) ; error . replaceAll ( STRING_2 , STRING_3 ) ; error = ( error . substring ( 0 , 1 ) . toUpperCase ( ) ) + ( error . substring ( 1 ) ) ; TYPE_1 . METHOD_1 ( STRING_4 , ( ( op + STRING_3 ) + error ) ) ; METHOD_2 ( error ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"problem": "protected < TYPE_1 > void METHOD_1 ( TYPE_2 < ? > VAR_1 , TYPE_3 < TYPE_1 > VAR_2 ) { TYPE_4 VAR_3 = METHOD_2 ( VAR_1 ) ; try { java.lang.Object result = METHOD_1 ( VAR_1 , VAR_3 ) ; VAR_2 . METHOD_3 ( ( ( TYPE_1 ) ( result ) ) ) ; } catch ( java.lang.Throwable VAR_4 ) { VAR_2 . METHOD_4 ( VAR_4 ) ; } }\n", "fixed": "protected < TYPE_1 > void METHOD_1 ( TYPE_2 < ? > VAR_1 , TYPE_3 < TYPE_1 > VAR_2 ) { try { TYPE_4 VAR_3 = METHOD_2 ( VAR_1 ) ; java.lang.Object result = METHOD_1 ( VAR_1 , VAR_3 ) ; VAR_2 . METHOD_3 ( ( ( TYPE_1 ) ( result ) ) ) ; } catch ( java.lang.Throwable VAR_4 ) { VAR_2 . METHOD_4 ( VAR_4 ) ; } }\n"}
{"problem": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { for ( java.lang.Integer i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { TYPE_2 VAR_3 = VAR_2 . get ( i ) ; for ( java.lang.Integer b = 0 ; i < ( VAR_4 . size ( ) ) ; i ++ ) { if ( ( VAR_4 . get ( b ) . METHOD_2 ( ) . METHOD_3 ( ) ) == VAR_1 ) { return true ; } } } return false ; }\n", "fixed": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { TYPE_2 VAR_3 = VAR_2 . get ( i ) ; for ( int b = 0 ; b < ( VAR_4 . size ( ) ) ; b ++ ) { if ( ( VAR_4 . get ( b ) . METHOD_2 ( ) . METHOD_3 ( ) ) == VAR_1 ) { return true ; } } } return false ; }\n"}
{"problem": "public static void METHOD_1 ( ) { java.util.Collection < TYPE_1 > VAR_1 = TYPE_2 . get ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_2 ) ; } java.util.Collection < java.io.File > VAR_3 = TYPE_4 . get ( ) ; for ( java.io.File file : VAR_3 ) { if ( ! ( file . delete ( ) ) ) { TYPE_5 . METHOD_3 ( ( STRING_1 + ( file . METHOD_4 ( ) ) ) ) ; } } VAR_1 . METHOD_5 ( ) ; VAR_3 . METHOD_5 ( ) ; }\n", "fixed": "public static void METHOD_1 ( ) { java.util.Collection < TYPE_1 > VAR_1 = TYPE_2 . get ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_2 ) ; } java.util.Collection < java.io.File > VAR_3 = TYPE_4 . get ( ) ; for ( java.io.File file : VAR_3 ) { if ( ! ( file . delete ( ) ) ) { TYPE_5 . METHOD_3 ( ( STRING_1 + ( file . METHOD_4 ( ) ) ) ) ; } } TYPE_2 . remove ( ) ; TYPE_4 . remove ( ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 0 , false ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_3 ( 0 ) ) ) ; if ( ( VAR_2 != null ) && ( data != null ) ) { VAR_2 . METHOD_4 ( ) ; } TYPE_2 VAR_3 = METHOD_5 ( VAR_4 ) ; VAR_3 . METHOD_6 ( false ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_7 ( ) ; VAR_3 . METHOD_8 ( null ) ; } VAR_3 . METHOD_9 ( null ) ; }\n", "fixed": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 0 , false ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_3 ( 0 ) ) ) ; if ( ( VAR_2 != null ) && ( data != null ) ) { VAR_2 . METHOD_4 ( ) ; } TYPE_2 VAR_3 = METHOD_5 ( VAR_4 ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_7 ( ) ; VAR_3 . METHOD_8 ( null ) ; } VAR_3 . METHOD_9 ( null ) ; }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JingEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedJingEndpointBuilder advanced() {\n             return (AdvancedJingEndpointBuilder) this;\n         }", "fixed": "     \n    public interface JingEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedJingEndpointBuilder advanced() {\n             return (AdvancedJingEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"problem": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . remove ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 p = ( VAR_3 != null ) ? VAR_3 . get ( ) : null ; if ( ( p != null ) && ( VAR_1 != p ) ) { VAR_4 . put ( VAR_1 . METHOD_2 ( ) , new TYPE_2 ( VAR_1 ) ) ; } } }\n", "fixed": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { long handle = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_4 . remove ( handle ) ; TYPE_1 p = ( VAR_3 != null ) ? VAR_3 . get ( ) : null ; if ( ( p != null ) && ( VAR_1 != p ) ) { VAR_4 . put ( handle , new TYPE_2 ( p ) ) ; } } }\n"}
{"problem": "private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { java.io.File VAR_3 = this . VAR_4 . getActivity ( ) . METHOD_2 ( VAR_1 ) ; try { VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; } catch ( java.lang.Exception VAR_5 ) { TYPE_2 . METHOD_5 ( VAR_6 class . METHOD_6 ( ) , STRING_1 , VAR_5 ) ; VAR_2 . error ( STRING_1 ) ; } }\n", "fixed": "private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { java.io.File VAR_3 = this . VAR_4 . getActivity ( ) . METHOD_2 ( VAR_1 ) ; try { VAR_2 . METHOD_3 ( ( VAR_3 . METHOD_4 ( ) ? 1 : 0 ) ) ; } catch ( java.lang.Exception VAR_5 ) { TYPE_2 . METHOD_5 ( VAR_6 class . METHOD_6 ( ) , STRING_1 , VAR_5 ) ; VAR_2 . error ( STRING_1 ) ; } }\n"}
{"problem": "public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_3 ) ) | ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_4 ) ) ) { VAR_2 = TYPE_2 . METHOD_3 ( VAR_2 ) ; } VAR_2 = TYPE_3 . METHOD_4 ( VAR_2 ) ; VAR_2 = TYPE_3 . METHOD_5 ( VAR_2 , STRING_1 ) ; VAR_2 = TYPE_3 . METHOD_4 ( VAR_2 ) ; VAR_2 = TYPE_3 . METHOD_5 ( VAR_2 , VAR_5 ) ; return VAR_2 ; }\n", "fixed": "public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { VAR_2 = TYPE_3 . METHOD_4 ( VAR_2 ) ; if ( ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_3 ) ) | ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_4 ) ) ) { VAR_2 = TYPE_2 . METHOD_3 ( VAR_2 ) ; VAR_2 = TYPE_3 . METHOD_5 ( VAR_2 , VAR_5 ) ; } VAR_2 = TYPE_3 . METHOD_4 ( VAR_2 ) ; VAR_2 = TYPE_3 . METHOD_5 ( VAR_2 , STRING_1 ) ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "213109c115e65588b265650eee80fad7652b2129", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\ttry {\r\n \t\t\tLwjglMusic music = new LwjglMusic(((LwjglFileHandle)file));\r\n \t\t\treturn music;\r\n\t\t} catch (Exception e) {\r\n \t\t\tthrow new GdxRuntimeException(\"Couldn't create Music instance from file '\" + file + \"'\", e);\r\n \t\t}\r\n \t}\r", "fixed": " \t\ttry {\r\n \t\t\tLwjglMusic music = new LwjglMusic(((LwjglFileHandle)file));\r\n \t\t\treturn music;\r\n\t\t} catch (Throwable e) {\r\n \t\t\tthrow new GdxRuntimeException(\"Couldn't create Music instance from file '\" + file + \"'\", e);\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable e"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"problem": "public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + ( METHOD_1 ( ) ? STRING_2 : STRING_3 ) ) + STRING_4 ) + ( VAR_2 ) ) + STRING_5 ) + ( VAR_3 ) ) + ( METHOD_1 ( ) ? STRING_6 : STRING_7 + ( VAR_4 ) ) ; }\n", "fixed": "public java.lang.String toString ( ) { return ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + ( METHOD_1 ( ) ? STRING_3 : STRING_2 ) ) + STRING_4 ) + ( VAR_2 ) ) + STRING_5 ) + ( VAR_3 ) ) + ( METHOD_1 ( ) ? STRING_7 + ( VAR_4 ) : STRING_6 ) ; }\n"}
{"problem": "public boolean METHOD_1 ( android.view.View VAR_1 , int VAR_2 , TYPE_1 event ) { if ( ( ( event . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( VAR_2 == ( VAR_4 ) ) ) { if ( ( ( VAR_5 . METHOD_3 ( ) ) & ( VAR_6 ) ) != ( VAR_6 ) ) { TYPE_2 . METHOD_4 ( index ) ; VAR_7 . METHOD_5 ( ) . METHOD_6 ( ) ; return true ; } } return false ; }\n", "fixed": "public boolean METHOD_1 ( android.view.View VAR_1 , int VAR_2 , TYPE_1 event ) { if ( ( ( event . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( VAR_2 == ( VAR_4 ) ) ) { if ( ( ( VAR_5 . METHOD_3 ( ) ) & ( VAR_6 ) ) != ( VAR_6 ) ) { TYPE_2 . METHOD_4 ( index ) ; return true ; } } return false ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 node ) { TYPE_1 VAR_1 = node . get ( 0 ) ; TYPE_1 VAR_2 = node . get ( 1 ) ; node . METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; this . METHOD_4 ( VAR_1 ) ; this . METHOD_4 ( VAR_2 ) ; this . VAR_3 . METHOD_5 ( VAR_4 class , node . METHOD_6 ( ) , node . METHOD_7 ( ) . getName ( ) , VAR_1 . METHOD_6 ( ) , node . METHOD_6 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 node ) { TYPE_1 VAR_1 = node . get ( 0 ) ; TYPE_1 VAR_2 = node . get ( 1 ) ; this . METHOD_4 ( VAR_1 ) ; this . METHOD_4 ( VAR_2 ) ; node . METHOD_2 ( METHOD_3 ( node , VAR_1 , VAR_2 ) ) ; this . VAR_3 . METHOD_5 ( VAR_4 class , node . METHOD_6 ( ) , node . METHOD_7 ( ) . getName ( ) , VAR_1 . METHOD_6 ( ) , VAR_2 . METHOD_6 ( ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( VAR_2 . METHOD_2 ( ) ) != null ) { VAR_1 . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; } VAR_3 . METHOD_4 ( VAR_2 . getId ( ) , VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) , VAR_1 , VAR_2 . METHOD_7 ( ) ) ; }\n", "fixed": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = null ; if ( ( VAR_2 . METHOD_2 ( ) ) != null ) { VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; } VAR_3 . METHOD_4 ( VAR_2 . getId ( ) , VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) , VAR_1 , VAR_2 . METHOD_7 ( ) ) ; }\n"}
{"problem": "public java.util.Map < java.lang.Integer , java.util.List < TYPE_1 > > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Map < java.lang.Integer , java.util.List < TYPE_1 > > VAR_2 ; METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 ) > 1 ) { VAR_2 = METHOD_3 ( VAR_1 ) ; } else { VAR_2 = METHOD_4 ( ( ( java.util.List ) ( VAR_1 ) ) ) ; } return VAR_2 ; }\n", "fixed": "public java.util.Map < java.lang.Integer , java.util.List < TYPE_1 > > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Map < java.lang.Integer , java.util.List < TYPE_1 > > VAR_2 ; METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 ) > 1 ) { VAR_2 = METHOD_3 ( VAR_1 ) ; } else { VAR_2 = METHOD_4 ( VAR_1 ) ; } return VAR_2 ; }\n"}
{"fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  * Auto-configuration for HtmlUnit {@link WebClient} MockMVC integration.\n  *\n  * @author Phillip Webb\n  */\n @Configuration\n @ConditionalOnClass(WebClient.class)\n @AutoConfigureAfter(MockMvcAutoConfiguration.class)\n @ConditionalOnProperty(prefix = \"spring.test.webmvc.webclient\", name = \"enabled\", matchIfMissing = true)\nclass MockMvcWebClientAutoConfiguration {\n \tprivate final Environment environment;", "fixed": "  * Auto-configuration for HtmlUnit {@link WebClient} MockMVC integration.\n  *\n  * @author Phillip Webb\n * @since 1.4.0\n  */\n @Configuration\n @ConditionalOnClass(WebClient.class)\n @AutoConfigureAfter(MockMvcAutoConfiguration.class)\n @ConditionalOnProperty(prefix = \"spring.test.webmvc.webclient\", name = \"enabled\", matchIfMissing = true)\npublic class MockMvcWebClientAutoConfiguration {\n \tprivate final Environment environment;", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"problem": "public void METHOD_1 ( ) { try { this . VAR_1 = VAR_2 . METHOD_2 ( ) ; this . VAR_1 . trim ( ) ; } catch ( java.io.IOException VAR_3 ) { java.lang.System.out.println ( VAR_3 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { try { this . VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ! ( ( this . VAR_1 ) == null ) ) { this . VAR_1 = this . VAR_1 . trim ( ) ; } } catch ( java.io.IOException VAR_3 ) { java.lang.System.out.println ( VAR_3 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( ) ; } }\n"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "fixed": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"problem": "public boolean equals ( java.lang.Object VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( ( name ) == ( VAR_2 . name ) ) && ( ( data ) == ( VAR_2 . data ) ) ) && ( ( VAR_3 ) == ( VAR_4 ) ) ; }\n", "fixed": "public boolean equals ( java.lang.Object VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( name . equals ( VAR_2 . name ) ) && ( data . equals ( VAR_2 . data ) ) ) && ( ( VAR_3 ) == ( VAR_4 ) ) ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { final java.lang.String key = VAR_1 . METHOD_2 ( ) ; if ( TYPE_2 . equals ( key ) ) { final boolean value = ( ( java.lang.Boolean ) ( VAR_2 ) ) ; TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_3 , ( value ? 1 : 0 ) ) ; return true ; } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { final java.lang.String key = VAR_1 . METHOD_2 ( ) ; if ( TYPE_2 . equals ( key ) ) { final boolean value = ( ( java.lang.Boolean ) ( VAR_2 ) ) ; TYPE_3 . METHOD_3 ( METHOD_4 ( ) , TYPE_2 , ( value ? 1 : 0 ) ) ; return true ; } return false ; }\n"}
{"problem": "protected void METHOD_1 ( int VAR_1 , int height , int VAR_2 , int VAR_3 ) { TYPE_1 . METHOD_2 ( getClass ( ) . getName ( ) , STRING_1 ) ; int VAR_4 = ( VAR_1 - ( METHOD_3 ( ) ) ) - ( METHOD_4 ( ) ) ; VAR_5 = VAR_4 / ( ( float ) ( VAR_6 ) ) ; int VAR_7 = ( height - ( METHOD_5 ( ) ) ) - ( METHOD_6 ( ) ) ; VAR_8 = VAR_7 / ( ( float ) ( VAR_6 ) ) ; }\n", "fixed": "protected void METHOD_1 ( int VAR_1 , int height , int VAR_2 , int VAR_3 ) { int VAR_4 = ( VAR_1 - ( METHOD_3 ( ) ) ) - ( METHOD_4 ( ) ) ; VAR_5 = VAR_4 / ( ( float ) ( VAR_6 ) ) ; int VAR_7 = ( height - ( METHOD_5 ( ) ) ) - ( METHOD_6 ( ) ) ; VAR_8 = VAR_7 / ( ( float ) ( VAR_6 ) ) ; }\n"}
{"problem": "public void METHOD_1 ( ) { java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; if ( ( ( VAR_1 != null ) && ( ( VAR_2 ) != null ) ) && ( ( VAR_3 . size ( ) ) != ( VAR_1 . length ) ) ) { TYPE_3 . assertTrue ( ( ( ( VAR_1 . length ) > 0 ) || ( ( VAR_3 . size ( ) ) > 0 ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { java.lang.String [ ] VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , true ) ; if ( ( ( VAR_1 != null ) && ( ( VAR_2 ) != null ) ) && ( ( VAR_3 . size ( ) ) != ( VAR_1 . length ) ) ) { TYPE_3 . assertTrue ( ( ( ( VAR_1 . length ) > 0 ) || ( ( VAR_3 . size ( ) ) > 0 ) ) ) ; } }\n"}
{"problem": "private java.util.List < java.lang.Integer > METHOD_1 ( int VAR_1 ) { java.util.Set < java.lang.Integer > VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; java.util.List < java.lang.Integer > VAR_4 = TYPE_1 . METHOD_5 ( VAR_1 ) ; java.util.List < java.lang.Integer > VAR_5 = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( java.lang.Integer i : VAR_2 ) { if ( VAR_4 . contains ( i ) ) { VAR_5 . add ( i ) ; } } return VAR_5 ; }\n", "fixed": "private java.util.List < java.lang.Integer > METHOD_1 ( int VAR_1 ) { java.util.Set < java.lang.Integer > VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; java.util.List < java.lang.Integer > VAR_4 = TYPE_1 . METHOD_5 ( VAR_1 ) ; java.util.List < java.lang.Integer > VAR_5 = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( java.lang.Integer i : VAR_4 ) { if ( ! ( VAR_2 . contains ( i ) ) ) { VAR_5 . add ( i ) ; } } return VAR_5 ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"problem": "public void start ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( VAR_1 , STRING_1 ) ; if ( ( VAR_2 ) != null ) { VAR_3 = VAR_4 ; VAR_2 . start ( ) ; VAR_2 . METHOD_2 ( this ) ; } else throw new TYPE_3 ( STRING_2 ) ; }\n", "fixed": "public void start ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( VAR_1 , STRING_1 ) ; if ( ( VAR_2 ) != null ) { VAR_3 = VAR_4 ; VAR_2 . METHOD_2 ( this ) ; VAR_2 . start ( ) ; } else throw new TYPE_3 ( STRING_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 ) == null ) { METHOD_2 ( VAR_4 , VAR_5 . METHOD_3 ( ) ) ; } else { if ( VAR_2 ) { VAR_3 . METHOD_4 ( null ) ; } else { VAR_3 . METHOD_4 ( VAR_6 ) ; } } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 ) == null ) { METHOD_2 ( VAR_4 , VAR_5 . METHOD_3 ( ) ) ; } else { if ( VAR_2 ) { VAR_3 . METHOD_4 ( null ) ; METHOD_2 ( VAR_4 , VAR_5 . METHOD_3 ( ) ) ; } else { VAR_3 . METHOD_4 ( VAR_6 ) ; METHOD_2 ( VAR_4 , VAR_5 . METHOD_3 ( ) ) ; } } }\n"}
{"problem": "protected static java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) throws TYPE_4 { final java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; final TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 ) ; while ( VAR_1 . METHOD_2 ( ) ) { VAR_3 . add ( TYPE_6 . METHOD_3 ( VAR_1 , VAR_4 , VAR_2 ) ) ; } return VAR_3 ; }\n", "fixed": "protected static java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) throws TYPE_4 { final java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { final TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 ) ; do { VAR_3 . add ( TYPE_6 . METHOD_3 ( VAR_1 , VAR_4 , VAR_2 ) ) ; } while ( VAR_1 . METHOD_2 ( ) ) ; } return VAR_3 ; }\n"}
{"problem": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 . setText ( VAR_3 ) ; VAR_4 . setText ( STRING_1 ) ; VAR_5 . METHOD_2 ( VAR_6 ) ; VAR_7 . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , VAR_8 ) ; VAR_7 . METHOD_2 ( VAR_9 ) ; } }\n", "fixed": "private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_2 . setText ( VAR_3 ) ; VAR_4 . setText ( STRING_1 ) ; VAR_5 . METHOD_2 ( VAR_6 ) ; VAR_4 . METHOD_2 ( VAR_6 ) ; VAR_7 . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , VAR_8 ) ; VAR_7 . METHOD_2 ( VAR_9 ) ; } }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       try {\n         ret = getMS().deleteTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_table: \", ret != false);\n       }\n       return ret;\n    }", "fixed": "       try {\n         ret = getMS().deleteTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_table: \", ret != false, null);\n       }\n       return ret;\n    }", "sourceBeforeFix": "endFunction(\"get_column_statistics_by_table: \",statsObj != null)", "sourceAfterFix": "endFunction(\"get_column_statistics_by_table: \",statsObj != null,null)"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"problem": "public static java.util.Set < java.lang.Class < ? > > METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 ) { { java.util.Set < java.lang.Class < ? > > VAR_2 = new java.util.HashSet < > ( ) ; for ( java.lang.Class < ? > VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_2 ( VAR_1 ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; } }\n", "fixed": "public static java.util.Set < java.lang.Class < ? > > METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 ) { java.util.Set < java.lang.Class < ? > > VAR_2 = new java.util.HashSet < > ( ) ; for ( java.lang.Class < ? > VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_2 ( VAR_1 ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; }\n"}
{"fixCommitSHA1": "73627df082ff499af4ca1c482f79e304905007eb", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        element(i).toJsonString(buf);\n                     }\n                     buf.append(\"]\");\n                     break;", "fixed": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        element(i, charsetName).toJsonString(buf, charsetName);\n                     }\n                     buf.append(\"]\");\n                     break;", "sourceBeforeFix": "m_data.rewind().forward((int)key_offset).getFixString((int)key_length)", "sourceAfterFix": "m_data.rewind().forward((int)key_offset).getFixString((int)key_length,charsetName)"}
{"problem": "private void METHOD_1 ( TYPE_1 response ) throws java.io.IOException { this . response = response ; TYPE_2 VAR_1 = response . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = response . METHOD_5 ( ) . METHOD_6 ( ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 response ) throws java.io.IOException { this . response = response ; VAR_3 = response . METHOD_5 ( ) . METHOD_6 ( ) ; TYPE_2 VAR_1 = response . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } else { VAR_2 = new byte [ 0 ] ; } }\n"}
{"problem": "public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( true ) ) ) { TYPE_1 . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { VAR_2 . METHOD_5 ( VAR_3 , false ) ; VAR_4 . METHOD_6 ( VAR_3 ) ; VAR_3 = null ; VAR_5 = null ; } } ) ; super . METHOD_1 ( ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( true ) ) ) { METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { VAR_2 . METHOD_5 ( VAR_3 , false ) ; VAR_4 . METHOD_6 ( VAR_3 ) ; VAR_3 = null ; VAR_5 = null ; } } ) ; super . METHOD_1 ( ) ; } }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"problem": "public boolean METHOD_1 ( byte [ ] data ) { TYPE_1 msg = new TYPE_1 ( ) ; if ( ( TYPE_2 . size ( ) ) >= ( VAR_1 ) ) { return false ; } if ( ( TYPE_2 . size ( ) ) == 0 ) { TYPE_2 . add ( data ) ; VAR_2 = VAR_3 ; METHOD_2 ( ) ; } else { TYPE_2 . add ( data ) ; } return true ; }\n", "fixed": "public boolean METHOD_1 ( byte [ ] data ) { TYPE_1 msg = new TYPE_1 ( ) ; if ( ( TYPE_2 . size ( ) ) >= ( VAR_1 ) ) { return false ; } if ( ( TYPE_2 . size ( ) ) == 0 ) { TYPE_2 . add ( data ) ; METHOD_2 ( ) ; } else { TYPE_2 . add ( data ) ; } return true ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_3 ) TYPE_2 . METHOD_2 ( ( STRING_1 + VAR_2 ) ) ; if ( VAR_2 == ( VAR_4 ) ) { return ; } if ( VAR_1 == ( VAR_5 ) ) { TYPE_3 VAR_6 = new TYPE_3 ( VAR_5 . METHOD_3 ( ) , VAR_7 ) ; METHOD_4 ( VAR_8 . METHOD_5 ( ) , VAR_6 ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_3 ) TYPE_2 . METHOD_2 ( ( STRING_1 + VAR_2 ) ) ; if ( VAR_2 == ( VAR_4 ) ) { return ; } TYPE_3 VAR_6 = new TYPE_3 ( VAR_1 . METHOD_3 ( ) , VAR_7 ) ; METHOD_4 ( VAR_8 . METHOD_5 ( ) , VAR_6 ) ; }\n"}
{"problem": "private java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; TYPE_2 VAR_3 = METHOD_2 ( VAR_2 ) ; if ( VAR_3 == null ) { return this . VAR_4 ; } else { return VAR_3 . value ( ) ; } }\n", "fixed": "private java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) { if ( VAR_1 instanceof TYPE_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; TYPE_2 VAR_3 = METHOD_2 ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . value ( ) ; } } return this . VAR_4 ; }\n"}
{"problem": "private char METHOD_1 ( int index ) { if ( ( data ) != null ) { return data [ index ] ; } int VAR_1 = VAR_2 . count ; if ( VAR_1 > index ) { return VAR_2 . METHOD_1 ( index ) ; } return VAR_3 . METHOD_1 ( index ) ; }\n", "fixed": "private char METHOD_1 ( int index ) { if ( ( data ) != null ) { return data [ index ] ; } int VAR_1 = VAR_2 . count ; if ( VAR_1 > index ) { return VAR_2 . METHOD_1 ( index ) ; } return VAR_3 . METHOD_1 ( ( index - VAR_1 ) ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"problem": "public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { try { java.lang.String VAR_3 = ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) + STRING_3 ; java.lang.System.out.println ( VAR_3 ) ; this . METHOD_2 ( VAR_4 , VAR_3 ) ; java.lang.System.out.println ( STRING_4 ) ; } catch ( TYPE_1 VAR_5 ) { java.lang.System.out.println ( STRING_5 ) ; VAR_5 . METHOD_3 ( ) ; return ; } }\n", "fixed": "public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { try { java.lang.String VAR_3 = ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ; java.lang.System.out.println ( VAR_3 ) ; this . METHOD_2 ( VAR_4 , VAR_3 ) ; java.lang.System.out.println ( STRING_4 ) ; } catch ( TYPE_1 VAR_5 ) { java.lang.System.out.println ( STRING_5 ) ; VAR_5 . METHOD_3 ( ) ; return ; } }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "fixed": "     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"problem": "public java.lang.String METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 == null ) || ( ! ( VAR_3 . METHOD_3 ( ) . get ( 0 ) . METHOD_4 ( ) ) ) ) { return null ; } TYPE_2 VAR_4 = new TYPE_2 ( VAR_3 ) ; this . VAR_5 . add ( VAR_4 ) ; return VAR_4 . METHOD_5 ( ) ; }\n", "fixed": "public java.lang.String METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 == null ) || ( VAR_3 . METHOD_3 ( ) . get ( 0 ) . METHOD_4 ( ) ) ) { return null ; } TYPE_2 VAR_4 = new TYPE_2 ( VAR_3 ) ; this . VAR_5 . add ( VAR_4 ) ; return VAR_4 . METHOD_5 ( ) ; }\n"}
{"fixCommitSHA1": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author <a href=\"mailto:dobratzp@ele.uri.edu\">Peter Dobratz</a>\n  * @version 1.0\n  */\npublic class TokenTypes\n {\n     \n     private TokenTypes()", "fixed": "  * @author <a href=\"mailto:dobratzp@ele.uri.edu\">Peter Dobratz</a>\n  * @version 1.0\n  */\npublic final class TokenTypes\n {\n     \n     private TokenTypes()", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"problem": "public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { try ( TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ) { try ( TYPE_3 VAR_5 = VAR_3 . METHOD_3 ( STRING_1 ) ) { TYPE_4 VAR_6 = METHOD_4 ( VAR_1 ) ; VAR_5 . METHOD_5 ( 1 , VAR_6 . METHOD_6 ( ) ) ; VAR_5 . METHOD_7 ( INT_1 , VAR_2 . METHOD_8 ( ) ) ; } } catch ( TYPE_5 VAR_7 ) { VAR_7 . METHOD_9 ( ) ; } }\n", "fixed": "public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { try ( TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ) { try ( TYPE_3 VAR_5 = VAR_3 . METHOD_3 ( STRING_1 ) ) { TYPE_4 VAR_6 = METHOD_4 ( VAR_1 ) ; VAR_5 . METHOD_5 ( 1 , VAR_6 . METHOD_6 ( ) ) ; VAR_5 . METHOD_7 ( INT_1 , VAR_2 . METHOD_8 ( ) ) ; VAR_5 . execute ( ) ; } } catch ( TYPE_5 VAR_7 ) { VAR_7 . METHOD_9 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) { VAR_3 . METHOD_5 ( ( ( VAR_1 - ( INT_1 + INT_2 ) ) + STRING_1 ) ) ; } else { VAR_3 . METHOD_5 ( ( ( VAR_1 - ( INT_3 + INT_2 ) ) + STRING_1 ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) { VAR_3 . METHOD_5 ( ( ( VAR_1 - INT_1 ) + STRING_1 ) ) ; } else { VAR_3 . METHOD_5 ( ( ( VAR_1 - INT_3 ) + STRING_1 ) ) ; } }\n"}
{"fixCommitSHA1": "9a861785b36e0b1132737bd8fa1f7caac5a41c87", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "             @Override\n             public void run()\n                     throws Exception {\n                assertTrue(stats.getLastAccessTime() > lastAccessTime);\n             }\n         });\n     }", "fixed": "             @Override\n             public void run()\n                     throws Exception {\n                assertTrue(stats.getLastAccessTime() >= lastAccessTime);\n             }\n         });\n     }", "sourceBeforeFix": "stats.getLastUpdateTime() > lastUpdateTime", "sourceAfterFix": "stats.getLastUpdateTime() >= lastUpdateTime"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { VAR_1 . METHOD_3 ( VAR_2 ) ; } else { int VAR_3 = VAR_4 . METHOD_4 ( 0 ) . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ( ( ( int ) ( VAR_1 . METHOD_7 ( ) ) ) + VAR_3 ) , ( ( int ) ( VAR_1 . METHOD_8 ( ) ) ) ) ; } }\n", "fixed": "public void METHOD_1 ( ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { VAR_1 . METHOD_3 ( VAR_2 ) ; } else if ( ( VAR_4 . METHOD_4 ( 0 ) ) != null ) { int VAR_3 = VAR_4 . METHOD_4 ( 0 ) . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ( ( ( int ) ( VAR_1 . METHOD_7 ( ) ) ) + VAR_3 ) , ( ( int ) ( VAR_1 . METHOD_8 ( ) ) ) ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) != null ) { VAR_2 = METHOD_2 ( ) . getString ( VAR_3 ) ; VAR_4 = METHOD_2 ( ) . getString ( VAR_5 ) ; } if ( VAR_2 . METHOD_3 ( STRING_1 ) ) { VAR_6 = true ; } TYPE_2 VAR_7 = new TYPE_2 ( VAR_8 ) ; TYPE_3 VAR_9 = new TYPE_3 ( ) ; TYPE_4 . METHOD_4 ( getActivity ( ) ) . METHOD_5 ( VAR_9 , VAR_7 ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) != null ) { VAR_2 = METHOD_2 ( ) . getString ( VAR_3 ) ; VAR_4 = METHOD_2 ( ) . getString ( VAR_5 ) ; if ( VAR_2 . METHOD_3 ( STRING_1 ) ) { VAR_6 = true ; } } TYPE_2 VAR_7 = new TYPE_2 ( VAR_8 ) ; TYPE_3 VAR_9 = new TYPE_3 ( ) ; TYPE_4 . METHOD_4 ( getActivity ( ) ) . METHOD_5 ( VAR_9 , VAR_7 ) ; }\n"}
{"problem": "public void init ( ) { java.io.InputStream VAR_1 = getClass ( ) . METHOD_1 ( ) . METHOD_2 ( VAR_2 ) ; java.util.Properties VAR_3 = new java.util.Properties ( ) ; if ( VAR_1 != null ) { try { VAR_3 . METHOD_3 ( VAR_1 ) ; } catch ( java.io.IOException VAR_4 ) { java.lang.System.err.println ( STRING_1 ) ; VAR_5 = true ; } try { VAR_1 . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_4 ) { java.lang.System.err.println ( STRING_2 ) ; VAR_5 = true ; } } }\n", "fixed": "public void init ( ) { java.io.InputStream VAR_1 = getClass ( ) . METHOD_1 ( ) . METHOD_2 ( VAR_2 ) ; java.util.Properties VAR_3 = new java.util.Properties ( ) ; if ( VAR_1 != null ) { try { VAR_3 . METHOD_3 ( VAR_1 ) ; } catch ( java.io.IOException VAR_4 ) { java.lang.System.err.println ( STRING_1 ) ; VAR_5 = true ; } try { VAR_1 . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_4 ) { java.lang.System.err.println ( STRING_2 ) ; VAR_5 = true ; } } java.lang.System.err.println ( STRING_1 ) ; VAR_5 = true ; }\n"}
{"problem": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_3 ) == null ) { throw new TYPE_1 ( STRING_1 ) ; } if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_2 ) ; } boolean result = false ; TYPE_2 VAR_4 = VAR_3 . get ( VAR_1 ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_1 ( VAR_2 ) ; VAR_5 . add ( VAR_2 ) ; result = true ; } return result ; }\n", "fixed": "public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_3 ) == null ) { throw new TYPE_1 ( STRING_1 ) ; } if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_2 ) ; } boolean result = false ; TYPE_2 VAR_4 = VAR_3 . get ( VAR_1 ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_1 ( VAR_2 ) ; if ( VAR_2 != null ) { VAR_5 . add ( VAR_2 ) ; } result = true ; } return result ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public static TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( response ( ) ) ; if ( VAR_1 ) { METHOD_3 ( VAR_2 , TYPE_3 . get ( STRING_1 ) ) ; return TYPE_4 . index ( ) ; } if ( TYPE_5 . METHOD_4 ( METHOD_5 ( ) ) ) { return TYPE_6 . METHOD_6 ( ) ; } else { TYPE_7 . error ( STRING_2 ) ; return TYPE_6 . METHOD_7 ( ) ; } }\n", "fixed": "public static TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( response ( ) ) ; if ( VAR_1 ) { METHOD_3 ( VAR_2 , TYPE_3 . get ( STRING_1 ) ) ; return TYPE_4 . index ( ) ; } if ( TYPE_5 . METHOD_4 ( METHOD_5 ( ) ) ) { return TYPE_6 . METHOD_6 ( ) ; } else { return TYPE_6 . METHOD_7 ( ) ; } }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { VAR_2 . METHOD_2 ( VAR_3 [ ( position % ( VAR_3 . length ) ) ] ) ; VAR_4 . setText ( type . get ( ( position % ( type . size ( ) ) ) ) ) ; VAR_5 . setText ( VAR_6 . get ( ( position % ( VAR_6 . size ( ) ) ) ) ) ; VAR_7 . setText ( VAR_8 . get ( ( position % ( VAR_8 . size ( ) ) ) ) ) ; }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 , int position ) { VAR_2 . METHOD_2 ( VAR_3 [ ( position % ( VAR_3 . length ) ) ] ) ; VAR_4 . setText ( type [ ( position % ( type . length ) ) ] ) ; VAR_5 . setText ( VAR_6 [ ( position % ( VAR_6 . length ) ) ] ) ; VAR_7 . setText ( VAR_8 [ ( position % ( VAR_8 . length ) ) ] ) ; }\n"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"project": "Math", "bugId": 61, "problem": " public PoissonDistributionImpl(double p) {\n      */\n     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n         if (p <= 0) {\n            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);\n         }\n         mean = p;\n         normal = new NormalDistributionImpl(p, FastMath.sqrt(p));", "fixed": " public PoissonDistributionImpl(double p) {\n      */\n     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n         if (p <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n         }\n         mean = p;\n         normal = new NormalDistributionImpl(p, FastMath.sqrt(p));", "observations": "Replaces Exception Thrown. Changed the type of exception thrown. Changed the imported type.", "repairActions": ["mcRem", "objInstAdd"], "repairPatterns": ["initFix", "notClassified"]}
{"problem": "public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , null ) ; new TYPE_2 ( ) { { VAR_4 . METHOD_3 ( VAR_5 , \"false\" ) ; result = \"true\" ; } } ; TYPE_3 . assertTrue ( VAR_6 . METHOD_4 ( VAR_1 , STRING_1 , STRING_2 ) ) ; TYPE_3 . METHOD_5 ( VAR_6 . METHOD_4 ( VAR_1 , STRING_3 , STRING_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , null ) ; new TYPE_2 ( ) { { VAR_4 . METHOD_3 ( VAR_5 , \"false\" ) ; result = \"true\" ; } } ; TYPE_3 . assertTrue ( VAR_6 . METHOD_4 ( VAR_1 , STRING_1 , STRING_2 , false ) ) ; TYPE_3 . METHOD_5 ( VAR_6 . METHOD_4 ( VAR_1 , STRING_3 , STRING_2 , false ) ) ; }\n"}
{"problem": "public java.lang.String METHOD_1 ( java.lang.String key , java.lang.String message ) { java.lang.String VAR_1 = null ; int VAR_2 = java.lang.Integer.parseInt ( key ) ; char [ ] VAR_3 ; for ( int VAR_4 = 0 ; VAR_4 < VAR_2 ; VAR_4 ++ ) { int VAR_5 = VAR_4 ; while ( VAR_5 < ( message . length ( ) ) ) { VAR_3 [ VAR_4 ] += message . METHOD_2 ( VAR_5 ) ; VAR_5 += VAR_2 ; } } VAR_1 = new java.lang.String ( VAR_3 ) ; return VAR_1 ; }\n", "fixed": "public java.lang.String METHOD_1 ( java.lang.String key , java.lang.String message ) { java.lang.String VAR_1 = null ; int VAR_2 = java.lang.Integer.parseInt ( key ) ; char [ ] VAR_3 = new char [ VAR_2 ] ; for ( int VAR_4 = 0 ; VAR_4 < VAR_2 ; VAR_4 ++ ) { int VAR_5 = VAR_4 ; while ( VAR_5 < ( message . length ( ) ) ) { VAR_3 [ VAR_4 ] += message . METHOD_2 ( VAR_5 ) ; VAR_5 += VAR_2 ; } } VAR_1 = new java.lang.String ( VAR_3 ) ; return VAR_1 ; }\n"}
{"problem": "public boolean METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_1 ( event ) ; if ( ! ( VAR_2 ) ) { if ( ( event . METHOD_2 ( ) ) == ( VAR_3 ) ) { if ( ( ( VAR_4 ) != null ) && ( VAR_4 . METHOD_3 ( ) ) ) { VAR_4 . METHOD_4 ( ) ; } if ( ( METHOD_5 ( ) ) && ( ( VAR_5 ) != null ) ) { METHOD_6 ( ) ; } } } return false ; }\n", "fixed": "public boolean METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_1 ( event ) ; if ( ! ( VAR_2 ) ) { if ( ( event . METHOD_2 ( ) ) == ( VAR_3 ) ) { if ( ( ( VAR_4 ) != null ) && ( VAR_4 . METHOD_3 ( ) ) ) { VAR_4 . METHOD_4 ( ) ; } if ( ( METHOD_5 ( ) ) && ( ( VAR_5 ) != null ) ) { METHOD_6 ( ) ; } } } return super . METHOD_1 ( event ) ; }\n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"problem": "private static java.lang.String [ ] METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String [ ] VAR_2 = new java.lang.String [ INT_1 ] ; TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ; VAR_2 [ 0 ] = TYPE_4 . toString ( VAR_3 . METHOD_4 ( ) ) ; VAR_2 [ 1 ] = TYPE_4 . toString ( VAR_3 . METHOD_5 ( ) ) ; return VAR_2 ; }\n", "fixed": "private static java.lang.String [ ] METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String [ ] VAR_2 = new java.lang.String [ INT_1 ] ; TYPE_2 VAR_3 = new TYPE_2 ( ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ; VAR_2 [ 0 ] = TYPE_4 . toString ( VAR_3 . METHOD_4 ( ) ) ; VAR_2 [ 1 ] = TYPE_4 . toString ( VAR_3 . METHOD_5 ( ) ) ; return VAR_2 ; }\n"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class),\n         @ApiResponse(code = 405, message = \"Validation exception\", response = Void.class) })\n    void updatePet(@Valid Pet body);\n     @POST\n     @Path(\"/{petId}\")", "fixed": "         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class),\n         @ApiResponse(code = 405, message = \"Validation exception\", response = Void.class) })\n    void updatePet(@Valid Pet body) throws Exception;\n     @POST\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; VAR_2 [ position ] = ! ( VAR_2 [ position ] ) ; if ( VAR_2 [ position ] ) { TYPE_1 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_5 ) ; } else { TYPE_1 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_7 ( new TYPE_2 ( ) ) . METHOD_6 ( VAR_5 ) ; } }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 [ position ] = ! ( VAR_2 [ position ] ) ; if ( VAR_2 [ position ] ) { TYPE_1 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_5 ) ; } else { TYPE_1 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_7 ( new TYPE_2 ( ) ) . METHOD_6 ( VAR_5 ) ; } }\n"}
{"problem": "private void METHOD_1 ( ) { this . add ( new TYPE_1 ( 0 , 0 , 0 ) ) ; this . add ( new TYPE_1 ( 1 , 0 , 0 ) ) ; this . add ( new TYPE_1 ( INT_1 , 0 , 0 ) ) ; this . add ( new TYPE_1 ( INT_2 , 0 , 0 ) ) ; this . add ( new TYPE_1 ( 0 , 0 , 1 ) ) ; }\n", "fixed": "protected void METHOD_1 ( ) { this . add ( new TYPE_1 ( 0 , 0 , 0 ) ) ; this . add ( new TYPE_1 ( 1 , 0 , 0 ) ) ; this . add ( new TYPE_1 ( INT_1 , 0 , 0 ) ) ; this . add ( new TYPE_1 ( INT_2 , 0 , 0 ) ) ; this . add ( new TYPE_1 ( 0 , 0 , 1 ) ) ; }\n"}
{"fixCommitSHA1": "2976be58f6062932d6c23e63af3d3b4395ac461a", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t}\n \t\tfor (int i = 0; i < SIZEOFLONG; ++i) {\n\t\t\tl |= (byteBuffer.get((SIZEOFLONG - 1) - i) & 0xff) << (i << 3);\n \t\t}\n \t\treturn l;", "fixed": " \t\t}\n \t\tfor (int i = 0; i < SIZEOFLONG; ++i) {\n\t\t\tl |= (byteBuffer.get((SIZEOFLONG - 1) - i) & 0xffL) << (i << 3);\n \t\t}\n \t\treturn l;", "sourceBeforeFix": "byteBuffer.get((SIZEOFLONG - 1) - i) & 0xff", "sourceAfterFix": "byteBuffer.get((SIZEOFLONG - 1) - i) & 0xffL"}
{"problem": "public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( ) { final TYPE_3 VAR_1 = METHOD_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_3 ( ) ; final int VAR_3 = VAR_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; final java.util.Properties VAR_4 = METHOD_6 ( ) ; final TYPE_1 VAR_5 = ( ( TYPE_1 ) ( VAR_6 . METHOD_1 ( VAR_4 , VAR_2 , VAR_3 , VAR_7 ) ) ) ; return VAR_5 ; }\n", "fixed": "public static < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( final java.util.Properties VAR_4 , final TYPE_3 VAR_1 ) { final java.lang.String VAR_2 = VAR_1 . METHOD_3 ( ) ; final int VAR_3 = VAR_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; final TYPE_1 VAR_5 = ( ( TYPE_1 ) ( VAR_6 . METHOD_1 ( VAR_4 , VAR_2 , VAR_3 , VAR_7 ) ) ) ; return VAR_5 ; }\n"}
{"problem": "private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( false ) ; int id ; java.lang.String VAR_2 = VAR_3 . getText ( ) ; id = java.lang.Integer.parseInt ( VAR_2 ) ; if ( ( VAR_2 . length ( ) ) != INT_1 ) { VAR_4 . setText ( STRING_1 ) ; } else if ( TYPE_2 . METHOD_3 ( id ) ) { VAR_4 . setText ( STRING_2 ) ; METHOD_4 ( ) ; VAR_5 . METHOD_5 ( id ) ; } else { VAR_4 . setText ( STRING_3 ) ; } }\n", "fixed": "private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( false ) ; int id ; java.lang.String VAR_2 = VAR_3 . getText ( ) ; if ( ( VAR_2 . length ( ) ) != INT_1 ) { VAR_4 . setText ( STRING_1 ) ; } else { id = java.lang.Integer.parseInt ( VAR_2 ) ; if ( TYPE_2 . METHOD_3 ( id ) ) { VAR_4 . setText ( STRING_2 ) ; METHOD_4 ( ) ; VAR_5 . METHOD_5 ( id ) ; } else { VAR_4 . setText ( STRING_3 ) ; } } }\n"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JBPMEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJBPMEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JBPMEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJBPMEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( ) throws java.io.IOException { if ( ! ( this . METHOD_2 ( ) ) ) return ; java.util.List < java.lang.String > VAR_1 = METHOD_3 ( ) ; TYPE_1 writer = new TYPE_1 ( ( ( this . METHOD_4 ( ) . toString ( ) ) + STRING_1 ) ) ; for ( java.lang.String VAR_2 : VAR_1 ) writer . METHOD_5 ( VAR_2 ) ; writer . METHOD_6 ( ) ; }\n", "fixed": "public void METHOD_1 ( ) throws java.io.IOException { if ( ! ( this . METHOD_2 ( ) ) ) return ; java.util.List < java.lang.String > VAR_1 = METHOD_3 ( ) ; TYPE_1 writer = new TYPE_1 ( ( ( this . METHOD_4 ( ) . toLowerCase ( ) ) + STRING_1 ) ) ; for ( java.lang.String VAR_2 : VAR_1 ) writer . METHOD_5 ( VAR_2 ) ; writer . METHOD_6 ( ) ; }\n"}
{"problem": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = null ; TYPE_2 query = VAR_4 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; query . METHOD_4 ( STRING_2 , VAR_1 ) ; query . METHOD_4 ( STRING_3 , VAR_2 ) ; java.util.List < TYPE_1 > list = query . list ( ) ; VAR_3 = list . get ( 0 ) ; return VAR_3 ; }\n", "fixed": "public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = null ; TYPE_2 query = VAR_4 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; query . METHOD_4 ( STRING_2 , VAR_1 ) ; query . METHOD_4 ( STRING_3 , VAR_2 ) ; java.util.List < TYPE_1 > list = query . list ( ) ; if ( ( list . size ( ) ) > 0 ) VAR_3 = list . get ( 0 ) ; return VAR_3 ; }\n"}
{"problem": "public synchronized void METHOD_1 ( double VAR_1 ) { TYPE_1 data = TYPE_1 . METHOD_2 ( INT_1 ) ; short VAR_2 = ( ( short ) ( java.lang.Math.round ( ( VAR_1 * INT_2 ) ) ) ) ; data . METHOD_3 ( VAR_2 ) ; VAR_3 . add ( new TYPE_2 ( VAR_4 ) ) ; METHOD_4 ( ) ; }\n", "fixed": "public synchronized void METHOD_1 ( double VAR_1 ) { TYPE_1 data = TYPE_1 . METHOD_2 ( INT_1 ) ; short VAR_2 = ( ( short ) ( java.lang.Math.round ( ( VAR_1 * INT_2 ) ) ) ) ; data . METHOD_3 ( VAR_2 ) ; VAR_3 . add ( new TYPE_2 ( data , VAR_4 ) ) ; METHOD_4 ( ) ; }\n"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"problem": "public void METHOD_1 ( android.view.View VAR_1 ) { int VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_2 == 1 ) { VAR_4 . METHOD_3 ( VAR_5 ) ; VAR_6 . METHOD_3 ( VAR_7 ) ; } if ( VAR_2 > 0 ) { VAR_2 -- ; VAR_3 . METHOD_4 ( VAR_2 ) ; } else if ( VAR_2 == 0 ) { VAR_3 . METHOD_4 ( VAR_2 ) ; } TYPE_1 . METHOD_5 ( STRING_1 , ( STRING_1 + VAR_2 ) ) ; }\n", "fixed": "public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_2 ) == 0 ) { VAR_4 . METHOD_3 ( VAR_7 ) ; VAR_6 . METHOD_3 ( VAR_5 ) ; } ( VAR_2 ) ++ ; VAR_3 . METHOD_4 ( VAR_2 ) ; }\n"}
{"problem": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; VAR_3 . remove ( VAR_1 ) ; TYPE_3 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; TYPE_3 . METHOD_5 ( ) ; if ( ( TYPE_4 . METHOD_6 ( ) ) != null ) { TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) ; } }\n", "fixed": "public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; VAR_3 . remove ( VAR_1 ) ; TYPE_3 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; if ( ( TYPE_4 . METHOD_6 ( ) ) != null ) { TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) ; } }\n"}
