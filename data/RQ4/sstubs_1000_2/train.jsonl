{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    private static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "852c8b720dd810c699d6303d0470efa246c84d26", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForRole\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRole\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRoles\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "322fa14393f4ab34e22f0e3ad569afe12415ad1d", "projectName": "naver.pinpoint", "bugType": "Change Binary Operator", "problem": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId > max) {\r\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "fixed": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId >= max) {\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "sourceBeforeFix": "newId > max", "sourceAfterFix": "newId >= max"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n\t\tthis.container = factory.getEmbdeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());", "fixed": " \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "                 .setMaxPoolSize(Integer.MAX_VALUE)\r\n                 .setKeepAliveTime(60L, TimeUnit.SECONDS);\r\n         builder.setTcpNoDelay(true).setKeepAlive(true)\r\n                .setConnectionTimeout(getTimeout())\r\n                 .setIOStrategy(SameThreadIOStrategy.getInstance());\r\n         transport = builder.build();\r\n         transport.setProcessor(filterChainBuilder.build());\r", "fixed": "                 .setMaxPoolSize(Integer.MAX_VALUE)\r\n                 .setKeepAliveTime(60L, TimeUnit.SECONDS);\r\n         builder.setTcpNoDelay(true).setKeepAlive(true)\r\n                .setConnectionTimeout(getConnectTimeout())\r\n                 .setIOStrategy(SameThreadIOStrategy.getInstance());\r\n         transport = builder.build();\r\n         transport.setProcessor(filterChainBuilder.build());\r", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "3a1c3bdf687a2cc85c7477c6986f2421e1833c64", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Override\n     public void start(StartContext context) throws StartException {\n        log.errorf(\"started ResourceAdapterService %s\", context.getController().getName());\n     }", "fixed": "     @Override\n     public void start(StartContext context) throws StartException {\n        log.infof(\"started ResourceAdapterService %s\", context.getController().getName());\n     }", "sourceBeforeFix": "log.errorf(\"started ResourceAdapterService %s\",context.getController().getName())", "sourceAfterFix": "log.infof(\"started ResourceAdapterService %s\",context.getController().getName())"}
{"fixCommitSHA1": "d1cc32143dffe1f3fbf41e1d14cc82ba9626f7fa", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         TabularData data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{false}, new String[]{\"boolean\"});\n         assertEquals(3, data.size());\n         data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{true}, new String[]{\"boolean\"});\n        assertEquals(6, data.size());\n     }\n     @Override", "fixed": "         TabularData data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{false}, new String[]{\"boolean\"});\n         assertEquals(3, data.size());\n         data = (TabularData) mbeanServer.invoke(on, \"explain\", new Object[]{true}, new String[]{\"boolean\"});\n        assertEquals(8, data.size());\n     }\n     @Override", "sourceBeforeFix": "assertEquals(6,data.size())", "sourceAfterFix": "assertEquals(8,data.size())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "d55fc4de68d1c8d9a5aff883e2c5f84ad02aa0b8", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void testConfiguration() throws Exception {\n        assertNotPresent(GsonConverter.class);\n         assertPresent(JacksonConverter.class);\n     }", "fixed": "     @Test\n     public void testConfiguration() throws Exception {\n        assertPresent(GsonConverter.class);\n         assertPresent(JacksonConverter.class);\n     }", "sourceBeforeFix": "assertNotPresent(GsonConverter.class)", "sourceAfterFix": "assertPresent(GsonConverter.class)"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(aggregate));", "fixed": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));", "sourceBeforeFix": "analysis.getType(windowFunction)", "sourceAfterFix": "analysis.getTypeWithCoercions(windowFunction)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "09998d1155cda1399a7624c7ed79b4611d974c4b", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedOne\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "fixed": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedTwo\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "sourceBeforeFix": "@UnrelatedOne", "sourceAfterFix": "@UnrelatedTwo"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "     }\n     public static String getJavadocTokenText(int[] tokens, int... subtractions) {\n        final StringBuilder result = new StringBuilder();\n         boolean first = true;\n         for (int token : tokens) {", "fixed": "     }\n     public static String getJavadocTokenText(int[] tokens, int... subtractions) {\n        final StringBuilder result = new StringBuilder(50);\n         boolean first = true;\n         for (int token : tokens) {", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(50)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n    public void setCheckFormat(String format) {\n         checkFormat = format;\n     }", "fixed": "      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n    public final void setCheckFormat(String format) {\n         checkFormat = format;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f7f180830156c75d419b946268840d79d2a0b747", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         }\n         Map<String, Object> params = new HashMap<String, Object>();\n        IntrospectionSupport.getProperties(configuration, params, null);\n         setProperties(clientConfig, params);\n     }\n }", "fixed": "         }\n         Map<String, Object> params = new HashMap<String, Object>();\n        IntrospectionSupport.getProperties(configuration, params, null, false);\n         setProperties(clientConfig, params);\n     }\n }", "sourceBeforeFix": "IntrospectionSupport.getProperties(configuration,params,null)", "sourceAfterFix": "IntrospectionSupport.getProperties(configuration,params,null,false)"}
{"fixCommitSHA1": "290bffbf3b0a6917be44513accef3a082543bbb4", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "         reporter.warning(\n             \"Duplicate record field \" + fieldName,\n             sourceName,\n            n.getLineno(), \"\", n.getCharno());\n       }\n     }", "fixed": "         reporter.warning(\n             \"Duplicate record field \" + fieldName,\n             sourceName,\n            n.getLineno(), \"\", fieldNameNode.getCharno());\n       }\n     }", "sourceBeforeFix": "n.getCharno()", "sourceAfterFix": "fieldNameNode.getCharno()"}
{"fixCommitSHA1": "6a95dd35511f4216481d8d0ffd4952ed1893a1c4", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       setPermission(loadPath, FsPermission.valueOf(\"-rwxrwxrwx\"));\n       try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {\n        TEST_UTIL.waitTableEnabled(tableName);\n         LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);\n         loader.doBulkLoad(loadPath, table);\n       }", "fixed": "       setPermission(loadPath, FsPermission.valueOf(\"-rwxrwxrwx\"));\n       try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {\n        TEST_UTIL.waitUntilAllRegionsAssigned(tableName);\n         LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);\n         loader.doBulkLoad(loadPath, table);\n       }", "sourceBeforeFix": "TEST_UTIL.waitTableEnabled(tableName)", "sourceAfterFix": "TEST_UTIL.waitUntilAllRegionsAssigned(tableName)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "     return secret;\n   }\n  String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }", "fixed": "     return secret;\n   }\n  public String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6a654d972b09abc6b3fb9e829ca7d226ea25adb9", "projectName": "facebook.presto", "bugType": "Change Unary Operator\t", "problem": "         return toStringHelper(this)\n                 .add(\"finished\", finished)\n                 .add(\"newTasks\", newTasks.size())\n                .add(\"blocked\", blocked.isDone())\n                 .add(\"splitsScheduled\", splitsScheduled)\n                 .add(\"blockedReason\", blockedReason)\n                 .toString();", "fixed": "         return toStringHelper(this)\n                 .add(\"finished\", finished)\n                 .add(\"newTasks\", newTasks.size())\n                .add(\"blocked\", !blocked.isDone())\n                 .add(\"splitsScheduled\", splitsScheduled)\n                 .add(\"blockedReason\", blockedReason)\n                 .toString();", "sourceBeforeFix": "blocked.isDone()", "sourceAfterFix": "!blocked.isDone()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * name whose type is capable of being refined.\n    * @return The current type of the node if it can be refined, null otherwise.\n    */\n  JSType getTypeIfRefinable(Node node, FlowScope scope) {\n     switch (node.getType()) {\n       case Token.NAME:\n         StaticSlot<JSType> nameVar = scope.getSlot(node.getString());", "fixed": "    * name whose type is capable of being refined.\n    * @return The current type of the node if it can be refined, null otherwise.\n    */\n  protected JSType getTypeIfRefinable(Node node, FlowScope scope) {\n     switch (node.getType()) {\n       case Token.NAME:\n         StaticSlot<JSType> nameVar = scope.getSlot(node.getString());", "sourceBeforeFix": "16", "sourceAfterFix": "20"}
{"fixCommitSHA1": "8a0b905dc71f5bc395637710c4f71400500c7b0b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " import org.apache.camel.management.event.CamelContextStartedEvent;\n import org.apache.camel.management.event.CamelContextStoppingEvent;\nclass Application {\n     @ContextName(\"camel-test-cdi\")\n     static class Hello extends RouteBuilder {", "fixed": " import org.apache.camel.management.event.CamelContextStartedEvent;\n import org.apache.camel.management.event.CamelContextStoppingEvent;\npublic class Application {\n     @ContextName(\"camel-test-cdi\")\n     static class Hello extends RouteBuilder {", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3c7e125fc08f7d752e848dcb7e83a574ce4bd8ec", "projectName": "google.closure-compiler", "bugType": "More Specific If", "problem": "     ConformanceConfig.Builder builder = ConformanceConfig.newBuilder();\n    if (textProto.charAt(0) == UTF8_BOM_CODE) {\n       textProto = textProto.substring(1);\n     }", "fixed": "     ConformanceConfig.Builder builder = ConformanceConfig.newBuilder();\n    if (!textProto.isEmpty() && textProto.charAt(0) == UTF8_BOM_CODE) {\n       textProto = textProto.substring(1);\n     }", "sourceBeforeFix": "textProto.charAt(0) == UTF8_BOM_CODE", "sourceAfterFix": "!textProto.isEmpty() && textProto.charAt(0) == UTF8_BOM_CODE"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set the list of illegal packages.\n      * @param from array of illegal packages\n      */\n    public void setIllegalPkgs(String... from) {\n         illegalPkgs = from.clone();\n     }", "fixed": "      * Set the list of illegal packages.\n      * @param from array of illegal packages\n      */\n    public final void setIllegalPkgs(String... from) {\n         illegalPkgs = from.clone();\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyGeneric,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d9a2914d0c3fc866e16a2cc4b67f83198a71a16c", "projectName": "apache.flink", "bugType": "Change Unary Operator\t", "problem": " \t@Override\n \tpublic boolean equals(Object obj) {\n\t\tif (super.equals(obj)) {\n \t\t\treturn false;\n \t\t}", "fixed": " \t@Override\n \tpublic boolean equals(Object obj) {\n\t\tif (!super.equals(obj)) {\n \t\t\treturn false;\n \t\t}", "sourceBeforeFix": "super.equals(obj)", "sourceAfterFix": "!super.equals(obj)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n         _seperator(mw, context);", "fixed": "         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n         _seperator(mw, context);", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "cbed2a13b8417c5f78f4f0ac1cea2f9b6e4f5526", "projectName": "apache.flink", "bugType": "Change Binary Operator", "problem": " \tprivate final Class<T> tupleType;\n \tpublic TupleTypeInfo(Class<T> tupleType, TypeInformation<?>... types) {\n\t\tif (types == null || types.length == 0 || types.length >= Tuple.MAX_ARITY) {\n \t\t\tthrow new IllegalArgumentException();\n \t\t}", "fixed": " \tprivate final Class<T> tupleType;\n \tpublic TupleTypeInfo(Class<T> tupleType, TypeInformation<?>... types) {\n\t\tif (types == null || types.length == 0 || types.length > Tuple.MAX_ARITY) {\n \t\t\tthrow new IllegalArgumentException();\n \t\t}", "sourceBeforeFix": "types.length >= Tuple.MAX_ARITY", "sourceAfterFix": "types.length > Tuple.MAX_ARITY"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "335a2826481725aabc86de8068909060894a274b", "projectName": "apache.flink", "bugType": "Change Binary Operator", "problem": " \t@Override\n \tpublic void writeRecord(Row row) throws IOException {\n\t\tif (typesArray != null && typesArray.length > 0 && typesArray.length == row.productArity()) {\n \t\t\tLOG.warn(\"Column SQL types array doesn't match arity of passed Row! Check the passed array...\");\n \t\t} \n \t\ttry {", "fixed": " \t@Override\n \tpublic void writeRecord(Row row) throws IOException {\n\t\tif (typesArray != null && typesArray.length > 0 && typesArray.length != row.productArity()) {\n \t\t\tLOG.warn(\"Column SQL types array doesn't match arity of passed Row! Check the passed array...\");\n \t\t} \n \t\ttry {", "sourceBeforeFix": "typesArray.length == row.productArity()", "sourceAfterFix": "typesArray.length != row.productArity()"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "         assertNull(url.getUsername());\r\n         assertNull(url.getPassword());\r\n         assertNull(url.getHost());\r\n        assertEquals(12, url.getPort());\r\n         assertEquals(\"context/path\", url.getPath());\r\n         assertEquals(2, url.getParameters().size());\r\n         assertEquals(\"1.0.0\", url.getParameter(\"version\"));\r", "fixed": "         assertNull(url.getUsername());\r\n         assertNull(url.getPassword());\r\n         assertNull(url.getHost());\r\n        assertEquals(0, url.getPort());\r\n         assertEquals(\"context/path\", url.getPath());\r\n         assertEquals(2, url.getParameters().size());\r\n         assertEquals(\"1.0.0\", url.getParameter(\"version\"));\r", "sourceBeforeFix": "assertEquals(12,url.getPort())", "sourceAfterFix": "assertEquals(0,url.getPort())"}
{"fixCommitSHA1": "5f1f4424eb8d949e136d05c9f8f5364ffcd76ea2", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n        Key.get(NoopChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)", "fixed": "         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)", "sourceBeforeFix": "NoopChatHandlerProvider.class", "sourceAfterFix": "ServiceAnnouncingChatHandlerProvider.class"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "50adab26654da357afe0079f7831fd1cf0f8f8cd", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " \npublic class IterableUtil {\n     private IterableUtil(){\n     }", "fixed": " \npublic final class IterableUtil {\n     private IterableUtil(){\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "c5edc0976145a61a5551053dfda8a8c3394100ee", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\tif (preferences.containsKey(name)) {\n \t\t\treturn preferences.get(name);\n \t\t} else {\n\t\t\tPreferences prefs = new LwjglPreferences(name);\n \t\t\tpreferences.put(name, prefs);\n \t\t\treturn prefs;\n \t\t}", "fixed": " \t\tif (preferences.containsKey(name)) {\n \t\t\treturn preferences.get(name);\n \t\t} else {\n\t\t\tPreferences prefs = new LwjglPreferences(name, \".prefs/\");\n \t\t\tpreferences.put(name, prefs);\n \t\t\treturn prefs;\n \t\t}", "sourceBeforeFix": "new LwjglPreferences(name)", "sourceAfterFix": "new LwjglPreferences(name,\".prefs/\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "1dd94a41119b58bb9a341b6897b0916add1fd344", "projectName": "facebook.presto", "bugType": "Same Function More Args", "problem": "         shardManager.createTable(tableId, columns, false);\n         long transactionId = shardManager.beginTransaction();\n        shardManager.commitShards(transactionId, tableId, columns, shardNodes, Optional.empty());\n         Set<UUID> actual = shardManager.getExistingShardUuids(tableId, ImmutableSet.of(shard1, shard2, UUID.randomUUID()));\n         Set<UUID> expected = ImmutableSet.of(shard1, shard2);\n         assertEquals(actual, expected);", "fixed": "         shardManager.createTable(tableId, columns, false);\n         long transactionId = shardManager.beginTransaction();\n        shardManager.commitShards(transactionId, tableId, columns, shardNodes, Optional.empty(), 0);\n         Set<UUID> actual = shardManager.getExistingShardUuids(tableId, ImmutableSet.of(shard1, shard2, UUID.randomUUID()));\n         Set<UUID> expected = ImmutableSet.of(shard1, shard2);\n         assertEquals(actual, expected);", "sourceBeforeFix": "shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty())", "sourceAfterFix": "shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty(),0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 13:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 13:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getId() + \"\" + patientState.getStartDate());\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r", "fixed": " \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n\t\t\t\t\tstatesAndStartDates.add(patientState.getState().getUuid() + \"\" + patientState.getStartDate());\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r", "sourceBeforeFix": "patientState.getState().getId()", "sourceAfterFix": "patientState.getState().getUuid()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "2f167f23f7360e2a909e3047838b59ee0e2a5cb4", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "             }.start();\n         }\n        Assert.assertTrue(latch.await(1, TimeUnit.MINUTES));\n         Collection<HazelcastInstance> instances = factory.getAllHazelcastInstances();\n         Assert.assertEquals(nodes, instances.size());", "fixed": "             }.start();\n         }\n        Assert.assertTrue(latch.await(5, TimeUnit.MINUTES));\n         Collection<HazelcastInstance> instances = factory.getAllHazelcastInstances();\n         Assert.assertEquals(nodes, instances.size());", "sourceBeforeFix": "latch.await(1,TimeUnit.MINUTES)", "sourceAfterFix": "latch.await(5,TimeUnit.MINUTES)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "75d3a0dec751780b96b1941fc00fbb8e47e34665", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "             localMember.setStringAttribute(\"key\" + i, HazelcastTestSupport.randomString());\n         }\n        assertOpenEventually(countDownLatch, 30);\n     }\n     @Test(timeout = 120000)", "fixed": "             localMember.setStringAttribute(\"key\" + i, HazelcastTestSupport.randomString());\n         }\n        assertOpenEventually(countDownLatch);\n     }\n     @Test(timeout = 120000)", "sourceBeforeFix": "assertOpenEventually(countDownLatch,30)", "sourceAfterFix": "assertOpenEventually(countDownLatch)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic TypeComparator<T> duplicate();\n }", "fixed": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic abstract TypeComparator<T> duplicate();\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "3407a44922289dc4ddb3ff87687b8766affeaad9", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\t}\n \t}\n\tprivate static class SpeedTestForwarder extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "fixed": " \t\t}\n \t}\n\t\n\tpublic static class SpeedTestForwarder extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "sourceBeforeFix": "10", "sourceAfterFix": "9"}
{"fixCommitSHA1": "cf35402980c9661ecfb22593da783a0cb3dfe913", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     assertFalse(CompressionTest.testCompression(\"LZO\"));\n     assertTrue(CompressionTest.testCompression(\"NONE\"));\n     assertTrue(CompressionTest.testCompression(\"GZ\"));\n    assertTrue(CompressionTest.testCompression(\"SNAPPY\"));\n   }\n }", "fixed": "     assertFalse(CompressionTest.testCompression(\"LZO\"));\n     assertTrue(CompressionTest.testCompression(\"NONE\"));\n     assertTrue(CompressionTest.testCompression(\"GZ\"));\n    assertFalse(CompressionTest.testCompression(\"SNAPPY\"));\n   }\n }", "sourceBeforeFix": "assertTrue(CompressionTest.testCompression(\"SNAPPY\"))", "sourceAfterFix": "assertFalse(CompressionTest.testCompression(\"SNAPPY\"))"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ce3f66d9f6766cf6499bae15efbc3961f79c4756", "projectName": "jersey.jersey", "bugType": "Less Specific If", "problem": "             final List<String> tempLibNames = new LinkedList<>();\n             for (ModuleInfo moduleInfo : appInfo.getModuleInfos()) {\n                 final String jarName = moduleInfo.getName();\n                if (jarName.endsWith(\".jar\")) {\n                     final String moduleName = jarName.substring(0, jarName.length() - 4);\n                     tempLibNames.add(moduleName);\n                     final Object bundleDescriptor = moduleInfo.getMetaData(EjbBundleDescriptorImpl.class.getName());", "fixed": "             final List<String> tempLibNames = new LinkedList<>();\n             for (ModuleInfo moduleInfo : appInfo.getModuleInfos()) {\n                 final String jarName = moduleInfo.getName();\n                if (jarName.endsWith(\".jar\") || jarName.endsWith(\".war\")) {\n                     final String moduleName = jarName.substring(0, jarName.length() - 4);\n                     tempLibNames.add(moduleName);\n                     final Object bundleDescriptor = moduleInfo.getMetaData(EjbBundleDescriptorImpl.class.getName());", "sourceBeforeFix": "jarName.endsWith(\".jar\")", "sourceAfterFix": "jarName.endsWith(\".jar\") || jarName.endsWith(\".war\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "031bc6f277b7b3f7160b2877db8005a79d5a3371", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " public class FileLengthCheck extends Check\n {\n     \n    int mMaxFileLength = 2000;\n     \n     public int[] getDefaultTokens()", "fixed": " public class FileLengthCheck extends Check\n {\n     \n    private int mMaxFileLength = 2000;\n     \n     public int[] getDefaultTokens()", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "30315bc85fc46b6fa08ededecdf1b9ebc781c7d1", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "         this.sampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n         this.sampledContinuationGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_CONTINUATION, UNSUPPORTED_GAUGE);\r\n         this.unsampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n        this.unsampledContinuationGuage = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n     }\r\n     @Override\r", "fixed": "         this.sampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n         this.sampledContinuationGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_SAMPLED_CONTINUATION, UNSUPPORTED_GAUGE);\r\n         this.unsampledNewGauge = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_NEW, UNSUPPORTED_GAUGE);\r\n        this.unsampledContinuationGuage = (Gauge<Long>)MetricMonitorValues.getMetric(metrics, TRANSACTION_UNSAMPLED_CONTINUATION, UNSUPPORTED_GAUGE);\r\n     }\r\n     @Override\r", "sourceBeforeFix": "MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_NEW,UNSUPPORTED_GAUGE)", "sourceAfterFix": "MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_CONTINUATION,UNSUPPORTED_GAUGE)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, false, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "fixed": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, true, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"max-inclusive\",ModelType.BOOLEAN)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"max-inclusive\",ModelType.BOOLEAN,true)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "fixed": "                 .retInt();\n     }\n    private static void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "b74ada90bf9bd92d33c6bc75e3564388c7eddf57", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         return result;\n     }\n    public class Builder {\n         private String principal = \"\";\n         private String password = \"\";", "fixed": "         return result;\n     }\n    public static class Builder {\n         private String principal = \"\";\n         private String password = \"\";", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SplunkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSplunkEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SplunkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSplunkEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c33166435d12434470ecc74eb9b969b89e9de695", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         assertTrueEventually(new AllTasksRunningWithinNumOfNodes(scheduler, 1));\n     }\n    @Test(timeout = 600000)\n     public void schedule_thenDisposeLeakTest() {\n         Config config = new Config()\n                 .addScheduledExecutorConfig(new ScheduledExecutorConfig()", "fixed": "         assertTrueEventually(new AllTasksRunningWithinNumOfNodes(scheduler, 1));\n     }\n    @Test(timeout = 1800000)\n     public void schedule_thenDisposeLeakTest() {\n         Config config = new Config()\n                 .addScheduledExecutorConfig(new ScheduledExecutorConfig()", "sourceBeforeFix": "timeout=600000", "sourceAfterFix": "timeout=1800000"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null);\n       }\n       return statsObj;\n     }", "fixed": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null, null);\n       }\n       return statsObj;\n     }", "sourceBeforeFix": "endFunction(\"get_column_statistics_by_partition: \",statsObj != null)", "sourceAfterFix": "endFunction(\"get_column_statistics_by_partition: \",statsObj != null,null)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "ea891b1fd030f0e7442611ed4c3c81893124712b", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IOException);\n             if (System.getProperty(\"os.name\").toLowerCase(ENGLISH).startsWith(\"windows\")) {\n                assertEquals(ex.getCause().getMessage(), \"Unable to read 2 bytes, got 0\");\n             }\n             else {\n                assertEquals(ex.getCause().getMessage(), \"Unable to read 1 bytes, got 0\");\n             }\n         }\n     }", "fixed": "         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IOException);\n             if (System.getProperty(\"os.name\").toLowerCase(ENGLISH).startsWith(\"windows\")) {\n                assertEquals(\"Unable to read 2 bytes, got 0\", ex.getCause().getMessage());\n             }\n             else {\n                assertEquals(\"Unable to read 1 bytes, got 0\", ex.getCause().getMessage());\n             }\n         }\n     }", "sourceBeforeFix": "assertEquals(ex.getCause().getMessage(),\"Unable to read 1 bytes, got 0\")", "sourceAfterFix": "assertEquals(\"Unable to read 1 bytes, got 0\",ex.getCause().getMessage())"}
{"fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       pushScope(s);\n       traverseBranch(root, null);\n       popScope();\n    } catch (Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "fixed": "       pushScope(s);\n       traverseBranch(root, null);\n       popScope();\n    } catch (Error | Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "sourceBeforeFix": "Exception unexpectedException", "sourceAfterFix": "Throwable unexpectedException"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         constructor.ret();\n     }\n    private void generateGetChannelCountMethod(ClassDefinition classDefinition, List<FieldDefinition> channelFields)\n     {\n         classDefinition.declareMethod(\n                 a(PUBLIC),", "fixed": "         constructor.ret();\n     }\n    private static void generateGetChannelCountMethod(ClassDefinition classDefinition, List<FieldDefinition> channelFields)\n     {\n         classDefinition.declareMethod(\n                 a(PUBLIC),", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "       notifyLatch.countDown();\n       try {\n        waitYieldLatch.await(25, TimeUnit.MILLISECONDS);\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);", "fixed": "       notifyLatch.countDown();\n       try {\n        waitYieldLatch.await(1000, TimeUnit.MILLISECONDS);\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);", "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tlog.warn(\"Error while getting extensions from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t}", "fixed": " \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting extensions from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "c98bab51de22a20990ff8805825e8638e0686464", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   @Test\n   public void testOnlineConfigChange() throws IOException {\n     LOG.debug(\"Starting the test\");\n    Admin admin = TEST_UTIL.getHBaseAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }", "fixed": "   @Test\n   public void testOnlineConfigChange() throws IOException {\n     LOG.debug(\"Starting the test\");\n    Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }", "sourceBeforeFix": "TEST_UTIL.getHBaseAdmin()", "sourceAfterFix": "TEST_UTIL.getAdmin()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25667, \"password\");\n         nagios.start();\n         super.setUp();", "fixed": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25669, \"password\");\n         nagios.start();\n         super.setUp();", "sourceBeforeFix": "new NagiosNscaStub(25667,\"password\")", "sourceAfterFix": "new NagiosNscaStub(25669,\"password\")"}
{"fixCommitSHA1": "032efde651a14f8175861d96a10a26b8948f5a54", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     public void kill() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n            instance.managementService.unregister();\n             instance.node.shutdown(true, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);", "fixed": "     public void kill() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n            instance.managementService.destroy();\n             instance.node.shutdown(true, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);", "sourceBeforeFix": "instance.managementService.unregister()", "sourceAfterFix": "instance.managementService.destroy()"}
{"fixCommitSHA1": "781f153ed21f62ab877ebb9e75cdff7330370cc4", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         new Thread(new Runnable() {\n             public void run() {\n                 try {\n                    Thread.sleep(10);\n                     clientRunnable.running = false;\n                     synchronized (clientRunnable.monitor) {\n                         clientRunnable.monitor.wait();", "fixed": "         new Thread(new Runnable() {\n             public void run() {\n                 try {\n                    Thread.sleep(50);\n                     clientRunnable.running = false;\n                     synchronized (clientRunnable.monitor) {\n                         clientRunnable.monitor.wait();", "sourceBeforeFix": "latch.await(5,TimeUnit.SECONDS)", "sourceAfterFix": "latch.await(25,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "d83dd417fff4ae2407e04a21056f331a773d970b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private boolean fallback;\n        public SampleLanguage(boolean fallback) {\n             this.fallback = fallback;\n         }", "fixed": "         private boolean fallback;\n        SampleLanguage(boolean fallback) {\n             this.fallback = fallback;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "6b3ba9232570ab991e2bbd3e52f98133544ac9bd", "projectName": "alibaba.fastjson", "bugType": "Less Specific If", "problem": "             }\n         }\n        if (arguments == null) {\n             return null;\n         }", "fixed": "             }\n         }\n        if (arguments == null || class_gd == null) {\n             return null;\n         }", "sourceBeforeFix": "arguments == null", "sourceAfterFix": "arguments == null || class_gd == null"}
{"fixCommitSHA1": "ca94fbcd444c6d36e7c779def6f364c69f1cf40d", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * multiple test migration versions. For each test specification added,\n \t * an entry will be added for each specified migration version.\n \t */\n\tprotected static final class TestSpecifications {\n \t\tprivate static final int DEFAULT_TEST_DATA_COUNT = 10;\n \t\tprivate static final String DEFAULT_SNAPSHOT_FILENAME_FORMAT = \"flink-%s-%s-snapshot\";", "fixed": " \t * multiple test migration versions. For each test specification added,\n \t * an entry will be added for each specified migration version.\n \t */\n\tpublic static final class TestSpecifications {\n \t\tprivate static final int DEFAULT_TEST_DATA_COUNT = 10;\n \t\tprivate static final String DEFAULT_SNAPSHOT_FILENAME_FORMAT = \"flink-%s-%s-snapshot\";", "sourceBeforeFix": "28", "sourceAfterFix": "25"}
{"fixCommitSHA1": "c136490318387755a73ef7061050010b0ffe6125", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n                AtmosphereResponse.create(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);", "fixed": "         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n                AtmosphereResponse.newInstance(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);", "sourceBeforeFix": "AtmosphereResponse.create()", "sourceAfterFix": "AtmosphereResponse.newInstance()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f77b53a247c6ed83a2c5fc7d2a068a8c13c20866", "projectName": "Alluxio.alluxio", "bugType": "Change Unary Operator\t", "problem": "     }\n     boolean shortCircuit = Configuration.getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED);\n    boolean sourceSupportsDomainSocket = !NettyUtils.isDomainSocketSupported(dataSource);\n     boolean sourceIsLocal = dataSourceType == BlockInStreamSource.LOCAL;", "fixed": "     }\n     boolean shortCircuit = Configuration.getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED);\n    boolean sourceSupportsDomainSocket = NettyUtils.isDomainSocketSupported(dataSource);\n     boolean sourceIsLocal = dataSourceType == BlockInStreamSource.LOCAL;", "sourceBeforeFix": "!NettyUtils.isDomainSocketSupported(dataSource)", "sourceAfterFix": "NettyUtils.isDomainSocketSupported(dataSource)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "f40a8efd0788a6385a62ef5052f71f3e6b7db295", "projectName": "libgdx.libgdx", "bugType": "Change Modifier", "problem": " \t\tfinal float ty = target.y - y * dot;\r\n \t\tfinal float tz = target.z - z * dot;\r\n \t\tfinal float l2 = tx * tx + ty * ty + tz * tz;\r\n\t\tfinal float dl = (l2 == 0 || l2 == 1f) ? 1f : 1f / (float)Math.sqrt(l2);\r\n\t\treturn this.mul((float)Math.cos(theta)).add(tx * dl * st, ty * dl * st, tz * dl * st).nor();\r\n \t}\r\n \t\r", "fixed": " \t\tfinal float ty = target.y - y * dot;\r\n \t\tfinal float tz = target.z - z * dot;\r\n \t\tfinal float l2 = tx * tx + ty * ty + tz * tz;\r\n\t\tfinal float dl = st * ((l2 == 0 || l2 == 1f) ? 1f : 1f / (float)Math.sqrt(l2));\r\n\t\treturn this.mul((float)Math.cos(theta)).add(tx * dl, ty * dl, tz * dl).nor();\r\n \t}\r\n \t\r", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "             .containsKey(\"name.invalidPattern\"));\n     }\n    private void verifyConfigNode(\n         DefaultConfiguration config, String name, int childrenLength,\n         Properties atts) throws Exception {\n         assertEquals(\"name.\", name, config.getName());", "fixed": "             .containsKey(\"name.invalidPattern\"));\n     }\n    private static void verifyConfigNode(\n         DefaultConfiguration config, String name, int childrenLength,\n         Properties atts) throws Exception {\n         assertEquals(\"name.\", name, config.getName());", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n\t\t\t\t\tlogger.trace(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \t\t    \t\thandleIncomingMessage(recvMessage);", "fixed": " \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n\t\t\t\t\tlogger.debug(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \t\t    \t\thandleIncomingMessage(recvMessage);", "sourceBeforeFix": "logger.trace(\"Receive queue TAKE: Length={}\",recvQueue.size())", "sourceAfterFix": "logger.debug(\"Receive queue TAKE: Length={}\",recvQueue.size())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastListEndpointBuilder\n             extends\n                 AdvancedHazelcastListEndpointConsumerBuilder, AdvancedHazelcastListEndpointProducerBuilder {\n         default HazelcastListEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastListEndpointBuilder\n             extends\n                 AdvancedHazelcastListEndpointConsumerBuilder, AdvancedHazelcastListEndpointProducerBuilder {\n         default HazelcastListEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "70f070f7158f18eb1396fedc8ae63b3827627219", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     public void write(PortableWriter writer)\n             throws IOException {\n        writer.writeBoolean(\"c\", create);\n         writer.writeInt(\"p\", partitionId);\n         final ObjectDataOutput out = writer.getRawDataOutput();\n         out.writeObject(cacheConfig);", "fixed": "     public void write(PortableWriter writer)\n             throws IOException {\n        writer.writeBoolean(\"c\", createAlsoOnOthers);\n         writer.writeInt(\"p\", partitionId);\n         final ObjectDataOutput out = writer.getRawDataOutput();\n         out.writeObject(cacheConfig);", "sourceBeforeFix": "new CacheCreateConfigOperation(cacheConfig,create,false)", "sourceAfterFix": "new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     private Sink body;\n     boolean done;\n    public CacheRequestImpl(final DiskLruCache.Editor editor) {\n       this.editor = editor;\n       this.cacheOut = editor.newSink(ENTRY_BODY);\n       this.body = new ForwardingSink(cacheOut) {", "fixed": "     private Sink body;\n     boolean done;\n    CacheRequestImpl(final DiskLruCache.Editor editor) {\n       this.editor = editor;\n       this.cacheOut = editor.newSink(ENTRY_BODY);\n       this.body = new ForwardingSink(cacheOut) {", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedXsltEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default XsltEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedXsltEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default XsltEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "270185aba54cef1d8ce59ec347b5623f2e502afe", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = s.count();\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).doubleValue();", "fixed": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = RT.count(s);\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).doubleValue();", "sourceBeforeFix": "s.count()", "sourceAfterFix": "RT.count(s)"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(2000L)\r\n                     .batchSize(5)\r", "fixed": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(500L)\r\n                     .batchSize(5)\r", "sourceBeforeFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(2000L)", "sourceAfterFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(500L)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "aa90e04b5e6eb7f6d46dde16867196329568324e", "projectName": "Activiti.Activiti", "bugType": "Change Binary Operator", "problem": "         try {\n           if (StringUtils.isNotEmpty(fieldValue)) {\n             LocalDate dateValue = LocalDate.parse(fieldValue);\n            variables.put(field.getId(), dateValue);\n           }\n         } catch (Exception e) {\n           logger.error(\"Error parsing form date value for process instance \" + processInstanceId + \" with value \" + fieldValue, e);", "fixed": "         try {\n           if (StringUtils.isNotEmpty(fieldValue)) {\n             LocalDate dateValue = LocalDate.parse(fieldValue);\n            variables.put(field.getId(), dateValue.toString(\"yyyy-M-d\"));\n           }\n         } catch (Exception e) {\n           logger.error(\"Error parsing form date value for process instance \" + processInstanceId + \" with value \" + fieldValue, e);", "sourceBeforeFix": "submittedNode.get(\"values\") != null", "sourceAfterFix": "submittedNode.get(\"values\") == null"}
{"fixCommitSHA1": "f467d695be2ae4ee7d5c2978191e1415aef37a9e", "projectName": "netty.netty", "bugType": "Change Boolean Literal", "problem": "      * Creates a builder for new client-side {@link SslContext}.\n      */\n     public static SslContextBuilder forClient() {\n        return new SslContextBuilder(true);\n     }\n     /**", "fixed": "      * Creates a builder for new client-side {@link SslContext}.\n      */\n     public static SslContextBuilder forClient() {\n        return new SslContextBuilder(false);\n     }\n     /**", "sourceBeforeFix": "new SslContextBuilder(false)", "sourceAfterFix": "new SslContextBuilder(true)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.info(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "fixed": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "sourceBeforeFix": "logger.info(\"Computing Control Flow Graph\")", "sourceAfterFix": "logger.fine(\"Computing Control Flow Graph\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {", "fixed": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {", "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cb26d2f60ca204a6343a6cbf589e170b171a4303", "projectName": "yusuke.twitter4j", "bugType": "Change Caller in Function Call", "problem": "                     if (!json.isNull (\"sender\")) {\n                         userStreamListener.onDirectMessage (new DirectMessageJSONImpl (json));\n                     } else if (!json.isNull(\"text\")) {\n                        userStreamListener.onStatus(new StatusJSONImpl(json));\n                     } else if (!json.isNull(\"delete\")) {\n                         listener.onDeletionNotice(new StatusDeletionNoticeImpl(json));\n                     } else if (!json.isNull(\"limit\")) {", "fixed": "                     if (!json.isNull (\"sender\")) {\n                         userStreamListener.onDirectMessage (new DirectMessageJSONImpl (json));\n                     } else if (!json.isNull(\"text\")) {\n                        listener.onStatus(new StatusJSONImpl(json));\n                     } else if (!json.isNull(\"delete\")) {\n                         listener.onDeletionNotice(new StatusDeletionNoticeImpl(json));\n                     } else if (!json.isNull(\"limit\")) {", "sourceBeforeFix": "userStreamListener.onStatus(new StatusJSONImpl(json))", "sourceAfterFix": "listener.onStatus(new StatusJSONImpl(json))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "0aaa94462bb08336d43b9c8becbbd538108fa318", "projectName": "Atmosphere.atmosphere", "bugType": "Change Caller in Function Call", "problem": "         if (!wasResumed && isAtmosphereResourceValid(r)) {\n             logger.trace(\"Associating AtmosphereResource {} with Broadcaster {}\", r.uuid(), getID());\n            String parentUUID = (String) r.getRequest().getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n             if (!backwardCompatible && parentUUID != null) {\n                 AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);\n                 if (p != null && !resources.contains(p)) {", "fixed": "         if (!wasResumed && isAtmosphereResourceValid(r)) {\n             logger.trace(\"Associating AtmosphereResource {} with Broadcaster {}\", r.uuid(), getID());\n            String parentUUID = (String) AtmosphereResourceImpl.class.cast(r).getRequest(false).getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n             if (!backwardCompatible && parentUUID != null) {\n                 AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);\n                 if (p != null && !resources.contains(p)) {", "sourceBeforeFix": "r.getRequest()", "sourceAfterFix": "rImpl.getRequest()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "dc3e306e42f482e9fc8a92963a50c7546ffeda4c", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "     @Override\n     protected void runChild(final FrameworkMethod method, final RunNotifier notifier) {\n        while (numThreads.get() > MAX_THREADS) {\n             try {\n                 Thread.sleep(25);\n             } catch (InterruptedException e) {", "fixed": "     @Override\n     protected void runChild(final FrameworkMethod method, final RunNotifier notifier) {\n        while (numThreads.get() >= MAX_THREADS) {\n             try {\n                 Thread.sleep(25);\n             } catch (InterruptedException e) {", "sourceBeforeFix": "numThreads.get() > MAX_THREADS", "sourceAfterFix": "numThreads.get() >= MAX_THREADS"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "981f6d224f6adbfca7c62e73ef7f86f3bfc29f4a", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                 d.setMinorVersion(Integer.parseInt(servletVersion.charAt(2) + \"\"));\n             } else {\n                 d.setMajorVersion(3);\n                d.setMajorVersion(1);\n             }", "fixed": "                 d.setMinorVersion(Integer.parseInt(servletVersion.charAt(2) + \"\"));\n             } else {\n                 d.setMajorVersion(3);\n                d.setMinorVersion(1);\n             }", "sourceBeforeFix": "d.setMajorVersion(1)", "sourceAfterFix": "d.setMinorVersion(1)"}
{"fixCommitSHA1": "f616c0c70964fb4e88c3dc60c59d99b6d1d4759a", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "   }\n   @Test\n  public void testTableWithMaxSize() {\n     HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(), 2);", "fixed": "   }\n   @Test\n  public void testTableWithMaxSize() throws Exception {\n     HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(), 2);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HipchatEndpointBuilder\n             extends\n                 HipchatEndpointConsumerBuilder, HipchatEndpointProducerBuilder {\n         default AdvancedHipchatEndpointBuilder advanced() {", "fixed": "     \n    public interface HipchatEndpointBuilder\n             extends\n                 HipchatEndpointConsumerBuilder, HipchatEndpointProducerBuilder {\n         default AdvancedHipchatEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithListInput(@Valid List<User> body);\n     @DELETE\n     @Path(\"/{username}\")", "fixed": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n     @DELETE\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "ef6c3433dbf2f8d85ef23d4cf1ca0d3520ac2957", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " @Deprecated\n public class NameSupport extends LayoutSupport<NameTemplate> {\n\tprivate static NameSupport singleton;\n \tstatic Log log = LogFactory.getLog(NameSupport.class);", "fixed": " @Deprecated\n public class NameSupport extends LayoutSupport<NameTemplate> {\n\tprivate static volatile NameSupport singleton;\n \tstatic Log log = LogFactory.getLog(NameSupport.class);", "sourceBeforeFix": "10", "sourceAfterFix": "74"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "fixed": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic abstract boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "2b77ee60c2b8229ff24ac01937d16ec4dc36fe3d", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "     List<ExecutionEntity> childExecutions = executionManager\n      .findChildExecutionsByParentExecutionId(processInstanceId);\n     for (ExecutionEntity executionEntity : childExecutions) {\n       validateAndSwitchVersionOfExecution(commandContext, executionEntity, newProcessDefinition);\n     }", "fixed": "     List<ExecutionEntity> childExecutions = executionManager\n      .findChildExecutionsByProcessInstanceId(processInstanceId);\n     for (ExecutionEntity executionEntity : childExecutions) {\n       validateAndSwitchVersionOfExecution(commandContext, executionEntity, newProcessDefinition);\n     }", "sourceBeforeFix": "executionManager.findChildExecutionsByParentExecutionId(processInstanceId)", "sourceAfterFix": "executionManager.findChildExecutionsByProcessInstanceId(processInstanceId)"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000L * FILES_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());", "fixed": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000.0 * FILES_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());", "sourceBeforeFix": "1000L * FILES_BYTES", "sourceAfterFix": "1000.0 * FILES_BYTES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9fe147f0d526ec84399f4b1d1ef58bb996466038", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     mMasterInfo.createFile(\"testFile\", Constants.DEFAULT_BLOCK_SIZE_BYTE);\n   }\n  @Test(expected = InvalidPathException.class)\n   public void createFileInvalidPathTest2() throws InvalidPathException, FileAlreadyExistException,\n       BlockInfoException, TachyonException {\n     mMasterInfo.createFile(\"/\", Constants.DEFAULT_BLOCK_SIZE_BYTE);", "fixed": "     mMasterInfo.createFile(\"testFile\", Constants.DEFAULT_BLOCK_SIZE_BYTE);\n   }\n  @Test(expected = FileAlreadyExistException.class)\n   public void createFileInvalidPathTest2() throws InvalidPathException, FileAlreadyExistException,\n       BlockInfoException, TachyonException {\n     mMasterInfo.createFile(\"/\", Constants.DEFAULT_BLOCK_SIZE_BYTE);", "sourceBeforeFix": "InvalidPathException.class", "sourceAfterFix": "FileAlreadyExistException.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedPubNubEndpointBuilder\n             extends\n                 AdvancedPubNubEndpointConsumerBuilder, AdvancedPubNubEndpointProducerBuilder {\n         default PubNubEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedPubNubEndpointBuilder\n             extends\n                 AdvancedPubNubEndpointConsumerBuilder, AdvancedPubNubEndpointProducerBuilder {\n         default PubNubEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "91c086b7af22b6cfaf2f66b2c872b752dc10a19c", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n             LOG.trace(\"List files {} found {} files\", file.getAbsoluteFilePath(), files.size());\n             for (ChannelSftp.LsEntry f : files) {\n                if (f.getFilename().equals(file.getFileName())) {\n                     newLastModified = f.getAttrs().getMTime();\n                     newLength = f.getAttrs().getSize();\n                 }", "fixed": "             }\n             LOG.trace(\"List files {} found {} files\", file.getAbsoluteFilePath(), files.size());\n             for (ChannelSftp.LsEntry f : files) {\n                if (f.getFilename().equals(file.getFileNameOnly())) {\n                     newLastModified = f.getAttrs().getMTime();\n                     newLength = f.getAttrs().getSize();\n                 }", "sourceBeforeFix": "file.getFileName()", "sourceAfterFix": "file.getFileNameOnly()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedOptaPlannerEndpointBuilder\n             extends\n                 AdvancedOptaPlannerEndpointConsumerBuilder, AdvancedOptaPlannerEndpointProducerBuilder {\n         default OptaPlannerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedOptaPlannerEndpointBuilder\n             extends\n                 AdvancedOptaPlannerEndpointConsumerBuilder, AdvancedOptaPlannerEndpointProducerBuilder {\n         default OptaPlannerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixMapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixMapEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AtomixMapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixMapEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param staticImport\n          *        if import is static.\n          */\n        public ImportDetails(String importFullPath,\n                 int lineNumber, String importGroup, boolean staticImport) {\n             this.importFullPath = importFullPath;\n             this.lineNumber = lineNumber;", "fixed": "          * @param staticImport\n          *        if import is static.\n          */\n        ImportDetails(String importFullPath,\n                 int lineNumber, String importGroup, boolean staticImport) {\n             this.importFullPath = importFullPath;\n             this.lineNumber = lineNumber;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCouchDbEndpointBuilder\n             extends\n                 AdvancedCouchDbEndpointConsumerBuilder, AdvancedCouchDbEndpointProducerBuilder {\n         default CouchDbEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCouchDbEndpointBuilder\n             extends\n                 AdvancedCouchDbEndpointConsumerBuilder, AdvancedCouchDbEndpointProducerBuilder {\n         default CouchDbEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "eb1c97b3b99bca59971809260ad2977d5e5c886b", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "     @Override\n     public boolean isEmpty() {\n        return peekNode() == null;\n     }\n     @Override", "fixed": "     @Override\n     public boolean isEmpty() {\n        return headRef() == tailRef();\n     }\n     @Override", "sourceBeforeFix": "peekNode()", "sourceAfterFix": "headRef()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "204d9f571caab35a0adb72ffd87fd9c85a12300a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       if (!usedPlaceholders.contains(phName)) {\n         throw new MalformedException(\n             \"Unused message placeholder: \" + phName,\n            objLitNode);\n       }\n     }\n   }", "fixed": "       if (!usedPlaceholders.contains(phName)) {\n         throw new MalformedException(\n             \"Unused message placeholder: \" + phName,\n            node);\n       }\n     }\n   }", "sourceBeforeFix": "new MalformedException(\"Unused message placeholder: \" + phName,objLitNode)", "sourceAfterFix": "new MalformedException(\"Unused message placeholder: \" + phName,node)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface VertxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedVertxEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface VertxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedVertxEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c4ffe721c786c54074a6913cb889d46e83bb32c1", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t\t\tthrows BeansException {\n \t\t\tif (bean.getClass().isAssignableFrom(JmsTemplate.class)) {\n \t\t\t\tJmsTemplate jmsTemplate = (JmsTemplate) bean;\n\t\t\t\tjmsTemplate.setPubSubDomain(false);\n \t\t\t}\n \t\t\treturn bean;\n \t\t}", "fixed": " \t\t\t\tthrows BeansException {\n \t\t\tif (bean.getClass().isAssignableFrom(JmsTemplate.class)) {\n \t\t\t\tJmsTemplate jmsTemplate = (JmsTemplate) bean;\n\t\t\t\tjmsTemplate.setPubSubDomain(true);\n \t\t\t}\n \t\t\treturn bean;\n \t\t}", "sourceBeforeFix": "assertTrue(jmsTemplate.isPubSubDomain())", "sourceAfterFix": "assertFalse(jmsTemplate.isPubSubDomain())"}
{"fixCommitSHA1": "e668660a9ca77bc1bfc091967cc10975594d884e", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n            } else if (config.getStorageImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());", "fixed": "                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n            } else if (config.getStrategyImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());", "sourceBeforeFix": "config.getStorageImpl()", "sourceAfterFix": "config.getStrategyImpl()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "11fc33161f47544de5d2c50444340438f09a5b82", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\t}\r\n \t\tpublic boolean hasChildRecursive (String name) {\r\n\t\t\tif (attributes == null) return false;\r\n \t\t\treturn getChildByNameRecursive(name) != null;\r\n \t\t}\r", "fixed": " \t\t}\r\n \t\tpublic boolean hasChildRecursive (String name) {\r\n\t\t\tif (children == null) return false;\r\n \t\t\treturn getChildByNameRecursive(name) != null;\r\n \t\t}\r", "sourceBeforeFix": "attributes == null", "sourceAfterFix": "children == null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NagiosEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedNagiosEndpointBuilder advanced() {\n             return (AdvancedNagiosEndpointBuilder) this;\n         }", "fixed": "     \n    public interface NagiosEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedNagiosEndpointBuilder advanced() {\n             return (AdvancedNagiosEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5db9d6a3a54f5f3850a9dd2bedebdce45eca082a", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "   USER_NETWORK_NETTY_CHANNEL_POOL_SIZE_MAX(Name.USER_NETWORK_NETTY_CHANNEL_POOL_SIZE_MAX, 1024),\n   USER_NETWORK_NETTY_CHANNEL_POOL_GC_THRESHOLD_MS(\n       Name.USER_NETWORK_NETTY_CHANNEL_POOL_GC_THRESHOLD_MS, 300 * Constants.SECOND_MS),\n  USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED, false),\n   USER_UFS_DELEGATION_READ_BUFFER_SIZE_BYTES(Name.USER_UFS_DELEGATION_READ_BUFFER_SIZE_BYTES,\n       \"8MB\"),\n   USER_UFS_DELEGATION_WRITE_BUFFER_SIZE_BYTES(Name.USER_UFS_DELEGATION_WRITE_BUFFER_SIZE_BYTES,", "fixed": "   USER_NETWORK_NETTY_CHANNEL_POOL_SIZE_MAX(Name.USER_NETWORK_NETTY_CHANNEL_POOL_SIZE_MAX, 1024),\n   USER_NETWORK_NETTY_CHANNEL_POOL_GC_THRESHOLD_MS(\n       Name.USER_NETWORK_NETTY_CHANNEL_POOL_GC_THRESHOLD_MS, 300 * Constants.SECOND_MS),\n  USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED, true),\n   USER_UFS_DELEGATION_READ_BUFFER_SIZE_BYTES(Name.USER_UFS_DELEGATION_READ_BUFFER_SIZE_BYTES,\n       \"8MB\"),\n   USER_UFS_DELEGATION_WRITE_BUFFER_SIZE_BYTES(Name.USER_UFS_DELEGATION_WRITE_BUFFER_SIZE_BYTES,", "sourceBeforeFix": "USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,false)", "sourceAfterFix": "USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedVmEndpointBuilder\n             extends\n                 AdvancedVmEndpointConsumerBuilder, AdvancedVmEndpointProducerBuilder {\n         default VmEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedVmEndpointBuilder\n             extends\n                 AdvancedVmEndpointConsumerBuilder, AdvancedVmEndpointProducerBuilder {\n         default VmEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3e97b0501c42c4adc47d32db7484295646632263", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "     @Override\n     public int getPeriodSeconds() {\n        return 30;\n     }\n     @Override", "fixed": "     @Override\n     public int getPeriodSeconds() {\n        return 2;\n     }\n     @Override", "sourceBeforeFix": "return 30; ", "sourceAfterFix": "return 2; "}
{"fixCommitSHA1": "ec6f0cffe68e0736c04783b61f980f1271064dd9", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public int hashCode() {\n     return edgeValueMap().hashCode();\n   }", "fixed": "   }\n   @Override\n  public final int hashCode() {\n     return edgeValueMap().hashCode();\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "3ec97c1bb9c55bded42db23e7b2d3e614659f7df", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\tString prefix = \"integration.channel.\" + name;\n \t\t\tmetrics.addAll(getStatistics(prefix + \".errorRate\",\n \t\t\t\t\texporter.getChannelErrorRate(name)));\n\t\t\tmetrics.add(new Metric<Integer>(prefix + \".sendCount\", exporter\n\t\t\t\t\t.getChannelSendCount(name)));\n \t\t\tmetrics.addAll(getStatistics(prefix + \".sendRate\",\n \t\t\t\t\texporter.getChannelSendRate(name)));\n \t\t\tmetrics.add(new Metric<Long>(prefix + \".receiveCount\", exporter", "fixed": " \t\t\tString prefix = \"integration.channel.\" + name;\n \t\t\tmetrics.addAll(getStatistics(prefix + \".errorRate\",\n \t\t\t\t\texporter.getChannelErrorRate(name)));\n\t\t\tmetrics.add(new Metric<Long>(prefix + \".sendCount\", exporter\n\t\t\t\t\t.getChannelSendCountLong(name)));\n \t\t\tmetrics.addAll(getStatistics(prefix + \".sendRate\",\n \t\t\t\t\texporter.getChannelSendRate(name)));\n \t\t\tmetrics.add(new Metric<Long>(prefix + \".receiveCount\", exporter", "sourceBeforeFix": "Metric<Integer>", "sourceAfterFix": "Metric<Long>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DozerEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedDozerEndpointBuilder advanced() {\n             return (AdvancedDozerEndpointBuilder) this;\n         }", "fixed": "     \n    public interface DozerEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedDozerEndpointBuilder advanced() {\n             return (AdvancedDozerEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "886096e8fc457546dd4071295b7c5cce2d722ecc", "projectName": "javaee-samples.javaee7-samples", "bugType": "Change Identifier Used", "problem": "                 MyManagedScheduledBatchBean.class,\n                 MyManagedScheduledBatchAlternative.class)\n             .addAsWebInfResource(\n                new StringAsset(beansXml.createAlternatives().clazz(\n                     MyManagedScheduledBatchAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName())\n             .addAsResource(\"META-INF/batch-jobs/myJob.xml\");", "fixed": "                 MyManagedScheduledBatchBean.class,\n                 MyManagedScheduledBatchAlternative.class)\n             .addAsWebInfResource(\n                new StringAsset(beansXml.getOrCreateAlternatives().clazz(\n                     MyManagedScheduledBatchAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName())\n             .addAsResource(\"META-INF/batch-jobs/myJob.xml\");", "sourceBeforeFix": "beansXml.createAlternatives()", "sourceAfterFix": "beansXml.getOrCreateAlternatives()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cddf42c30c1b839e44c03e017ccdb3619d3aa967", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tif (person.isPersonVoided()) {\r\n\t\t\tif (!StringUtils.hasLength(person.getVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r", "fixed": " \t\tif (person.isPersonVoided()) {\r\n\t\t\tif (!StringUtils.hasLength(person.getPersonVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r", "sourceBeforeFix": "person.getVoidReason()", "sourceAfterFix": "person.getPersonVoidReason()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "f408cdd9b3a169c323e90bca58b349f256dbe82d", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected MBeanServerConnection getMBeanServer() throws Exception {\n        MBeanServerConnectionProvider provider = new MBeanServerConnectionProvider(InetAddress.getLocalHost(), 1090);\n         return provider.getConnection();\n     }\n }", "fixed": "     @Override\n     protected MBeanServerConnection getMBeanServer() throws Exception {\n        MBeanServerConnectionProvider provider = new MBeanServerConnectionProvider(InetAddress.getByName(\"127.0.0.1\"), 1090);\n         return provider.getConnection();\n     }\n }", "sourceBeforeFix": "InetAddress.getLocalHost()", "sourceAfterFix": "InetAddress.getByName(\"127.0.0.1\")"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.info(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "fixed": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "sourceBeforeFix": "logger.info(\"Remove try/catch/finally\")", "sourceAfterFix": "logger.fine(\"Remove try/catch/finally\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastMapEndpointBuilder\n             extends\n                 AdvancedHazelcastMapEndpointConsumerBuilder, AdvancedHazelcastMapEndpointProducerBuilder {\n         default HazelcastMapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastMapEndpointBuilder\n             extends\n                 AdvancedHazelcastMapEndpointConsumerBuilder, AdvancedHazelcastMapEndpointProducerBuilder {\n         default HazelcastMapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a36966d96196f3d64daa2809b7bc6077eedc5a9d", "projectName": "swagger-api.swagger-codegen", "bugType": "Same Function More Args", "problem": "         \"Bool\",\n         \"Void\",\n         \"String\",\n        \"Character\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(", "fixed": "         \"Bool\",\n         \"Void\",\n         \"String\",\n        \"Character\",\n        \"AnyObject\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(", "sourceBeforeFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\")", "sourceAfterFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\",\"AnyObject\")"}
{"fixCommitSHA1": "3407a44922289dc4ddb3ff87687b8766affeaad9", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "\tprivate static class SpeedTestProducer extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "fixed": "\t\n\tpublic static class SpeedTestProducer extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "sourceBeforeFix": "10", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "fixed": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "sourceBeforeFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n                    Thread.sleep(50);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r", "fixed": "             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e9f14f107361d9cef5582c2d2a8e657691e76ec6", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "fixed": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "sourceBeforeFix": "mockRegionInfo.isMetaRegion()", "sourceAfterFix": "mockRegionInfo.isMetaTable()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2c434d09d831b7fcb8e0f4d22047637520d11be3", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.error(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");", "fixed": "       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");", "sourceBeforeFix": "DiagnosticType.error(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")", "sourceAfterFix": "DiagnosticType.warning(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "fixed": "     }\n     @Override\n    public synchronized void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "fixed": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "2e39615c5c4b283d821aa3dba607a5d6d3fd856b", "projectName": "naver.pinpoint", "bugType": "Change Modifier", "problem": "         }\n     }\n    class Key {\n         private final Coordinates coordinates;\n         private final int code;", "fixed": "         }\n     }\n    static class Key {\n         private final Coordinates coordinates;\n         private final int code;", "sourceBeforeFix": "0", "sourceAfterFix": "8"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Sjms2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSjms2EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Sjms2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSjms2EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "55c5f8284269d599b48d8b77bf5b7f45f449b185", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Operand ", "problem": "     next = new ArrayList<TaggedWord>();\r\n     while (line != null && !line.trim().equals(\"\")) {\r\n       String[] pieces = line.split(\"\\t\");\r\n      if (pieces.length <= wordColumn || pieces.length <= wordColumn) {\r\nthrow new IllegalArgumentException(\"File \" + filename + \" line\n                                            linesRead + \" too short\");\r\n       }\r", "fixed": "     next = new ArrayList<TaggedWord>();\r\n     while (line != null && !line.trim().equals(\"\")) {\r\n       String[] pieces = line.split(\"\\t\");\r\n      if (pieces.length <= wordColumn || pieces.length <= tagColumn) {\r\nthrow new IllegalArgumentException(\"File \" + filename + \" line\n                                            linesRead + \" too short\");\r\n       }\r", "sourceBeforeFix": "pieces.length <= wordColumn", "sourceAfterFix": "pieces.length <= tagColumn"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "d82c094be09d50811339a1d0524b3a2ad35ebefa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(1L))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "fixed": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(5000L))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "sourceBeforeFix": "new ModelNode().set(1L)", "sourceAfterFix": "new ModelNode().set(5000L)"}
{"fixCommitSHA1": "04ad420f594bedd8cd5c40160d67585f70686a9c", "projectName": "aws.aws-sdk-java", "bugType": "Wrong Function Name", "problem": "                 try {\n                     return unmarshaller.unmarshall(jsonContent.jsonNode);\n                 } catch (Exception e) {\n                    LOG.error(\"Unable to unmarshall exception content\", e);\n                     return null;\n                 }\n             }", "fixed": "                 try {\n                     return unmarshaller.unmarshall(jsonContent.jsonNode);\n                 } catch (Exception e) {\n                    LOG.info(\"Unable to unmarshall exception content\", e);\n                     return null;\n                 }\n             }", "sourceBeforeFix": "LOG.error(\"Unable to read HTTP response content\",e)", "sourceAfterFix": "LOG.info(\"Unable to read HTTP response content\",e)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "02f1f95e522fd142dc0805c37e91d12880ab5996", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "     public static ByteCodeNode handleNullValue(CompilerContext context,\n             LabelNode label,\n             Class<?> returnType,\n            List<? extends Class<?>> stackArgsToPop,\n             boolean clearNullFlag)\n     {\n         Block nullCheck = new Block(context)", "fixed": "     public static ByteCodeNode handleNullValue(CompilerContext context,\n             LabelNode label,\n             Class<?> returnType,\n            List<Class<?>> stackArgsToPop,\n             boolean clearNullFlag)\n     {\n         Block nullCheck = new Block(context)", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": "  */\n class OnEnabledHealthIndicatorCondition extends SpringBootCondition {\n\tprivate static final String ANNOTATION_CLASS = ConditionalOnEnablednHealthIndicator.class\n \t\t\t.getName();\n \t@Override", "fixed": "  */\n class OnEnabledHealthIndicatorCondition extends SpringBootCondition {\n\tprivate static final String ANNOTATION_CLASS = ConditionalOnEnabledHealthIndicator.class\n \t\t\t.getName();\n \t@Override", "sourceBeforeFix": "ConditionalOnEnablednHealthIndicator.class", "sourceAfterFix": "ConditionalOnEnabledHealthIndicator.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "41e1d069bfa275a85a4a963c2ec5f437570f76f4", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\t}\n \t\t}\n\t\tCollection<Item> items = Collections.synchronizedCollection(new HashSet<Item>());\n \t\titemMap.put(provider, items);\n \t\tfor(Item item : provider.getItems()) {", "fixed": " \t\t\t}\n \t\t}\n\t\tCollection<Item> items = Collections.synchronizedCollection(new ArrayList<Item>());\n \t\titemMap.put(provider, items);\n \t\tfor(Item item : provider.getItems()) {", "sourceBeforeFix": "HashSet<Item>", "sourceAfterFix": "ArrayList<Item>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5c77a7dcd455f7a6e0ba3f289266032be687dc4f", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     scanInfo.setSmall(false);\n    counter = doScan(table, scanInfo, counter + 2);\n     table.close();\n     connection.close();", "fixed": "     scanInfo.setSmall(false);\n    counter = doScan(table, scanInfo, counter + 1);\n     table.close();\n     connection.close();", "sourceBeforeFix": "counter + 2", "sourceAfterFix": "counter + 1"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "fixed": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "b4cef872f8429ea78bc13f1ac2b3fa5eb3723d3a", "projectName": "facebook.presto", "bugType": "Change Binary Operator", "problem": "         if (oldName.equals(newName)) {\n            if (relations.replace(oldName, newTable) != null) {\n                 throw new TableNotFoundException(oldName);\n             }\n             return;", "fixed": "         if (oldName.equals(newName)) {\n            if (relations.replace(oldName, newTable) == null) {\n                 throw new TableNotFoundException(oldName);\n             }\n             return;", "sourceBeforeFix": "relations.replace(oldName,newTable) != null", "sourceAfterFix": "relations.replace(oldName,newTable) == null"}
{"fixCommitSHA1": "d0d25198716e23bb206e278f35ee4eeb6d00ba2c", "projectName": "netty.netty", "bugType": "Change Unary Operator\t", "problem": "     }\n     public boolean isEndOfInput() throws Exception {\n        return hasNextChunk();\n     }\n     public void close() throws Exception {", "fixed": "     }\n     public boolean isEndOfInput() throws Exception {\n        return !hasNextChunk();\n     }\n     public void close() throws Exception {", "sourceBeforeFix": "hasNextChunk()", "sourceAfterFix": "!hasNextChunk()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "1c1d6418e06a6cf1d8441d8ef329e1c8f48868e0", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "     }\n   }\n  @PATCH\n   @Path(\"/{petId}\")\n   @ApiOperation(value = \"Deletes a pet\")\n   @ApiResponses(value = { @ApiResponse(code = 400, message = \"Invalid pet value\")})", "fixed": "     }\n   }\n  @DELETE\n   @Path(\"/{petId}\")\n   @ApiOperation(value = \"Deletes a pet\")\n   @ApiResponses(value = { @ApiResponse(code = 400, message = \"Invalid pet value\")})", "sourceBeforeFix": "@PATCH", "sourceAfterFix": "@DELETE"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "e6bd7393faa68dd73e73258ff75820b558bfd356", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Unary Operator\t", "problem": "          ) {\n       Map.Entry<String, JsonNode> jsonField = jsonFields.next();\n       String name = jsonField.getKey();\n      if (checkFields && fields.contains(name)) {\n         continue;\n       }\n       JsonNode jsonValue = jsonField.getValue();", "fixed": "          ) {\n       Map.Entry<String, JsonNode> jsonField = jsonFields.next();\n       String name = jsonField.getKey();\n      if (checkFields && !fields.contains(name)) {\n         continue;\n       }\n       JsonNode jsonValue = jsonField.getValue();", "sourceBeforeFix": "fields.contains(name)", "sourceAfterFix": "!fields.contains(name)"}
{"fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    */\n   public int free(TachyonURI path) throws IOException {\n     try {\n      mTfs.free(mTfs.open(path));\n       System.out.println(path + \" was successfully freed from memory.\");\n       return 0;\n     } catch (InvalidPathException ioe) {", "fixed": "    */\n   public int free(TachyonURI path) throws IOException {\n     try {\n      mTfs.free(mTfs.open(path), true);\n       System.out.println(path + \" was successfully freed from memory.\");\n       return 0;\n     } catch (InvalidPathException ioe) {", "sourceBeforeFix": "mTfs.mkdirs(path)", "sourceAfterFix": "mTfs.mkdirs(path,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n \t/**\n \t * Save the given global property to the database", "fixed": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t/**\n \t * Save the given global property to the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RefEndpointBuilder\n             extends\n                 RefEndpointConsumerBuilder, RefEndpointProducerBuilder {\n         default AdvancedRefEndpointBuilder advanced() {", "fixed": "     \n    public interface RefEndpointBuilder\n             extends\n                 RefEndpointConsumerBuilder, RefEndpointProducerBuilder {\n         default AdvancedRefEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic SortedMap<String, Meter> getMeters(MetricFilter filter) {\n\t\treturn adaptMetrics(Meter.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Timer> getTimers() {", "fixed": " \t}\n \tpublic SortedMap<String, Meter> getMeters(MetricFilter filter) {\n\t\treturn adaptMetrics(Meter.class, reg.getMeters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Timer> getTimers() {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getHistograms(transformFilter(filter))"}
{"fixCommitSHA1": "0b9749aa429c009e6e392e2e526cb382fbee18df", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   public void testConstNameInExterns() {\n     String externs = \" var FOO;\";\n     String js = \"FOO = 1;\";\n    test(externs, js, (String) null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR, null);\n   }\n   private void testError(String js) {\n    testError(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n }", "fixed": "   public void testConstNameInExterns() {\n     String externs = \" var FOO;\";\n     String js = \"FOO = 1;\";\n    test(externs, js, (String) null, null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n   private void testError(String js) {\n    testWarning(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n }", "sourceBeforeFix": "testError(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)", "sourceAfterFix": "testWarning(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)"}
{"fixCommitSHA1": "b5247d268fd7d0c60421becb0dd1297ca545d219", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tconnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "fixed": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tHttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "sourceBeforeFix": "connection.setFollowRedirects(httpRequest.getFollowRedirects())", "sourceAfterFix": "HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BonitaEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedBonitaEndpointBuilder advanced() {\n             return (AdvancedBonitaEndpointBuilder) this;\n         }", "fixed": "     \n    public interface BonitaEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedBonitaEndpointBuilder advanced() {\n             return (AdvancedBonitaEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "14ac271dc3a6481600560da99341aba0c692e0ce", "projectName": "perwendel.spark", "bugType": "Change Numeric Literal", "problem": "         Object customRenderer = CustomErrorPages.getInstance().customPages.get(status);\r\n         Object customPage;\r\n        customPage = status == 400 ? NOT_FOUND : INTERNAL_ERROR;\r\n         if (customRenderer instanceof String) {\r\n             customPage = customRenderer;\r", "fixed": "         Object customRenderer = CustomErrorPages.getInstance().customPages.get(status);\r\n         Object customPage;\r\n        customPage = status == 404 ? NOT_FOUND : INTERNAL_ERROR;\r\n         if (customRenderer instanceof String) {\r\n             customPage = customRenderer;\r", "sourceBeforeFix": "status == 400", "sourceAfterFix": "status == 404"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "315a7ab26e5b9cbe1aba47ed1c574c0630be8248", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             final List<MessageListener> messageListeners = resourceAdapterRepository.getMessageListeners(raIdentifier);\n             if (messageListeners == null || messageListeners.isEmpty()) {\n                throw MESSAGES.unknownMessageListenerType(resourceAdapterName, messageListenerInterface.getName());\n             }\n             MessageListener requiredMessageListener = null;", "fixed": "             final List<MessageListener> messageListeners = resourceAdapterRepository.getMessageListeners(raIdentifier);\n             if (messageListeners == null || messageListeners.isEmpty()) {\n                throw MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(), resourceAdapterName);\n             }\n             MessageListener requiredMessageListener = null;", "sourceBeforeFix": "MESSAGES.unknownMessageListenerType(resourceAdapterName,messageListenerInterface.getName())", "sourceAfterFix": "MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(),resourceAdapterName)"}
{"fixCommitSHA1": "172df327833aba5ce2c853bbc18b3826a5b83ee7", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\t\t\t\trepeatY = Repeat;\r\n \t\t\t\t\t}\r\n\t\t\t\t\tpageImage = new Texture(file, TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false);\r\n \t\t\t\t\tpageImage.setFilter(min, max);\r\n \t\t\t\t\tpageImage.setWrap(repeatX, repeatY);\r\n \t\t\t\t\ttextures.add(pageImage);\r", "fixed": " \t\t\t\t\t\trepeatY = Repeat;\r\n \t\t\t\t\t}\r\n\t\t\t\t\tpageImage = new Texture(file, format, TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false);\r\n \t\t\t\t\tpageImage.setFilter(min, max);\r\n \t\t\t\t\tpageImage.setWrap(repeatX, repeatY);\r\n \t\t\t\t\ttextures.add(pageImage);\r", "sourceBeforeFix": "new Texture(file,TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false)", "sourceAfterFix": "new Texture(file,format,TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "be91a5326f6a289ae9d34437a63c8ba8434fe2b2", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "   public static final long FIXED_OVERHEAD = ClassSize.align(\n       (4 * Bytes.SIZEOF_LONG) + Bytes.SIZEOF_BOOLEAN +\n      (22 * ClassSize.REFERENCE) + ClassSize.OBJECT + Bytes.SIZEOF_INT);\n   public static final long DEEP_OVERHEAD = ClassSize.align(FIXED_OVERHEAD +\n       (ClassSize.OBJECT * 2) + (2 * ClassSize.ATOMIC_BOOLEAN) +", "fixed": "   public static final long FIXED_OVERHEAD = ClassSize.align(\n       (4 * Bytes.SIZEOF_LONG) + Bytes.SIZEOF_BOOLEAN +\n      (23 * ClassSize.REFERENCE) + ClassSize.OBJECT + Bytes.SIZEOF_INT);\n   public static final long DEEP_OVERHEAD = ClassSize.align(FIXED_OVERHEAD +\n       (ClassSize.OBJECT * 2) + (2 * ClassSize.ATOMIC_BOOLEAN) +", "sourceBeforeFix": "22 * ClassSize.REFERENCE", "sourceAfterFix": "23 * ClassSize.REFERENCE"}
{"fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "projectName": "netty.netty", "bugType": "Change Caller in Function Call", "problem": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + data.limit());\n         }\n         dst.put(tmpBuf);\n     }", "fixed": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + buffer.limit());\n         }\n         dst.put(tmpBuf);\n     }", "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "67f46e80db80ae93f285fb4883adb5883018f235", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "         if (serverEnvironment != null) {\n            if (serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.DOMAIN)\n                 root.registerOperationHandler(ServerReloadHandler.OPERATION_NAME, ServerReloadHandler.INSTANCE, ServerReloadHandler.INSTANCE, false);\n             if (serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.STANADALONE)\n                 root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false);", "fixed": "         if (serverEnvironment != null) {\n            if (serverEnvironment.getLaunchType() != ServerEnvironment.LaunchType.DOMAIN)\n                 root.registerOperationHandler(ServerReloadHandler.OPERATION_NAME, ServerReloadHandler.INSTANCE, ServerReloadHandler.INSTANCE, false);\n             if (serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.STANADALONE)\n                 root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false);", "sourceBeforeFix": "serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.DOMAIN", "sourceAfterFix": "serverEnvironment.getLaunchType() != ServerEnvironment.LaunchType.DOMAIN"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ConsulEndpointBuilder\n             extends\n                 ConsulEndpointConsumerBuilder, ConsulEndpointProducerBuilder {\n         default AdvancedConsulEndpointBuilder advanced() {", "fixed": "     \n    public interface ConsulEndpointBuilder\n             extends\n                 ConsulEndpointConsumerBuilder, ConsulEndpointProducerBuilder {\n         default AdvancedConsulEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "aa153c05af20461798e8acaa4931174c752caff6", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tTextureRegion region = pressed ? pressedRegion : unpressedRegion;\r\n \t\tbatch.setColor(color.r, color.g, color.b, color.a * parentAlpha);\r\n \t\tif (region.getTexture() != null) {\r\n\t\t\tif (scaleX == 0 && scaleY == 0 && rotation == 0)\r\n \t\t\t\tbatch.draw(region, x, y, width, height);\r\n \t\t\telse\r\n \t\t\t\tbatch.draw(region, x, y, originX, originY, width, height, scaleX, scaleY, rotation);\r", "fixed": " \t\tTextureRegion region = pressed ? pressedRegion : unpressedRegion;\r\n \t\tbatch.setColor(color.r, color.g, color.b, color.a * parentAlpha);\r\n \t\tif (region.getTexture() != null) {\r\n\t\t\tif (scaleX == 1 && scaleY == 1 && rotation == 0)\r\n \t\t\t\tbatch.draw(region, x, y, width, height);\r\n \t\t\telse\r\n \t\t\t\tbatch.draw(region, x, y, originX, originY, width, height, scaleX, scaleY, rotation);\r", "sourceBeforeFix": "scaleX == 0", "sourceAfterFix": "scaleX == 1"}
{"fixCommitSHA1": "de55ca810b70f8a2dd144d409cb2491dceb16286", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "   private final long mSessionId;\n   private long mLastHeartbeatMs;\n  private int mSessionTimeoutMs;\n   /**\n    * Creates a new instance of {@link SessionInfo}.", "fixed": "   private final long mSessionId;\n   private long mLastHeartbeatMs;\n  private final int mSessionTimeoutMs;\n   /**\n    * Creates a new instance of {@link SessionInfo}.", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "fixed": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "fixed": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "373e2c51564a4c2cca306394ba52e5bcde839cfd", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\t\t\t\t\"excludedViewNames\", String[].class));\n \t\t\tresolver.setViewNames(this.environment.getProperty(\"viewNames\",\n \t\t\t\t\tString[].class));\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 20);\n \t\t\treturn resolver;\n \t\t}", "fixed": " \t\t\t\t\t\"excludedViewNames\", String[].class));\n \t\t\tresolver.setViewNames(this.environment.getProperty(\"viewNames\",\n \t\t\t\t\tString[].class));\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n \t\t\treturn resolver;\n \t\t}", "sourceBeforeFix": "Ordered.LOWEST_PRECEDENCE - 20", "sourceAfterFix": "Ordered.LOWEST_PRECEDENCE - 5"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "224017cdc8ee4076845c59f9ebe8de5aca6fd2ae", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 boolean skip = false;\n                 for (ParamValueMetaData prop : md.getContextParams()) {\n                     if (prop.getParamName().equals(ENABLE_PROPERTY)) {\n                        boolean explicitEnable = Boolean.parseBoolean(prop.getParamName());\n                         if(explicitEnable) {\n                             found = true;\n                         } else {", "fixed": "                 boolean skip = false;\n                 for (ParamValueMetaData prop : md.getContextParams()) {\n                     if (prop.getParamName().equals(ENABLE_PROPERTY)) {\n                        boolean explicitEnable = Boolean.parseBoolean(prop.getParamValue());\n                         if(explicitEnable) {\n                             found = true;\n                         } else {", "sourceBeforeFix": "prop.getParamName()", "sourceAfterFix": "prop.getParamValue()"}
{"fixCommitSHA1": "24d4f1a7133defb3bf9a8726cfb864004a5876ca", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "       try {\n         Files.append(getHtmlReport(), new File(reportPath), UTF_8);\n       } catch (IOException e) {\n        compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n       }\n     }", "fixed": "       try {\n         Files.append(getHtmlReport(), new File(reportPath), UTF_8);\n       } catch (IOException e) {\n        compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath, e.getMessage()));\n       }\n     }", "sourceBeforeFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath)", "sourceAfterFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NettyHttpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNettyHttpEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface NettyHttpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNettyHttpEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8097cb4e299f056973c04abeaad879eb55f44775", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "fixed": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic abstract boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColor(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "fixed": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColors(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "sourceBeforeFix": "cacheScaled5.setColor(red)", "sourceAfterFix": "cacheScaled5.setColors(red)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).toString()", "sourceAfterFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).getPath()"}
{"fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"NullPointerTester\")\n  private void doTestNull(CharMatcher matcher) throws Exception {\n     NullPointerTester tester = new NullPointerTester();\n     tester.testAllPublicInstanceMethods(matcher);\n   }", "fixed": "   }\n   @GwtIncompatible(\"NullPointerTester\")\n  private static void doTestNull(CharMatcher matcher) throws Exception {\n     NullPointerTester tester = new NullPointerTester();\n     tester.testAllPublicInstanceMethods(matcher);\n   }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "b09304b10d474c17e6f5a04ffb45f119168a9cd4", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             if (format != null) {\n                 SimpleDateFormat simpleDateFormat = null;\n                 try {\n                    simpleDateFormat = new SimpleDateFormat(format);\n                 } catch (IllegalArgumentException ex) {\n                     if (format.equals(\"yyyy-MM-ddTHH:mm:ss.SSS\")) {\n                         format = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";", "fixed": "             if (format != null) {\n                 SimpleDateFormat simpleDateFormat = null;\n                 try {\n                    simpleDateFormat = new SimpleDateFormat(format,JSON.defaultLocale);\n                 } catch (IllegalArgumentException ex) {\n                     if (format.equals(\"yyyy-MM-ddTHH:mm:ss.SSS\")) {\n                         format = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";", "sourceBeforeFix": "new SimpleDateFormat(format)", "sourceAfterFix": "new SimpleDateFormat(format,JSON.defaultLocale)"}
{"fixCommitSHA1": "b9c0d31c3c2d6d6e91791308db92fd6a1cb5db43", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n             Assert.assertEquals(2, Integer.parseInt(response.getFirstHeader(\"value\").getValue()));\n            Assert.assertFalse(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()));\n             response.getEntity().getContent().close();\n         } finally {\n             client.getConnectionManager().shutdown();", "fixed": "             Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n             Assert.assertEquals(2, Integer.parseInt(response.getFirstHeader(\"value\").getValue()));\n            Assert.assertTrue(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()));\n             response.getEntity().getContent().close();\n         } finally {\n             client.getConnectionManager().shutdown();", "sourceBeforeFix": "Assert.assertFalse(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()))", "sourceAfterFix": "Assert.assertTrue(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "e9c4a734ff5160673024538f5b3ef1339c5424e7", "projectName": "thinkaurelius.titan", "bugType": "Change Identifier Used", "problem": "     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n        if (!stores.contains(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);", "fixed": "     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n        if (!stores.containsKey(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);", "sourceBeforeFix": "stores.contains(name)", "sourceAfterFix": "stores.containsKey(name)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implemetationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "fixed": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implementationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3cf2913580b49ddde420be7442e806aba7766da3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " /*\n * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "fixed": " /*\n * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "d31a409d8f87800c523f1cc4f7862f716cac7313", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 List<ChannelSftp.LsEntry> files = operations.listFiles(file.getParent());\n                 for (ChannelSftp.LsEntry f : files) {\n                     if (f.getFilename().equals(file.getFileName())) {\n                        newLastModified = f.getAttrs().getATime();\n                         newLength = f.getAttrs().getSize();\n                     }\n                 }", "fixed": "                 List<ChannelSftp.LsEntry> files = operations.listFiles(file.getParent());\n                 for (ChannelSftp.LsEntry f : files) {\n                     if (f.getFilename().equals(file.getFileName())) {\n                        newLastModified = f.getAttrs().getMTime();\n                         newLength = f.getAttrs().getSize();\n                     }\n                 }", "sourceBeforeFix": "f.getAttrs().getATime()", "sourceAfterFix": "f.getAttrs().getMTime()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "       final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     return seed;\n   }\n  private void insertRandomly(ArrayList<Integer> elements, MinMaxPriorityQueue<Integer> q,\n      Random random) {\n     while (!elements.isEmpty()) {\n       int selectedIndex = random.nextInt(elements.size());\n       q.offer(elements.remove(selectedIndex));", "fixed": "     return seed;\n   }\n  private static void insertRandomly(\n      ArrayList<Integer> elements, MinMaxPriorityQueue<Integer> q, Random random) {\n     while (!elements.isEmpty()) {\n       int selectedIndex = random.nextInt(elements.size());\n       q.offer(elements.remove(selectedIndex));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EC2EndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedEC2EndpointBuilder advanced() {\n             return (AdvancedEC2EndpointBuilder) this;\n         }", "fixed": "     \n    public interface EC2EndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedEC2EndpointBuilder advanced() {\n             return (AdvancedEC2EndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "586c8eda959300c12504bda3c404b117dace13bd", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t   if (Gdx.app.getType() == ApplicationType.iOS) {\r\n \t\t     IntBuffer intbuf = ByteBuffer.allocateDirect(16 * Integer.SIZE / 8).order(ByteOrder.nativeOrder()).asIntBuffer();\r\n \t\t     gl.glGetIntegerv(GL20.GL_FRAMEBUFFER_BINDING, intbuf);\r\n\t\t     defaultFramebufferHandle = intbuf.get();\r\n \t\t   }\r\n \t\t   else {\r\n \t\t     defaultFramebufferHandle = 0;\r", "fixed": " \t\t   if (Gdx.app.getType() == ApplicationType.iOS) {\r\n \t\t     IntBuffer intbuf = ByteBuffer.allocateDirect(16 * Integer.SIZE / 8).order(ByteOrder.nativeOrder()).asIntBuffer();\r\n \t\t     gl.glGetIntegerv(GL20.GL_FRAMEBUFFER_BINDING, intbuf);\r\n\t\t     defaultFramebufferHandle = intbuf.get(0);\r\n \t\t   }\r\n \t\t   else {\r\n \t\t     defaultFramebufferHandle = 0;\r", "sourceBeforeFix": "intbuf.get()", "sourceAfterFix": "intbuf.get(0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25667, \"secret\");\n         nagios.start();\n         super.setUp();", "fixed": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25668, \"secret\");\n         nagios.start();\n         super.setUp();", "sourceBeforeFix": "new NagiosNscaStub(25667,\"secret\")", "sourceAfterFix": "new NagiosNscaStub(25668,\"secret\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MQTTEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMQTTEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MQTTEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMQTTEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5f66fbd181273bff71207c060123a197664c23e1", "projectName": "thinkaurelius.titan", "bugType": "Change Modifier", "problem": " \t}\n \t@Override\n\tpublic void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tnode.removeRelation(this);\n \t}", "fixed": " \t}\n \t@Override\n\tpublic synchronized void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tnode.removeRelation(this);\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "dad70872c09aa162f4567263f677a49b0455be76", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 .outputRowsCount(inputStatistics.getOutputRowCount() * xStats.getValuesFraction() * 0.5);\n        assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))\n                 .symbolStats(unknown, stats -> stats\n                         .nullsFraction(0)\n                         .distinctValuesCountUnknown()", "fixed": "                 .outputRowsCount(inputStatistics.getOutputRowCount() * xStats.getValuesFraction() * 0.5);\n        assertThat(computeAntiJoin(inputStatistics, inputStatistics, unknown, u))\n                 .symbolStats(unknown, stats -> stats\n                         .nullsFraction(0)\n                         .distinctValuesCountUnknown()", "sourceBeforeFix": "computeSemiJoin(inputStatistics,inputStatistics,unknown,u)", "sourceAfterFix": "computeAntiJoin(inputStatistics,inputStatistics,unknown,u)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "5f66fbd181273bff71207c060123a197664c23e1", "projectName": "thinkaurelius.titan", "bugType": "Change Modifier", "problem": " \t}\n \t@Override\n\tpublic void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tentity.remove();\n \t}", "fixed": " \t}\n \t@Override\n\tpublic synchronized void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tentity.remove();\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "fixed": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "config.set(KeyProviderFactory.KEY_PROVIDER_PATH, \"user:\n     ks.setConf(config);\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "fixed": "config.set(KeyProviderFactory.KEY_PROVIDER_PATH, \"user:\n     ks.setConf(config);\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JSR356WebSocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJSR356WebSocketEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JSR356WebSocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJSR356WebSocketEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHBaseEndpointBuilder\n             extends\n                 AdvancedHBaseEndpointConsumerBuilder, AdvancedHBaseEndpointProducerBuilder {\n         default HBaseEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHBaseEndpointBuilder\n             extends\n                 AdvancedHBaseEndpointConsumerBuilder, AdvancedHBaseEndpointProducerBuilder {\n         default HBaseEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3b47b9b23bf3f10d124f26f37dff3245fe09ec56", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n                 }\n             }", "fixed": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n             }", "sourceBeforeFix": "coreThreads.asString()", "sourceAfterFix": "queueLength.asString()"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     }\n     \n    private PkgControl getRoot() {\n         return stack.peek();\n     }", "fixed": "     }\n     \n    private ImportControl getRoot() {\n         return stack.peek();\n     }", "sourceBeforeFix": "new PkgControl(stack.peek(),name,regex)", "sourceAfterFix": "new ImportControl(stack.peek(),name,regex)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "eafa92d908c571ad0d3c9432583a318cc86733bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n            assertEquals(resp.getHeader(\"target\"), target);\ntarget = \"http:\n             f = client.prepareGet(target).execute();", "fixed": "             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n            assertEquals(resp.getHeader(\"target\"), \"/\");\ntarget = \"http:\n             f = client.prepareGet(target).execute();", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "4c90dbd67d581b2c7f105c09e47aac9667bbdf35", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       throw new FileNotFoundException(\n           ExceptionMessage.CANNOT_READ_DIRECTORY.getMessage(status.getName()));\n     }\n    return FileInStream.create(status, options.toInStreamOptions(), mContext);\n   }\n   @Override", "fixed": "       throw new FileNotFoundException(\n           ExceptionMessage.CANNOT_READ_DIRECTORY.getMessage(status.getName()));\n     }\n    return FileInStream.create(status, options.toInStreamOptions(), mFileSystemContext);\n   }\n   @Override", "sourceBeforeFix": "FileInStream.create(status,options.toInStreamOptions(),mContext)", "sourceAfterFix": "FileInStream.create(status,options.toInStreamOptions(),mFileSystemContext)"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param methodDef method definition token.\n      * @return true if a method has a javadoc comment.\n      */\n    private boolean hasJavadocComment(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return modifiers.branchContains(TokenTypes.BLOCK_COMMENT_BEGIN);\n     }", "fixed": "      * @param methodDef method definition token.\n      * @return true if a method has a javadoc comment.\n      */\n    private static boolean hasJavadocComment(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return modifiers.branchContains(TokenTypes.BLOCK_COMMENT_BEGIN);\n     }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see\n \t */\n\tpublic boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "fixed": " \t * \n* @see\n \t */\n\tpublic abstract boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "3a43345ad0a599659d462cfc14dba9d8c0553bbf", "projectName": "Graylog2.graylog2-server", "bugType": "Change Operand ", "problem": "             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", closingConfig);\n         }\n        if (deletionRetentionStrategy == null) {\n             final DeletionRetentionStrategyConfig deletionConfig = DeletionRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());\n             clusterConfigService.write(deletionConfig);\n             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", deletionConfig);", "fixed": "             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", closingConfig);\n         }\n        if (deletionRetentionStrategyConfig == null) {\n             final DeletionRetentionStrategyConfig deletionConfig = DeletionRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());\n             clusterConfigService.write(deletionConfig);\n             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", deletionConfig);", "sourceBeforeFix": "deletionRetentionStrategy == null", "sourceAfterFix": "deletionRetentionStrategyConfig == null"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the\n \t *                     output view, which may have an underlying I/O channel to which it delegates.\n \t */\n\tpublic void serialize(T record, DataOutputView target) throws IOException;\n \t/**\n \t * De-serializes a record from the given source input view into the given target record instance.", "fixed": " \t * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the\n \t *                     output view, which may have an underlying I/O channel to which it delegates.\n \t */\n\tpublic abstract void serialize(T record, DataOutputView target) throws IOException;\n \t/**\n \t * De-serializes a record from the given source input view into the given target record instance.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "2b0752b688e6f27129f344050787e9546adc004a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 5000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "fixed": "     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2b0752b688e6f27129f344050787e9546adc004a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 5000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "fixed": "     @Test\n     public void async_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "f5309e8856186f5105e0bfcefda1273330f36ac0", "projectName": "jersey.jersey", "bugType": "Same Function Less Args", "problem": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_INVALIDPASS, 1));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "fixed": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_INVALIDPASS));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "sourceBeforeFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)", "sourceAfterFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WebhookEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedWebhookEndpointBuilder advanced() {\n             return (AdvancedWebhookEndpointBuilder) this;\n         }", "fixed": "     \n    public interface WebhookEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedWebhookEndpointBuilder advanced() {\n             return (AdvancedWebhookEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to get files from \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to get files from \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GuavaEventBusEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GuavaEventBusEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a0f2bac065232855e4f8bb1221a60b0cbf7fd2a9", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n        verify(checkConfig, getPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getSrcPath(\"checks/javadoc/Input_01.java\")", "sourceAfterFix": "getPath(\"checks/javadoc/Input_01.java\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n        return Float.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n        return Float.parseFloat(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Short.valueOf(value.toString())", "sourceAfterFix": "Short.parseShort(value.toString())"}
{"fixCommitSHA1": "307f01bf7c83512ca0762935d34c70ba6073b7b2", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "                 state = MachineState.RUNNING;\n             }\n            this.startTime = System.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;", "fixed": "                 state = MachineState.RUNNING;\n             }\n            this.startTime = Time.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;", "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "Time.currentTimeMillis()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3cf2913580b49ddde420be7442e806aba7766da3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  * Abstract base class for nested conditions.\n  *\n  * @author Phillip Webb\n  */\nabstract class AbstractNestedCondition extends SpringBootCondition\n \t\timplements ConfigurationCondition {\n \tprivate final ConfigurationPhase configurationPhase;", "fixed": "  * Abstract base class for nested conditions.\n  *\n  * @author Phillip Webb\n * @since 2.0.1\n  */\npublic abstract class AbstractNestedCondition extends SpringBootCondition\n \t\timplements ConfigurationCondition {\n \tprivate final ConfigurationPhase configurationPhase;", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "4a19c2c078ddf5484e0cb8c1ac075451f158fa40", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                            orderResult = 1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = -1;\n                             break;\n                     }\n                     break;", "fixed": "                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                            orderResult = -1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = 1;\n                             break;\n                     }\n                     break;", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "66181be1c62816d916c9301dddd2c8c5bc7be1dc", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "   private static Function compile(String function) {\n     final ContextFactory contextFactory = ContextFactory.getGlobal();\n    Context context = contextFactory.enterContext();\n     context.setOptimizationLevel(9);\n     final ScriptableObject scope = context.initStandardObjects();", "fixed": "   private static Function compile(String function) {\n     final ContextFactory contextFactory = ContextFactory.getGlobal();\n    final Context context = contextFactory.enterContext();\n     context.setOptimizationLevel(9);\n     final ScriptableObject scope = context.initStandardObjects();", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "262f36ae8088206c992628ce7ba1d60e5527b31d", "projectName": "gephi.gephi", "bugType": "Change Caller in Function Call", "problem": "             }\n             if (edgeColumn != null) {\n                 for (Edge e : graph.getEdgesAndMetaEdges()) {\n                    Object obj = e.getEdgeData().getAttributes().getValue(nodeColumn.getIndex());\n                     if (obj != null) {\n                         TimeInterval timeInterval = (TimeInterval) obj;\n                         min = Math.min(min, Double.isInfinite(timeInterval.getLow()) ? min : timeInterval.getLow());", "fixed": "             }\n             if (edgeColumn != null) {\n                 for (Edge e : graph.getEdgesAndMetaEdges()) {\n                    Object obj = e.getEdgeData().getAttributes().getValue(edgeColumn.getIndex());\n                     if (obj != null) {\n                         TimeInterval timeInterval = (TimeInterval) obj;\n                         min = Math.min(min, Double.isInfinite(timeInterval.getLow()) ? min : timeInterval.getLow());", "sourceBeforeFix": "nodeColumn.getIndex()", "sourceAfterFix": "edgeColumn.getIndex()"}
{"fixCommitSHA1": "117c698c59a011648c50e261ff5b555e3ee236f8", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "             break;\n         }\n       } else {\n        log.error(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n       }\n     }\n   }", "fixed": "             break;\n         }\n       } else {\n        log.debug(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n       }\n     }\n   }", "sourceBeforeFix": "log.error(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)", "sourceAfterFix": "log.debug(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)"}
{"fixCommitSHA1": "6bd9731f77303b53b9a03b22be0c57438e096355", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "         HttpClient http = new HttpClient();\nUser user = new User(http.get(\"http:\n        assertFalse(user.isGeoEnabled());\n         assertFalse(user.isVerified());\n         assertEquals(id1, user.getName());\n         assertEquals(id1, user.getScreenName());", "fixed": "         HttpClient http = new HttpClient();\nUser user = new User(http.get(\"http:\n        assertTrue(user.isGeoEnabled());\n         assertFalse(user.isVerified());\n         assertEquals(id1, user.getName());\n         assertEquals(id1, user.getScreenName());", "sourceBeforeFix": "assertFalse(user.isGeoEnabled())", "sourceAfterFix": "assertTrue(user.isGeoEnabled())"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 18:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 18:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "89b6af6a05d3c7820afac94137ae105cf800c457", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Less Args", "problem": "     @Override\n     public void beginTree(DetailAST rootAST)\n     {\n        currentFrame = new FieldFrame(null, true, null, null);\n     }\n     @Override", "fixed": "     @Override\n     public void beginTree(DetailAST rootAST)\n     {\n        currentFrame = new FieldFrame(null, true, null);\n     }\n     @Override", "sourceBeforeFix": "new FieldFrame(null,true,null,null)", "sourceAfterFix": "new FieldFrame(null,true,null)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic void copyTo(T from, T to);", "fixed": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic abstract void copyTo(T from, T to);", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "92b9986bd0c48759694a83cac77858f293801a11", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             for (Map.Entry<Object, Object> entry : map.entrySet()) {\n                 Object key = entry.getKey();\n                 String jsonKey = TypeUtils.castToString(key);\n                Object jsonValue = toJSON(entry.getValue());\n                 json.put(jsonKey, jsonValue);\n             }", "fixed": "             for (Map.Entry<Object, Object> entry : map.entrySet()) {\n                 Object key = entry.getKey();\n                 String jsonKey = TypeUtils.castToString(key);\n                Object jsonValue = toJSON(entry.getValue(), config);\n                 json.put(jsonKey, jsonValue);\n             }", "sourceBeforeFix": "toJSON(item)", "sourceAfterFix": "toJSON(item,config)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastSedaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastSedaEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastSedaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastSedaEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1779a3cb8963c0fafbb61fbf8c0d61313166697f", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     @RequestMapping(value = \"/member\", method = RequestMethod.POST)\n     @ResponseBody\n     public Map<String, String> insertUserGroupMember(@RequestBody UserGroupMember userGroupMember) {\n        if (StringUtils.isEmpty(userGroupMember.getMemberId()) || StringUtils.isEmpty(userGroupMember.getMemberId())) {\n             Map<String, String> result = new HashMap<>();\n             result.put(\"errorCode\", \"500\");\n             result.put(\"errorMessage\", \"there is not userGroupId or memberId in params to insert user group member\");", "fixed": "     @RequestMapping(value = \"/member\", method = RequestMethod.POST)\n     @ResponseBody\n     public Map<String, String> insertUserGroupMember(@RequestBody UserGroupMember userGroupMember) {\n        if (StringUtils.isEmpty(userGroupMember.getMemberId()) || StringUtils.isEmpty(userGroupMember.getUserGroupId())) {\n             Map<String, String> result = new HashMap<>();\n             result.put(\"errorCode\", \"500\");\n             result.put(\"errorMessage\", \"there is not userGroupId or memberId in params to insert user group member\");", "sourceBeforeFix": "userGroupMember.getMemberId()", "sourceAfterFix": "userGroupMember.getUserGroupId()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Header_Response_Heartbeat() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Header_Response_Heartbeat() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSoroushBotEndpointBuilder\n             extends\n                 AdvancedSoroushBotEndpointConsumerBuilder, AdvancedSoroushBotEndpointProducerBuilder {\n         default SoroushBotEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSoroushBotEndpointBuilder\n             extends\n                 AdvancedSoroushBotEndpointConsumerBuilder, AdvancedSoroushBotEndpointProducerBuilder {\n         default SoroushBotEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1b6db95bb43cfe3f3ac92f55f96cd35fff73317a", "projectName": "alibaba.druid", "bugType": "Change Identifier Used", "problem": "             }\r\n         };\r\n        Assert.assertEquals(0, raw.getParameters().size());\r\n         stmt.registerOutParameter(1, Types.INTEGER);\r\n        Assert.assertEquals(1, raw.getParameters().size());\r\n         stmt.registerOutParameter(2, Types.DECIMAL, 10);\r\n        Assert.assertEquals(2, raw.getParameters().size());\r\n     }\r\n     public void test_basic() throws Exception {\r", "fixed": "             }\r\n         };\r\n        Assert.assertEquals(0, raw.getOutParameters().size());\r\n         stmt.registerOutParameter(1, Types.INTEGER);\r\n        Assert.assertEquals(1, raw.getOutParameters().size());\r\n         stmt.registerOutParameter(2, Types.DECIMAL, 10);\r\n        Assert.assertEquals(2, raw.getOutParameters().size());\r\n     }\r\n     public void test_basic() throws Exception {\r", "sourceBeforeFix": "raw.getParameters()", "sourceAfterFix": "raw.getOutParameters()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LuceneEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedLuceneEndpointBuilder advanced() {\n             return (AdvancedLuceneEndpointBuilder) this;\n         }", "fixed": "     \n    public interface LuceneEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedLuceneEndpointBuilder advanced() {\n             return (AdvancedLuceneEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b7a31700f5eb974eccc4d9e5305015df8707bba0", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "             return null;\n         }\n         if (offset < 0) {\n            throw new IllegalArgumentException(\"negative offset:\" + offset);\n         }\n         if (length == 0) {\n             return \"\";", "fixed": "             return null;\n         }\n         if (offset < 0) {\n            throw new IndexOutOfBoundsException(\"negative offset:\" + offset);\n         }\n         if (length == 0) {\n             return \"\";", "sourceBeforeFix": "new IllegalArgumentException(\"negative offset:\" + offset)", "sourceAfterFix": "new IndexOutOfBoundsException(\"negative offset:\" + offset)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)", "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n        boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }", "fixed": "          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n        private boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ConsulEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedConsulEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ConsulEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedConsulEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"fixCommitSHA1": "53b0527a5dd35cd2e36650a6352b882cc32f714f", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    * @throws IOException\n    */\n   public void put(Put put) throws IOException {\n    this.put(put, null, put.writeToWAL());\n   }\n   /**", "fixed": "    * @throws IOException\n    */\n   public void put(Put put) throws IOException {\n    this.put(put, null, put.getWriteToWAL());\n   }\n   /**", "sourceBeforeFix": "put.writeToWAL()", "sourceAfterFix": "put.getWriteToWAL()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "fixed": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic abstract void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSshEndpointBuilder\n             extends\n                 AdvancedSshEndpointConsumerBuilder, AdvancedSshEndpointProducerBuilder {\n         default SshEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSshEndpointBuilder\n             extends\n                 AdvancedSshEndpointConsumerBuilder, AdvancedSshEndpointProducerBuilder {\n         default SshEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BeanstalkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BeanstalkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "0592e84a3c07b4451e81d2eecc0c51af384858d2", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "             new LinkedBlockingQueue<Runnable>(100),\n             new NamedThreadFactory(\"Close-ExecutorService-Timer\", true));\n    public static boolean isShutdown(Executor executor) {\n         if (executor instanceof ExecutorService) {\n            if (((ExecutorService) executor).isShutdown()) {\n                 return true;\n             }\n         }", "fixed": "             new LinkedBlockingQueue<Runnable>(100),\n             new NamedThreadFactory(\"Close-ExecutorService-Timer\", true));\n    public static boolean isTerminated(Executor executor) {\n         if (executor instanceof ExecutorService) {\n            if (((ExecutorService) executor).isTerminated()) {\n                 return true;\n             }\n         }", "sourceBeforeFix": "((ExecutorService)executor).isShutdown()", "sourceAfterFix": "((ExecutorService)executor).isTerminated()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "fixed": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic abstract T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "27212f298ec3ee50204e5169f61ba48702346450", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       \"Redeclared variable: {0}\");\n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n    DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(", "fixed": "       \"Redeclared variable: {0}\");\n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n    DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(", "sourceBeforeFix": "DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")", "sourceAfterFix": "DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Wrong Function Name", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLanguageEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LanguageEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLanguageEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LanguageEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedVmEndpointBuilder\n             extends\n                 AdvancedVmEndpointConsumerBuilder, AdvancedVmEndpointProducerBuilder {\n         default VmEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedVmEndpointBuilder\n             extends\n                 AdvancedVmEndpointConsumerBuilder, AdvancedVmEndpointProducerBuilder {\n         default VmEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c9e9aabd8148d596fe4b1bcb00691d819fc4eff5", "projectName": "alibaba.druid", "bugType": "Less Specific If", "problem": "     }\n     public boolean isExclusion(String requestURI) {\n        if (excludesPattern == null) {\n             return false;\n         }", "fixed": "     }\n     public boolean isExclusion(String requestURI) {\n        if (excludesPattern == null || requestURI == null) {\n             return false;\n         }", "sourceBeforeFix": "excludesPattern == null", "sourceAfterFix": "excludesPattern == null || requestURI == null"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "dff64bf31f0406905c321e100e29d3600cf618e3", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": "  * @version $Revision$\n  */\n public class Main extends org.apache.camel.spring.Main {\n    public static void main(String[] args) {\n         new Main().run(args);\n     }\n }", "fixed": "  * @version $Revision$\n  */\n public class Main extends org.apache.camel.spring.Main {\n    public static void main(String[] args) throws Exception {\n         new Main().run(args);\n     }\n }", "sourceBeforeFix": "9", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t * @throws ModuleMustStartException if the context cannot restart due to a\r\n \t *             {@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}\r\n \t */\r\n\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {\r\n \t\tLog log = LogFactory.getLog(Listener.class);\r\n \t\tList<Module> startedModules = new ArrayList<Module>();\r", "fixed": " \t * @throws ModuleMustStartException if the context cannot restart due to a\r\n \t *             {@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}\r\n \t */\r\n\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {\r\n \t\tLog log = LogFactory.getLog(Listener.class);\r\n \t\tList<Module> startedModules = new ArrayList<Module>();\r", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "0c297230338976247866124f16b86f6990687a2e", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public int hashCode() {\n         return Integer.valueOf(matchValue).hashCode();\n     }\n     @Override\n    public boolean equals(Object object) {\n         if (object instanceof IntMatchFilter) {\n             final IntMatchFilter other = (IntMatchFilter) object;\n             return matchValue == other.matchValue;", "fixed": "     }\n     @Override\n    public final int hashCode() {\n         return Integer.valueOf(matchValue).hashCode();\n     }\n     @Override\n    public final boolean equals(Object object) {\n         if (object instanceof IntMatchFilter) {\n             final IntMatchFilter other = (IntMatchFilter) object;\n             return matchValue == other.matchValue;", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypes(), buildPages.getTypes()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "fixed": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypesWithoutHash(), buildPages.getTypesWithoutHash()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixQueueEndpointBuilder\n             extends\n                 AtomixQueueEndpointConsumerBuilder, AtomixQueueEndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixQueueEndpointBuilder\n             extends\n                 AtomixQueueEndpointConsumerBuilder, AtomixQueueEndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KMSEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedKMSEndpointBuilder advanced() {\n             return (AdvancedKMSEndpointBuilder) this;\n         }", "fixed": "     \n    public interface KMSEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedKMSEndpointBuilder advanced() {\n             return (AdvancedKMSEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XmlSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXmlSignatureEndpointBuilder advanced() {", "fixed": "     \n    public interface XmlSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXmlSignatureEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"newUsers.json\").withInputs(intersection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"newUsers.json\").withInputs(intersection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "2ea6ea3e6dd568fe52a9410913e801714da07c13", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "             }\n             Object[] valuesArray = vals.toArray();\n             min = AttributeUtils.getDefault().getMin(column, valuesArray);\n            max = AttributeUtils.getDefault().getMin(column, valuesArray);\n         }\n         public String getName() {", "fixed": "             }\n             Object[] valuesArray = vals.toArray();\n             min = AttributeUtils.getDefault().getMin(column, valuesArray);\n            max = AttributeUtils.getDefault().getMax(column, valuesArray);\n         }\n         public String getName() {", "sourceBeforeFix": "AttributeUtils.getDefault().getMin(column,valuesArray)", "sourceAfterFix": "AttributeUtils.getDefault().getMax(column,valuesArray)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    private static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "    */\n   public static class Factory implements PacketReader.Factory {\n     private static final long READ_TIMEOUT_MS =\n        Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n     private final FileSystemContext mContext;\n     private final WorkerNetAddress mAddress;", "fixed": "    */\n   public static class Factory implements PacketReader.Factory {\n     private static final long READ_TIMEOUT_MS =\n        Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n     private final FileSystemContext mContext;\n     private final WorkerNetAddress mAddress;", "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "57ba1bdeaa0172ae4927e92a5b074be623141e04", "projectName": "apache.camel", "bugType": "Change Binary Operator", "problem": "                 char ch = uri.charAt(i);\n                 char next;\n                if (i < uri.length() - 2) {\n                     next = uri.charAt(i + 1);\n                 } else {\n                     next = '\\u0000';", "fixed": "                 char ch = uri.charAt(i);\n                 char next;\n                if (i <= uri.length() - 2) {\n                     next = uri.charAt(i + 1);\n                 } else {\n                     next = '\\u0000';", "sourceBeforeFix": "i < uri.length() - 2", "sourceAfterFix": "i <= uri.length() - 2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "7109f6f55968c830c5f43ff798e106ef2f14c71c", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        false,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_DEFAULT)),\n                 eq((byte) 0),", "fixed": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        true,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_DEFAULT)),\n                 eq((byte) 0),", "sourceBeforeFix": "new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)", "sourceAfterFix": "new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "82a43727c308f2401468d4306c1ba2b5095f54b5", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "     private static void testIsBufferCopyNeededForWrite(ByteBufAllocator alloc) {\n         ByteBuf byteBuf = alloc.directBuffer();\n         assertFalse(isBufferCopyNeededForWrite(byteBuf));\n        assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n         byteBuf = alloc.heapBuffer();", "fixed": "     private static void testIsBufferCopyNeededForWrite(ByteBufAllocator alloc) {\n         ByteBuf byteBuf = alloc.directBuffer();\n         assertFalse(isBufferCopyNeededForWrite(byteBuf));\n        assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n         byteBuf = alloc.heapBuffer();", "sourceBeforeFix": "assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))", "sourceAfterFix": "assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))"}
{"fixCommitSHA1": "0b3f7b13bf8c9eac4a0b9835152fd15859258978", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "           + \" interface; try using @AutoAnnotation instead\", type);\n     }\n    ImmutableSet<ExecutableElement> methods = getLocalAndInheritedMethods(type, processingEnv.getElementUtils());\n    ImmutableSet<ExecutableElement> methodsToImplement = methodsToImplement(methods);\n     String fqExtClass = TypeSimplifier.classNameOf(type);\n     List<AutoValueExtension> appliedExtensions = new ArrayList<AutoValueExtension>();", "fixed": "           + \" interface; try using @AutoAnnotation instead\", type);\n     }\n    ImmutableSet<ExecutableElement> methods =\n        getLocalAndInheritedMethods(type, processingEnv.getElementUtils());\n    ImmutableSet<ExecutableElement> methodsToImplement = methodsToImplement(type, methods);\n     String fqExtClass = TypeSimplifier.classNameOf(type);\n     List<AutoValueExtension> appliedExtensions = new ArrayList<AutoValueExtension>();", "sourceBeforeFix": "methodsToImplement(methods)", "sourceAfterFix": "methodsToImplement(type,methods)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\ngetResponse(\"http:", "fixed": " \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\ngetResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "       logger\n           .error(\n              \"database connection error may be wrong password, username or dbname: {}\",\n               e.getMessage());\n     }\n   }", "fixed": "       logger\n           .error(\n              \"database error: {}\",\n               e.getMessage());\n     }\n   }", "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")", "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Change Modifier", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8a5a0cb731f1b8a772612005f4baeeb1a7d3fb07", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "             }\n             if (shouldRetrieveGeneratedKeys) {\n                setGeneratedKeys(exchange, ps.getGeneratedKeys());\n             }\n         } finally {\n             if (shouldCloseResources) {", "fixed": "             }\n             if (shouldRetrieveGeneratedKeys) {\n                setGeneratedKeys(exchange, conn, ps.getGeneratedKeys());\n             }\n         } finally {\n             if (shouldCloseResources) {", "sourceBeforeFix": "new ResultSetIterator(generatedKeys,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())", "sourceAfterFix": "new ResultSetIterator(conn,generatedKeys,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "563d2f15ec99d7aef66736c71980e940471593c1", "projectName": "square.okhttp", "bugType": "Change Numeric Literal", "problem": "         break;\n       }\n     }\nassertEquals(512f, i, 10f);\n   }\n   @Test public void disconnectResponseHalfway() throws IOException {", "fixed": "         break;\n       }\n     }\nassertEquals(512f, i, 20f);\n   }\n   @Test public void disconnectResponseHalfway() throws IOException {", "sourceBeforeFix": "assertEquals(512f,i,10f)", "sourceAfterFix": "assertEquals(512f,i,20f)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean keyTyped (char character) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].keyTyped(character)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean keyTyped (char character) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).keyTyped(character)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "3fcda6a67e8e859de3fc41ed93903832a30fc126", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "      *\n      * @return key of connect hostname\n      */\n    public String getHostNameKey() {\n       return mHostNameKey;\n     }", "fixed": "      *\n      * @return key of connect hostname\n      */\n    public PropertyKey getHostNameKey() {\n       return mHostNameKey;\n     }", "sourceBeforeFix": "private final String mHostNameKey; ", "sourceAfterFix": "private final PropertyKey mHostNameKey; "}
{"fixCommitSHA1": "d039be568920d4aa4ef836f6b323faec909f965a", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.vfs.VirtualFile;\n /**\n  * Date: 05.11.2011\n  *\n  * @author <a href=\"mailto:jperkins@redhat.com\">James R. Perkins</a>", "fixed": " import org.jboss.vfs.VirtualFile;\n /**\n * This module is using message IDs in the range 11000-11099 and 16700-16799.\n * <p/>\n * This file is using the subset 11025-11099 and 16700-16799 for non-logger messages.\n * <p/>\n* See <a href=\"http:\n * list of currently reserved JBAS message id blocks.\n * <p/>\n  * Date: 05.11.2011\n  *\n  * @author <a href=\"mailto:jperkins@redhat.com\">James R. Perkins</a>", "sourceBeforeFix": "id=11100", "sourceAfterFix": "id=16700"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e22b5521a7a0f4c76a10f8a8c7b50d931ec3eda5", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\tclassName = className.replace(File.separator, \".\");\r\n\t\t\t\tclassName = className.substring(className.indexOf(\"org.openmrs.\"));\r\n \t\t\t\ttry {\r\n \t\t\t\t\tClass<?> currentClass = classLoader.loadClass(className);\r", "fixed": " \t\t\t\tclassName = className.replace(File.separator, \".\");\r\n\t\t\t\tclassName = className.substring(className.lastIndexOf(\"org.openmrs.\"));\r\n \t\t\t\ttry {\r\n \t\t\t\t\tClass<?> currentClass = classLoader.loadClass(className);\r", "sourceBeforeFix": "className.indexOf(\"org.openmrs.\")", "sourceAfterFix": "className.lastIndexOf(\"org.openmrs.\")"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "c39ce11b105be36238be1cc5b406dd0037c8284c", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   \n  protected class ResourceInternal<T> {\n     \n    private T mResource;\n     \n     private long mLastAccessTimeMs;", "fixed": "   \n  protected class ResourceInternal<R> {\n     \n    private R mResource;\n     \n     private long mLastAccessTimeMs;", "sourceBeforeFix": "T resource", "sourceAfterFix": "R resource"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "00617d3c125c64c8f7b4e7550bad32f1678bd061", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\ttaskDefinition.setStarted(false);\n\t\t\tsaveTask(taskDefinition);\n \t\t}\n \t}", "fixed": " \t\t\ttaskDefinition.setStarted(false);\n\t\t\tsaveTaskDefinition(taskDefinition);\n \t\t}\n \t}", "sourceBeforeFix": "saveTask(taskDefinition)", "sourceAfterFix": "saveTaskDefinition(taskDefinition)"}
{"fixCommitSHA1": "02f1f95e522fd142dc0805c37e91d12880ab5996", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": " import static com.facebook.presto.sql.gen.Bootstrap.CALL_SITES_FIELD_NAME;\n import static java.lang.String.format;\npublic class ByteCodeUtils\n {\n     private ByteCodeUtils()\n     {", "fixed": " import static com.facebook.presto.sql.gen.Bootstrap.CALL_SITES_FIELD_NAME;\n import static java.lang.String.format;\npublic final class ByteCodeUtils\n {\n     private ByteCodeUtils()\n     {", "sourceBeforeFix": "ArrayList<Class<?>>", "sourceAfterFix": "List<Class<?>>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a6acbd2403be12f2c9d24a6dc24eea6b0c530c0f", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "       return Subject.doAs(subject, action);\n     } catch (PrivilegedActionException pae) {\n       Throwable cause = pae.getCause();\n      LOG.error(\"PriviledgedActionException as:\"+this+\" cause:\"+cause);\n       if (cause instanceof IOException) {\n         throw (IOException) cause;\n       } else if (cause instanceof Error) {", "fixed": "       return Subject.doAs(subject, action);\n     } catch (PrivilegedActionException pae) {\n       Throwable cause = pae.getCause();\n      LOG.warn(\"PriviledgedActionException as:\"+this+\" cause:\"+cause);\n       if (cause instanceof IOException) {\n         throw (IOException) cause;\n       } else if (cause instanceof Error) {", "sourceBeforeFix": "LOG.error(\"PriviledgedActionException as:\" + this + \" cause:\"+ cause)", "sourceAfterFix": "LOG.warn(\"PriviledgedActionException as:\" + this + \" cause:\"+ cause)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "8999fbf3f64ca631485431592c8f4f8290f59db1", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"asyncCamelProcessRevisited\");\n     List<Execution> executionList = runtimeService.createExecutionQuery().list();\n     assertEquals(3, executionList.size());\n    waitForJobExecutorToProcessAllJobs(3000, 500);\n     assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());\n   }\n }", "fixed": "     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"asyncCamelProcessRevisited\");\n     List<Execution> executionList = runtimeService.createExecutionQuery().list();\n     assertEquals(3, executionList.size());\n    waitForJobExecutorToProcessAllJobs(5000, 500);\n     assertEquals(0, runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());\n   }\n }", "sourceBeforeFix": "waitForJobExecutorToProcessAllJobs(3000,500)", "sourceAfterFix": "waitForJobExecutorToProcessAllJobs(5000,500)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "9704f6049c41315c3de3fa6be6faf01e62c67863", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Region Server\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "fixed": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"regionserver\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "sourceBeforeFix": "content.matches(expected)", "sourceAfterFix": "content.contains(expected)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test special tags\", notes = \"To test special tags\", tags={ \"$another-fake?\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testSpecialTags(@Valid Client body);\n }", "fixed": "     @ApiOperation(value = \"To test special tags\", notes = \"To test special tags\", tags={ \"$another-fake?\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testSpecialTags(@Valid Client body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SpringIntegrationEndpointBuilder\n             extends\n                 SpringIntegrationEndpointConsumerBuilder, SpringIntegrationEndpointProducerBuilder {\n         default AdvancedSpringIntegrationEndpointBuilder advanced() {", "fixed": "     \n    public interface SpringIntegrationEndpointBuilder\n             extends\n                 SpringIntegrationEndpointConsumerBuilder, SpringIntegrationEndpointProducerBuilder {\n         default AdvancedSpringIntegrationEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "projectName": "Alluxio.alluxio", "bugType": "Change Caller in Function Call", "problem": "   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n        testUser, tUri.getPath());\n   }\n   @Test", "fixed": "   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n        \"In Memory\", testUser, tUri.getPath());\n   }\n   @Test", "sourceBeforeFix": "TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Header_Response_Heartbeat() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Header_Response_Heartbeat() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "e78398ed32106c1c71bc47a1d5058fe3c8e5b9dd", "projectName": "pxb1988.dex2jar", "bugType": "Wrong Function Name", "problem": "         Type t2 = LocalType.type(e2.op1.value);\r\n         if (t2 == null && e2.op1.value.vt == VT.ARRAY) {\r\n             Type t3 = detectArray((E2Expr) e2.op1.value);\r\n            if (t3 != null && t3.getSize() == Type.ARRAY) {\r\n                 Type t4 = Type.getType(t3.getDescriptor().substring(1));\r\n                 LocalType.type(e2, t4);\r\n                 return t4;\r", "fixed": "         Type t2 = LocalType.type(e2.op1.value);\r\n         if (t2 == null && e2.op1.value.vt == VT.ARRAY) {\r\n             Type t3 = detectArray((E2Expr) e2.op1.value);\r\n            if (t3 != null && t3.getSort() == Type.ARRAY) {\r\n                 Type t4 = Type.getType(t3.getDescriptor().substring(1));\r\n                 LocalType.type(e2, t4);\r\n                 return t4;\r", "sourceBeforeFix": "t3.getSize()", "sourceAfterFix": "t3.getSort()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "40a36841e2ed139a2a8714ccdafcaee49693f48f", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "                 grpbyExpr, new TypeCheckCtx(groupByInputRowResolver));\n             ExprNodeDesc grpbyExprNDesc = astToExprNDescMap.get(grpbyExpr);\n             if (grpbyExprNDesc == null)\n              throw new RuntimeException(\"Invalid Column Reference: \" + grpbyExpr.dump());\n             addToGBExpr(groupByOutputRowResolver, groupByInputRowResolver, grpbyExpr,\n                 grpbyExprNDesc, gbExprNDescLst, outputColumnNames);", "fixed": "                 grpbyExpr, new TypeCheckCtx(groupByInputRowResolver));\n             ExprNodeDesc grpbyExprNDesc = astToExprNDescMap.get(grpbyExpr);\n             if (grpbyExprNDesc == null)\n              throw new OptiqSemanticException(\"Invalid Column Reference: \" + grpbyExpr.dump());\n             addToGBExpr(groupByOutputRowResolver, groupByInputRowResolver, grpbyExpr,\n                 grpbyExprNDesc, gbExprNDescLst, outputColumnNames);", "sourceBeforeFix": "new RuntimeException(\"Invalid Column Reference: \" + grpbyExpr.dump())", "sourceAfterFix": "new OptiqSemanticException(\"Invalid Column Reference: \" + grpbyExpr.dump())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "da50508e35642352d7c8cf0fe283d36f3c89e3f2", "projectName": "naver.pinpoint", "bugType": "Change Unary Operator\t", "problem": "     public void checkLibrary(ClassLoader classLoader, String javassistClassName) {\r\n \t\tboolean findClass = findClass(javassistClassName);\r\n\t\tif (findClass) {\r\n \t\t\treturn;\r\n \t\t}\r\n \t\tloadClassLoaderLibraries(classLoader);\r", "fixed": "     public void checkLibrary(ClassLoader classLoader, String javassistClassName) {\r\n \t\tboolean findClass = findClass(javassistClassName);\r\n\t\tif (!findClass) {\r\n \t\t\treturn;\r\n \t\t}\r\n \t\tloadClassLoaderLibraries(classLoader);\r", "sourceBeforeFix": "findClass", "sourceAfterFix": "!findClass"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSplunkEndpointBuilder\n             extends\n                 AdvancedSplunkEndpointConsumerBuilder, AdvancedSplunkEndpointProducerBuilder {\n         default SplunkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSplunkEndpointBuilder\n             extends\n                 AdvancedSplunkEndpointConsumerBuilder, AdvancedSplunkEndpointProducerBuilder {\n         default SplunkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloClientEndpointBuilder\n             extends\n                 MiloClientEndpointConsumerBuilder, MiloClientEndpointProducerBuilder {\n         default AdvancedMiloClientEndpointBuilder advanced() {", "fixed": "     \n    public interface MiloClientEndpointBuilder\n             extends\n                 MiloClientEndpointConsumerBuilder, MiloClientEndpointProducerBuilder {\n         default AdvancedMiloClientEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if the given number of bytes for a normalized suffice to determine the order of elements,\n \t *         false otherwise.\n \t */\n\tpublic boolean isNormalizedKeyPrefixOnly(int keyBytes);\n \t/**\n \t * Writes a normalized key for the given record into the target byte array, starting at the specified position", "fixed": " \t * @return True, if the given number of bytes for a normalized suffice to determine the order of elements,\n \t *         false otherwise.\n \t */\n\tpublic abstract boolean isNormalizedKeyPrefixOnly(int keyBytes);\n \t/**\n \t * Writes a normalized key for the given record into the target byte array, starting at the specified position", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JooqEndpointBuilder\n             extends\n                 JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {\n         default AdvancedJooqEndpointBuilder advanced() {", "fixed": "     \n    public interface JooqEndpointBuilder\n             extends\n                 JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {\n         default AdvancedJooqEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    TestSuiteEnvironment.getServerAddress(), serverPort);\n         }\n         protected abstract Policy getPolicy();", "fixed": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    CONTAINER_0.equals(containerId) ? TestSuiteEnvironment.getServerAddress() : TestSuiteEnvironment.getServerAddressNode1(),\n                    serverPort);\n         }\n         protected abstract Policy getPolicy();", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0ffdc3246d1bd202e6cef4b486ffb4e9257b0311", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n    public final void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();", "fixed": "      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n    public void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();", "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}
{"fixCommitSHA1": "a068d0ce41a1e500671bdd0c5706378aeee3e840", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "             }\n           }, \"+switch-master\");\n        } catch (JedisConnectionException e) {\n           if (running.get()) {\n             log.log(Level.SEVERE, \"Lost connection to Sentinel at \" + host + \":\" + port", "fixed": "             }\n           }, \"+switch-master\");\n        } catch (JedisException e) {\n           if (running.get()) {\n             log.log(Level.SEVERE, \"Lost connection to Sentinel at \" + host + \":\" + port", "sourceBeforeFix": "JedisConnectionException e", "sourceAfterFix": "JedisException e"}
{"fixCommitSHA1": "91c086b7af22b6cfaf2f66b2c872b752dc10a19c", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             }\n             LOG.trace(\"List files {} found {} files\", file.getAbsoluteFilePath(), files.size());\n             for (FTPFile f : files) {\n                if (f.getName().equals(file.getFileName())) {\n                     newLastModified = f.getTimestamp().getTimeInMillis();\n                     newLength = f.getSize();\n                 }", "fixed": "             }\n             LOG.trace(\"List files {} found {} files\", file.getAbsoluteFilePath(), files.size());\n             for (FTPFile f : files) {\n                if (f.getName().equals(file.getFileNameOnly())) {\n                     newLastModified = f.getTimestamp().getTimeInMillis();\n                     newLength = f.getSize();\n                 }", "sourceBeforeFix": "file.getFileName()", "sourceAfterFix": "file.getFileNameOnly()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "a13119af042b2db29aae5f04382cc62102b21899", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\t\t\t\t\t\"\\nClass was actually found in classloader - deserialization issue.\" :\n \t\t\t\t\t\t\t\"\\nClass not resolvable through given classloader.\");\n\t\t\tthrow new StreamTaskException(exceptionMessage);\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new StreamTaskException(\"Cannot instantiate user function.\", e);", "fixed": " \t\t\t\t\t\t\t\"\\nClass was actually found in classloader - deserialization issue.\" :\n \t\t\t\t\t\t\t\"\\nClass not resolvable through given classloader.\");\n\t\t\tthrow new StreamTaskException(exceptionMessage, e);\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new StreamTaskException(\"Cannot instantiate user function.\", e);", "sourceBeforeFix": "new StreamTaskException(exceptionMessage)", "sourceAfterFix": "new StreamTaskException(exceptionMessage,e)"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "c5ccaee5065a52110a4124505002d6afeb7c13ca", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n            StringBuilder sb = new StringBuilder(64);\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {", "fixed": "         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n            ByteBuf line = buffer(64);\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {", "sourceBeforeFix": "StringBuilder sb=new StringBuilder(64); ", "sourceAfterFix": "ByteBuf line=buffer(64); "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleDriveEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleDriveEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GoogleDriveEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleDriveEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "a18c3d7297c81147d0fdf619ba0d4a85fc408726", "projectName": "thinkaurelius.titan", "bugType": "Less Specific If", "problem": "                 throw new TemporaryStorageException(ee);\n             }\n} else {\n            if (cf.getCompressionType() == null) {\n                 try {\n                     adm.disableTable(tableName);", "fixed": "                 throw new TemporaryStorageException(ee);\n             }\n} else {\n            if (cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE) {\n                 try {\n                     adm.disableTable(tableName);", "sourceBeforeFix": "cf.getCompressionType() == null", "sourceAfterFix": "cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE"}
{"fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      */\n     private void addTag(String text, int line)\n     {\n        final Tag tag = new Tag(text, line);\n         tags.add(tag);\n     }\n }", "fixed": "      */\n     private void addTag(String text, int line)\n     {\n        final Tag tag = new Tag(text, line, this);\n         tags.add(tag);\n     }\n }", "sourceBeforeFix": "new Tag(text,line)", "sourceAfterFix": "new Tag(text,line,this)"}
{"fixCommitSHA1": "64454faa3bbc2c1d709779762d9f93a15a1b8c15", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": "     Map<String, String> confOverlay = new HashMap<String, String>();\n     String hql = \"drop table if exists table_not_exists\";\n     Mockito.when(operationManager.newExecuteStatementOperation(same(session), eq(hql),\n        (Map<String, String>)Mockito.any(), eq(true), eq(0))).thenReturn(operation);\n     try {", "fixed": "     Map<String, String> confOverlay = new HashMap<String, String>();\n     String hql = \"drop table if exists table_not_exists\";\n     Mockito.when(operationManager.newExecuteStatementOperation(same(session), eq(hql),\n        (Map<String, String>)Mockito.any(), eq(true), eq(0L))).thenReturn(operation);\n     try {", "sourceBeforeFix": "eq(0)", "sourceAfterFix": "eq(0L)"}
{"fixCommitSHA1": "da5e1827cf1c86cb1bddf3886a83736990a36430", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         if (leftValue instanceof Comparable) {\n            Object value = converter.convertTo(leftValue.getClass(), rightValue);\n             if (value != null) {\n                 return ((Comparable) leftValue).compareTo(value);\n             }", "fixed": "         if (leftValue instanceof Comparable) {\n            Object value = converter.tryConvertTo(leftValue.getClass(), rightValue);\n             if (value != null) {\n                 return ((Comparable) leftValue).compareTo(value);\n             }", "sourceBeforeFix": "converter.convertTo(rightValue.getClass(),leftValue)", "sourceAfterFix": "converter.tryConvertTo(rightValue.getClass(),leftValue)"}
{"fixCommitSHA1": "a33c7226df1ebd6d0deab62bead9438d9a1ff2ac", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\treturn;\n \t\t}\n\t\tSystem.arraycopy(bytes, 0, this.bytes, 0, SIZE);\n \t}\n \t/**", "fixed": " \t\t\treturn;\n \t\t}\n\t\tSystem.arraycopy(src, 0, this.bytes, 0, SIZE);\n \t}\n \t/**", "sourceBeforeFix": "System.arraycopy(bytes,0,this.bytes,0,SIZE)", "sourceAfterFix": "System.arraycopy(src,0,this.bytes,0,SIZE)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"myq ReturnCode: {}\",returnCode)", "sourceAfterFix": "logger.trace(\"myq ReturnCode: {}\",returnCode)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "             @Override\n             public void close() throws IOException {\n                throw new IOException();\n             }\n         });\n     }", "fixed": "             @Override\n             public void close() throws IOException {\n                throw new IOException(\"Test IOException\");\n             }\n         });\n     }", "sourceBeforeFix": "new IOException()", "sourceAfterFix": "new IOException(\"Test IOException\")"}
{"fixCommitSHA1": "07b041b58bd8c0780c744e672e9dd256a933b841", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\r\n \tstatic public String getSimpleName (Class c) {\r\n\t\treturn c.getName();\r\n \t}\r\n \t\r", "fixed": " \t\r\n \tstatic public String getSimpleName (Class c) {\r\n\t\treturn c.getSimpleName();\r\n \t}\r\n \t\r", "sourceBeforeFix": "c.getName()", "sourceAfterFix": "c.getSimpleName()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCMEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CMEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCMEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CMEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "dee930814fe7ee86fad5be312bce331affc0fc0b", "projectName": "alibaba.druid", "bugType": "Change Binary Operator", "problem": "             String errorMessage = buf.toString();\n            if (this.createError == null) {\n                 throw new GetConnectionTimeoutException(errorMessage, createError);\n             } else {\n                 throw new GetConnectionTimeoutException(errorMessage);", "fixed": "             String errorMessage = buf.toString();\n            if (this.createError != null) {\n                 throw new GetConnectionTimeoutException(errorMessage, createError);\n             } else {\n                 throw new GetConnectionTimeoutException(errorMessage);", "sourceBeforeFix": "this.createError == null", "sourceAfterFix": "this.createError != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SalesforceEndpointBuilder\n             extends\n                 SalesforceEndpointConsumerBuilder, SalesforceEndpointProducerBuilder {\n         default AdvancedSalesforceEndpointBuilder advanced() {", "fixed": "     \n    public interface SalesforceEndpointBuilder\n             extends\n                 SalesforceEndpointConsumerBuilder, SalesforceEndpointProducerBuilder {\n         default AdvancedSalesforceEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleMailEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleMailEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GoogleMailEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleMailEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "fixed": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "sourceBeforeFix": "id=15805", "sourceAfterFix": "id=10805"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "ea323fc628b5c5f5fb0a954650e96be6adc32858", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tdouble temp = ParseUtils.parseTemperature(S300TH_DATA_1);\n \t\tAssert.assertEquals(23.2, temp, 0.01);\n\t\tdouble humidity = ParseUtils.parseHumidity(S300TH_DATA_1);\n \t\tAssert.assertEquals(50.8, humidity, 0.01);\n \t\tString address = ParseUtils.parseS300THAddress(S300TH_DATA_1);", "fixed": " \t\tdouble temp = ParseUtils.parseTemperature(S300TH_DATA_1);\n \t\tAssert.assertEquals(23.2, temp, 0.01);\n\t\tdouble humidity = ParseUtils.parseS300THHumidity(S300TH_DATA_1);\n \t\tAssert.assertEquals(50.8, humidity, 0.01);\n \t\tString address = ParseUtils.parseS300THAddress(S300TH_DATA_1);", "sourceBeforeFix": "ParseUtils.parseHumidity(S300TH_DATA_1)", "sourceAfterFix": "ParseUtils.parseS300THHumidity(S300TH_DATA_1)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "465403dcb54522a763acdab0ff7fee7c03b0f341", "projectName": "google.closure-compiler", "bugType": "Change Boolean Literal", "problem": "    * and the optimizations see the old types. We plan to switch these users to NTI-only builds\n    * and delete this option.\n    */\n  private boolean runOTIafterNTI = false;\n   /**\n* Relevant only when {@link", "fixed": "    * and the optimizations see the old types. We plan to switch these users to NTI-only builds\n    * and delete this option.\n    */\n  private boolean runOTIafterNTI = true;\n   /**\n* Relevant only when {@link", "sourceBeforeFix": "runOTIafterNTI=false", "sourceAfterFix": "runOTIafterNTI=true"}
{"fixCommitSHA1": "8e5020ce3091e4fb07d86e4b935afec5ec1c5815", "projectName": "Alluxio.alluxio", "bugType": "Change Binary Operator", "problem": "   private long mLastHeartbeatMs;\n   public UserInfo(long userId) {\n    Preconditions.checkArgument(userId <= 0, \"Invalid user id \" + userId);\n     USER_ID = userId;\n     mOwnBytes = 0;\n     mLastHeartbeatMs = System.currentTimeMillis();", "fixed": "   private long mLastHeartbeatMs;\n   public UserInfo(long userId) {\n    Preconditions.checkArgument(userId > 0, \"Invalid user id \" + userId);\n     USER_ID = userId;\n     mOwnBytes = 0;\n     mLastHeartbeatMs = System.currentTimeMillis();", "sourceBeforeFix": "userId <= 0", "sourceAfterFix": "userId > 0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDigitalSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DigitalSignatureEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDigitalSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DigitalSignatureEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "7369734ba2477dc5f208c9bcdbf438d42e92ac25", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tsetTransform(false);\n \t}\n\tpublic Container (Actor actor) {\n \t\tthis();\n \t\tsetActor(actor);\n \t}", "fixed": " \t\tsetTransform(false);\n \t}\n\tpublic Container (T actor) {\n \t\tthis();\n \t\tsetActor(actor);\n \t}", "sourceBeforeFix": "Actor actor", "sourceAfterFix": "T actor"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "    * % hadoop key list [-provider providerPath]\n    * % hadoop key delete keyName [--provider providerPath] [-i]\n    * </pre>\n   * @param args\n   * @return\n    * @throws IOException\n    */\n   private int init(String[] args) throws IOException {", "fixed": "    * % hadoop key list [-provider providerPath]\n    * % hadoop key delete keyName [--provider providerPath] [-i]\n    * </pre>\n   * @param args Command line arguments.\n   * @return 0 on success, 1 on failure.\n    * @throws IOException\n    */\n   private int init(String[] args) throws IOException {", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "f103267d37e15a1f2ad7cf09da94b75b53d34c02", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "    */\n   public BlockStoreLocation getBlockLocation() {\n     StorageTier tier = mDir.getParentTier();\n    return new BlockStoreLocation(tier.getTierAlias(), mDir.getDirId());\n   }\n   public StorageDir getParentDir() {", "fixed": "    */\n   public BlockStoreLocation getBlockLocation() {\n     StorageTier tier = mDir.getParentTier();\n    return new BlockStoreLocation(tier.getTierAlias(), mDir.getDirIndex());\n   }\n   public StorageDir getParentDir() {", "sourceBeforeFix": "mDir.getDirId()", "sourceAfterFix": "mDir.getDirIndex()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5221c15e183cb7029a305766d137d909f77e8941", "projectName": "google.guice", "bugType": "Change Identifier Used", "problem": "     for (int t = 0; t < types.length; t++) {\n       result[t] = resolve(types[t]);\n     }\n    return ImmutableList.of(result);\n   }\n   /**", "fixed": "     for (int t = 0; t < types.length; t++) {\n       result[t] = resolve(types[t]);\n     }\n    return ImmutableList.copyOf(result);\n   }\n   /**", "sourceBeforeFix": "ImmutableList.of(result)", "sourceAfterFix": "ImmutableList.copyOf(result)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XChangeEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedXChangeEndpointBuilder advanced() {\n             return (AdvancedXChangeEndpointBuilder) this;\n         }", "fixed": "     \n    public interface XChangeEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedXChangeEndpointBuilder advanced() {\n             return (AdvancedXChangeEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1fc5a3d567e5854f3cfe9a2e3f0cb8b808515db0", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        assertTrue(latch.await(1, TimeUnit.MINUTES));\n         assertEquals(0, map.size());\n     }", "fixed": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        assertTrue(latch.await(5, TimeUnit.MINUTES));\n         assertEquals(0, map.size());\n     }", "sourceBeforeFix": "latch.await(1,TimeUnit.MINUTES)", "sourceAfterFix": "latch.await(5,TimeUnit.MINUTES)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 7:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 7:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGitEndpointBuilder\n             extends\n                 AdvancedGitEndpointConsumerBuilder, AdvancedGitEndpointProducerBuilder {\n         default GitEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGitEndpointBuilder\n             extends\n                 AdvancedGitEndpointConsumerBuilder, AdvancedGitEndpointProducerBuilder {\n         default GitEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9d85ae2d9245632eea8a63a4a5e77b9e0081a2c6", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     assertTrue(\"\" + compressedProto.length, compressedProto.length < 391000);\n    assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 2500000);\n   }\n   @Test", "fixed": "     assertTrue(\"\" + compressedProto.length, compressedProto.length < 391000);\n    assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 2550000);\n   }\n   @Test", "sourceBeforeFix": "uncompressedProto.length < 2500000", "sourceAfterFix": "uncompressedProto.length < 2550000"}
{"fixCommitSHA1": "0d28e2c39fb2fb0b3f12716ae5cd7caef3b12b06", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "     }\n     try (LockedInodePath inodePath = mInodeTree\n         .lockFullInodePath(entry.getId(), InodeTree.LockMode.WRITE)) {\n      setAttributeInternal(inodePath, false, entry.getOpTimeMs(), options);\n     }\n   }", "fixed": "     }\n     try (LockedInodePath inodePath = mInodeTree\n         .lockFullInodePath(entry.getId(), InodeTree.LockMode.WRITE)) {\n      setAttributeInternal(inodePath, true, entry.getOpTimeMs(), options);\n     }\n   }", "sourceBeforeFix": "setAttributeInternal(tempInodePath,true,opTimeMs,options)", "sourceAfterFix": "setAttributeInternal(tempInodePath,false,opTimeMs,options)"}
{"fixCommitSHA1": "19dac46f389eff0af027d9d11176db6eec0cdbc3", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegate(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "fixed": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegateForNewObject(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "sourceBeforeFix": "findDelegate(name)", "sourceAfterFix": "findDelegateForNewObject(name)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedServiceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServiceEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedServiceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServiceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCaffeineCacheEndpointBuilder\n             extends\n                 AdvancedCaffeineCacheEndpointConsumerBuilder, AdvancedCaffeineCacheEndpointProducerBuilder {\n         default CaffeineCacheEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCaffeineCacheEndpointBuilder\n             extends\n                 AdvancedCaffeineCacheEndpointConsumerBuilder, AdvancedCaffeineCacheEndpointProducerBuilder {\n         default CaffeineCacheEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6cc0fdc67c2c6f12131ed252473d3c7d77d90cb5", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "         }\n         if (model == null) {\n            model = new EdgeDataTableModel(graph.getEdges().toArray(), columns.toArray(new EdgeDataColumn[0]));\n             table.setModel(model);\n         } else {\n            model.setEdges(graph.getEdges().toArray());\n             model.setColumns(columns.toArray(new EdgeDataColumn[0]));\n         }", "fixed": "         }\n         if (model == null) {\n            model = new EdgeDataTableModel(graph.getEdgesAndMetaEdges().toArray(), columns.toArray(new EdgeDataColumn[0]));\n             table.setModel(model);\n         } else {\n            model.setEdges(graph.getEdgesAndMetaEdges().toArray());\n             model.setColumns(columns.toArray(new EdgeDataColumn[0]));\n         }", "sourceBeforeFix": "graph.getEdges()", "sourceAfterFix": "graph.getEdgesAndMetaEdges()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b25df4b81f2bca4e6ba43796512625dab248a9cf", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tsubquery.add(Restrictions.eqProperty(\"ff.form\", \"form\"));\r\n \t\t\tsubquery.add(Restrictions.in(\"ff.formFieldId\", anyFormFieldIds));\r\n\t\t\tcrit.add(Subqueries.gt(0L, subquery));\r\n \t\t}\r", "fixed": " \t\t\tsubquery.add(Restrictions.eqProperty(\"ff.form\", \"form\"));\r\n \t\t\tsubquery.add(Restrictions.in(\"ff.formFieldId\", anyFormFieldIds));\r\n\t\t\tcrit.add(Subqueries.lt(0L, subquery));\r\n \t\t}\r", "sourceBeforeFix": "Subqueries.gt(0L,subquery)", "sourceAfterFix": "Subqueries.lt(0L,subquery)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e376b7be0a40adaba56bbefce50c3f0930a9475c", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         return null;\n     }\n    public AttributeModel getModel(Workspace workspace) {\n         AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);\n         if (model != null) {\n             return model;", "fixed": "         return null;\n     }\n    public synchronized AttributeModel getModel(Workspace workspace) {\n         AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);\n         if (model != null) {\n             return model;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "ec5961a27122b228cb8adb634ee183eebcefa98c", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "   }\n   @explain(displayName=\"Alias -> Map Operator Tree\")\n  public HashMap<String, Operator<? extends Serializable>> getAliasToWork() {\n     return this.aliasToWork;\n   }\n  public void setAliasToWork(final HashMap<String,Operator<? extends Serializable>> aliasToWork) {\n     this.aliasToWork=aliasToWork;\n   }\n   public tableDesc getKeyDesc() {", "fixed": "   }\n   @explain(displayName=\"Alias -> Map Operator Tree\")\n  public LinkedHashMap<String, Operator<? extends Serializable>> getAliasToWork() {\n     return this.aliasToWork;\n   }\n  public void setAliasToWork(final LinkedHashMap<String,Operator<? extends Serializable>> aliasToWork) {\n     this.aliasToWork=aliasToWork;\n   }\n   public tableDesc getKeyDesc() {", "sourceBeforeFix": "HashMap<String,Operator<? extends Serializable>>", "sourceAfterFix": "LinkedHashMap<String,Operator<? extends Serializable>>"}
{"fixCommitSHA1": "427eaad53e8d6d42324d43993906238af4884659", "projectName": "dropwizard.metrics", "bugType": "Wrong Function Name", "problem": "             try {\n                 final ObjectName objectName = createName(\"timers\", name);\n                 mBeanServer.unregisterMBean(objectName);\n                registered.add(objectName);\n             } catch (InstanceNotFoundException e) {\n                 LOGGER.debug(\"Unable to unregister timer\", e);\n             } catch (MBeanRegistrationException e) {", "fixed": "             try {\n                 final ObjectName objectName = createName(\"timers\", name);\n                 mBeanServer.unregisterMBean(objectName);\n                registered.remove(objectName);\n             } catch (InstanceNotFoundException e) {\n                 LOGGER.debug(\"Unable to unregister timer\", e);\n             } catch (MBeanRegistrationException e) {", "sourceBeforeFix": "registered.add(objectName)", "sourceAfterFix": "registered.remove(objectName)"}
{"fixCommitSHA1": "4ff49a75165cd362b30f586629d3935c964f49dd", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * @param stream the stream to\n    * @param title a string title for the stack trace\n    */\n  public static void printThreadInfo(PrintWriter stream,\n                                      String title) {\n     final int STACK_DEPTH = 20;\n     boolean contention = threadBean.isThreadContentionMonitoringEnabled();", "fixed": "    * @param stream the stream to\n    * @param title a string title for the stack trace\n    */\n  public synchronized static void printThreadInfo(PrintWriter stream,\n                                      String title) {\n     final int STACK_DEPTH = 20;\n     boolean contention = threadBean.isThreadContentionMonitoringEnabled();", "sourceBeforeFix": "9", "sourceAfterFix": "41"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "15f26883515231610c753d25e224c5e26cb4d641", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "                 xmlReader = xmlReaderPool.createXMLReader();\n             }\n         } catch (Exception ex) {\n            LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", ex);\n         }\n         return new SAXSource(xmlReader, inputSource);\n     }", "fixed": "                 xmlReader = xmlReaderPool.createXMLReader();\n             }\n         } catch (Exception ex) {\n            LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", ex.getMessage(), ex);\n         }\n         return new SAXSource(xmlReader, inputSource);\n     }", "sourceBeforeFix": "LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\",ex)", "sourceAfterFix": "LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\",ex.getMessage(),ex)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0682e8dd41045e3375b61d3d76f6e6991e98c869", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (simple.getToSentDate() != null) {\n            String s = simple.getFromSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), true, offset));", "fixed": "             }\n         }\n         if (simple.getToSentDate() != null) {\n            String s = simple.getToSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), true, offset));", "sourceBeforeFix": "simple.getFromSentDate()", "sourceAfterFix": "simple.getFromReceivedDate()"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "    * % hadoop key list [-provider providerPath]\n    * % hadoop key delete keyName [--provider providerPath] [-i]\n    * </pre>\n   * @param args\n   * @return\n    * @throws IOException\n    */\n   private int init(String[] args) throws IOException {", "fixed": "    * % hadoop key list [-provider providerPath]\n    * % hadoop key delete keyName [--provider providerPath] [-i]\n    * </pre>\n   * @param args Command line arguments.\n   * @return 0 on success, 1 on failure.\n    * @throws IOException\n    */\n   private int init(String[] args) throws IOException {", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1ab4426ed60aec7fbc643db7d66f85e53e9c5619", "projectName": "Activiti.Activiti", "bugType": "Change Boolean Literal", "problem": "   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false));\n   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames, String locale, boolean withLocalizationFallback) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false, locale, withLocalizationFallback));\n   }\n   public Object getVariable(String executionId, String variableName) {", "fixed": "   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true));\n   }\n   public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames, String locale, boolean withLocalizationFallback) {\n    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true, locale, withLocalizationFallback));\n   }\n   public Object getVariable(String executionId, String variableName) {", "sourceBeforeFix": "new GetExecutionVariableInstancesCmd(executionId,variableNames,false)", "sourceAfterFix": "new GetExecutionVariableInstancesCmd(executionId,variableNames,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "50418466a40024d626e2fce8e87693305be3958e", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 String javascriptVersion = request.getHeader(HeaderConfig.X_ATMOSPHERE_FRAMEWORK);\n                 int version = Integer.valueOf(javascriptVersion.split(\"-\")[0].replace(\".\", \"\"));\n                 if (version < 221) {\n                    logger.debug(\"Invalid Atmosphere Version {}\", javascriptVersion);\n                     response.setStatus(501);\n                     response.addHeader(X_ATMOSPHERE_ERROR, \"Atmosphere Protocol version not supported.\");\n                     try {", "fixed": "                 String javascriptVersion = request.getHeader(HeaderConfig.X_ATMOSPHERE_FRAMEWORK);\n                 int version = Integer.valueOf(javascriptVersion.split(\"-\")[0].replace(\".\", \"\"));\n                 if (version < 221) {\n                    logger.error(\"Invalid Atmosphere Version {}\", javascriptVersion);\n                     response.setStatus(501);\n                     response.addHeader(X_ATMOSPHERE_ERROR, \"Atmosphere Protocol version not supported.\");\n                     try {", "sourceBeforeFix": "logger.debug(\"Invalid Atmosphere Version {}\",javascriptVersion)", "sourceAfterFix": "logger.error(\"Invalid Atmosphere Version {}\",javascriptVersion)"}
{"fixCommitSHA1": "ece9610959ca56ac6472c4eb8dd1d053c7304b80", "projectName": "facebook.presto", "bugType": "Same Function Less Args", "problem": "     public int getStartedSplits()\n     {\n        return Ints.min(startedSplits.get(), completedSplits.get(), splits);\n     }\n     public int getCompletedSplits()\n     {\n        return Ints.min(completedSplits.get(), splits);\n     }\n     public int getBufferedPageCount()", "fixed": "     public int getStartedSplits()\n     {\n        return Ints.min(startedSplits.get(), splits);\n     }\n     public int getCompletedSplits()\n     {\n        return Ints.min(completedSplits.get(), startedSplits.get(), splits);\n     }\n     public int getBufferedPageCount()", "sourceBeforeFix": "Ints.min(startedSplits.get(),completedSplits.get(),splits)", "sourceAfterFix": "Ints.min(startedSplits.get(),splits)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentTo(node2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9cc8a299c9915d4b2a90cdef217c062c390d6f09", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": " import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.component.mock.MockEndpoint;\n public class FileConcurrentWriteAppendSameFileTest extends ContextTestSupport {\n    private final int size = 1000;\n     @Override\n     protected void setUp() throws Exception {", "fixed": " import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.component.mock.MockEndpoint;\n public class FileConcurrentWriteAppendSameFileTest extends ContextTestSupport {\n    private final int size = 500;\n     @Override\n     protected void setUp() throws Exception {", "sourceBeforeFix": "size=1000", "sourceAfterFix": "size=500"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bf6b65957c211cf98a7971cde9d8bded2ae67236", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "             }\n         });\n        final ServiceActivatorContext serviceActivatorContext = new ServiceActivatorContextImpl(batchBuilder);\n         activateManagementCommunication(serviceActivatorContext);", "fixed": "             }\n         });\n        final ServiceActivatorContext serviceActivatorContext = new ServiceActivatorContextImpl(batchBuilder, serviceContainer);\n         activateManagementCommunication(serviceActivatorContext);", "sourceBeforeFix": "new ServiceActivatorContextImpl(batchBuilder)", "sourceAfterFix": "new ServiceActivatorContextImpl(batchBuilder,serviceContainer)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "d0c64987a9cb694631a3e5bc77b669f49f93a30e", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "fixed": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAMQPEndpointBuilder\n             extends\n                 AdvancedAMQPEndpointConsumerBuilder, AdvancedAMQPEndpointProducerBuilder {\n         default AMQPEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAMQPEndpointBuilder\n             extends\n                 AdvancedAMQPEndpointConsumerBuilder, AdvancedAMQPEndpointProducerBuilder {\n         default AMQPEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CaffeineLoadCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCaffeineLoadCacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CaffeineLoadCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCaffeineLoadCacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7b2e1e1a5d17428d853aa964971695bc63ccd5b8", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 }\nRange range = Range.create(startPosition, cursor.getPosition());\n                 return new RunLengthEncodedBlock(key, range);\n             }\n         };", "fixed": "                 }\n                Range range = Range.create(startPosition, cursor.getCurrentValueEndPosition());\n                 return new RunLengthEncodedBlock(key, range);\n             }\n         };", "sourceBeforeFix": "cursor.getPosition()", "sourceAfterFix": "cursor.getCurrentValueEndPosition()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  * Auto-configuration for Selenium {@link WebDriver} MockMVC integration.\n  *\n  * @author Phillip Webb\n  */\n @Configuration\n @ConditionalOnClass(HtmlUnitDriver.class)\n @AutoConfigureAfter(MockMvcAutoConfiguration.class)\n @ConditionalOnProperty(prefix = \"spring.test.webmvc.webdriver\", name = \"enabled\", matchIfMissing = true)\nclass MockMvcWebDriverAutoConfiguration {\n \tprivate final Environment environment;", "fixed": "  * Auto-configuration for Selenium {@link WebDriver} MockMVC integration.\n  *\n  * @author Phillip Webb\n * @since 1.4.0\n  */\n @Configuration\n @ConditionalOnClass(HtmlUnitDriver.class)\n @AutoConfigureAfter(MockMvcAutoConfiguration.class)\n @ConditionalOnProperty(prefix = \"spring.test.webmvc.webdriver\", name = \"enabled\", matchIfMissing = true)\npublic class MockMvcWebDriverAutoConfiguration {\n \tprivate final Environment environment;", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "2fd21d4ed2cf9215c30b5c3a6c3bf4c34087cde9", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "                     memoryMap.getInt(\"virtual\"),\n                     memoryMap.getBoolean(\"supported\"),\n                     memoryMap.getInt(\"mapped\"),\n                    memoryMap.getInt(\"mappedWithJournal\")\n             );\n             final BasicDBObject storageEngineMap = (BasicDBObject) serverStatusResult.get(\"storageEngine\");", "fixed": "                     memoryMap.getInt(\"virtual\"),\n                     memoryMap.getBoolean(\"supported\"),\n                     memoryMap.getInt(\"mapped\"),\n                    memoryMap.getInt(\"mappedWithJournal\", -1)\n             );\n             final BasicDBObject storageEngineMap = (BasicDBObject) serverStatusResult.get(\"storageEngine\");", "sourceBeforeFix": "memoryMap.getInt(\"mappedWithJournal\")", "sourceAfterFix": "memoryMap.getInt(\"mappedWithJournal\",-1)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15806", "sourceAfterFix": "id=10806"}
{"fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int getMessageLength() {\n             return currentOutputPosition;\n         }", "fixed": "         }\n         \n        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {", "fixed": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {", "sourceBeforeFix": "DefaultAtmosphereRequest.newInstance()", "sourceAfterFix": "AtmosphereRequest.newInstance()"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param column column index.\n      * @return value at specified column.\n      */\n    private Object getValueAtDetailNode(DetailNode node, int column) {\n         final Object value;\n         switch (column) {", "fixed": "      * @param column column index.\n      * @return value at specified column.\n      */\n    private static Object getValueAtDetailNode(DetailNode node, int column) {\n         final Object value;\n         switch (column) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "fixed": "                 .retInt();\n     }\n    private static void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsedMillis());\n   }\n   public void testElapsedMillis_multipleSegments() {", "fixed": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n   public void testElapsedMillis_multipleSegments() {", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMiloClientEndpointBuilder\n             extends\n                 AdvancedMiloClientEndpointConsumerBuilder, AdvancedMiloClientEndpointProducerBuilder {\n         default MiloClientEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMiloClientEndpointBuilder\n             extends\n                 AdvancedMiloClientEndpointConsumerBuilder, AdvancedMiloClientEndpointProducerBuilder {\n         default MiloClientEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "fixed": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEtcdEndpointBuilder\n             extends\n                 AdvancedEtcdEndpointConsumerBuilder, AdvancedEtcdEndpointProducerBuilder {\n         default EtcdEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEtcdEndpointBuilder\n             extends\n                 AdvancedEtcdEndpointConsumerBuilder, AdvancedEtcdEndpointProducerBuilder {\n         default EtcdEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(-1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "fixed": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n         }\n         return record;\n     }", "fixed": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "261f178a7b371d33b0c00c887821e8587534c32a", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTask(task);\n         }\n     }", "fixed": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTaskAndWakeup(task);\n         }\n     }", "sourceBeforeFix": "17", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "97814491bc0e383e136612dea07af841c0121681", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(manager)", "sourceAfterFix": "Preconditions.checkNotNull(manager,\"manager\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tColor color = getColor();\r\n \t\tfloat oldAlpha = color.a;\r\n \t\tcolor.a *= alphaModulation;\r\n\t\tsetColor(color);\r\n \t\tdraw(spriteBatch);\r\n \t\tcolor.a = oldAlpha;\r\n\t\tsetColor(color);\r\n \t}\r\n \t\r", "fixed": " \t\tColor color = getColor();\r\n \t\tfloat oldAlpha = color.a;\r\n \t\tcolor.a *= alphaModulation;\r\n\t\tsetColors(color);\r\n \t\tdraw(spriteBatch);\r\n \t\tcolor.a = oldAlpha;\r\n\t\tsetColors(color);\r\n \t}\r\n \t\r", "sourceBeforeFix": "setColor(color)", "sourceAfterFix": "setColors(color)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1fa1669dbb0e9f63856074e1691985fa476166f9", "projectName": "libgdx.libgdx", "bugType": "Same Function Swap Args", "problem": " \t\tif (region.rotate) {\n \t\t\tBufferedImage srcImage = page.getSubimage(region.left, region.top, region.height, region.width);\n\t\t\tsplitImage = new BufferedImage(region.height, region.width, page.getType());\n \t\t\tAffineTransform transform = new AffineTransform();\n \t\t\ttransform.rotate(Math.toRadians(90.0));", "fixed": " \t\tif (region.rotate) {\n \t\t\tBufferedImage srcImage = page.getSubimage(region.left, region.top, region.height, region.width);\n\t\t\tsplitImage = new BufferedImage(region.width, region.height, page.getType());\n \t\t\tAffineTransform transform = new AffineTransform();\n \t\t\ttransform.rotate(Math.toRadians(90.0));", "sourceBeforeFix": "new BufferedImage(region.height,region.width,page.getType())", "sourceAfterFix": "new BufferedImage(region.width,region.height,page.getType())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\tValidationUtils.rejectIfEmptyOrWhitespace(errors, \"description\", \"error.description.required\");\r\n \t\t\tList<Program> programs = Context.getProgramWorkflowService().getAllPrograms(false);\r\n \t\t\tfor (Program program : programs) {\r\n\t\t\t\tif (program.getName().equals(p.getName()) && !program.getProgramId().equals(p.getProgramId())) {\r\n \t\t\t\t\terrors.rejectValue(\"name\", \"general.error.nameAlreadyInUse\");\r\n \t\t\t\t\tbreak;\r\n \t\t\t\t} else {\r", "fixed": " \t\t\tValidationUtils.rejectIfEmptyOrWhitespace(errors, \"description\", \"error.description.required\");\r\n \t\t\tList<Program> programs = Context.getProgramWorkflowService().getAllPrograms(false);\r\n \t\t\tfor (Program program : programs) {\r\n\t\t\t\tif (program.getName().equals(p.getName()) && !program.getUuid().equals(p.getUuid())) {\r\n \t\t\t\t\terrors.rejectValue(\"name\", \"general.error.nameAlreadyInUse\");\r\n \t\t\t\t\tbreak;\r\n \t\t\t\t} else {\r", "sourceBeforeFix": "program.getProgramId()", "sourceAfterFix": "program.getUuid()"}
{"fixCommitSHA1": "f56894832282ce8373d6be58d2f5926b16148976", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": " public class PlanNodeStatsEstimate\n {\n    private static final double DEFAULT_DATA_SIZE_PER_COLUMN = 10;\n     public static final PlanNodeStatsEstimate UNKNOWN_STATS = builder().build();\n     private final double outputRowCount;", "fixed": " public class PlanNodeStatsEstimate\n {\n    private static final double DEFAULT_DATA_SIZE_PER_COLUMN = 50;\n     public static final PlanNodeStatsEstimate UNKNOWN_STATS = builder().build();\n     private final double outputRowCount;", "sourceBeforeFix": "DEFAULT_DATA_SIZE_PER_COLUMN=10", "sourceAfterFix": "DEFAULT_DATA_SIZE_PER_COLUMN=50"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IronMQEndpointBuilder\n             extends\n                 IronMQEndpointConsumerBuilder, IronMQEndpointProducerBuilder {\n         default AdvancedIronMQEndpointBuilder advanced() {", "fixed": "     \n    public interface IronMQEndpointBuilder\n             extends\n                 IronMQEndpointConsumerBuilder, IronMQEndpointProducerBuilder {\n         default AdvancedIronMQEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "63bd96d5f9a9e7f8283886dc8f0505ee21343955", "projectName": "apache.hadoop", "bugType": "Less Specific If", "problem": "     for (int i = 0; i < mountPoints.size(); ++i) {\n       String serviceName =\n           mountPoints.get(i).target.targetFileSystem.getCanonicalServiceName();\n      if (seenServiceNames.contains(serviceName)) {\n         continue;\n       }\n       seenServiceNames.add(serviceName);", "fixed": "     for (int i = 0; i < mountPoints.size(); ++i) {\n       String serviceName =\n           mountPoints.get(i).target.targetFileSystem.getCanonicalServiceName();\n      if (serviceName == null || seenServiceNames.contains(serviceName)) {\n         continue;\n       }\n       seenServiceNames.add(serviceName);", "sourceBeforeFix": "seenServiceNames.contains(serviceName)", "sourceAfterFix": "serviceName == null || seenServiceNames.contains(serviceName)"}
{"fixCommitSHA1": "fa829ec763703ed534b7fa1d79271857a28f4142", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[10];\n        data[0] = 0x0B;\n         data[1] = RFXComBaseMessage.PacketType.TEMPERATURE_RAIN.toByte();\n         data[2] = subType.toByte();\n         data[3] = seqNbr;", "fixed": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[11];\n        data[0] = (byte)(data.length-1);\n         data[1] = RFXComBaseMessage.PacketType.TEMPERATURE_RAIN.toByte();\n         data[2] = subType.toByte();\n         data[3] = seqNbr;", "sourceBeforeFix": "new byte[10]", "sourceAfterFix": "new byte[11]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a77c4414675ac5ff9c3d8b9bcb12ac8866ca4cfc", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void stop()\n     {\n         recovered = false;\n         xaDataSourceManager.removeDataSourceRegistrationListener( dataSourceRegistrationListener );", "fixed": "     }\n     @Override\n    public synchronized void stop()\n     {\n         recovered = false;\n         xaDataSourceManager.removeDataSourceRegistrationListener( dataSourceRegistrationListener );", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "a9bf05f5e1a198ca52e50bdd9280cf53fdbdc728", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Numeric Literal", "problem": "          TestElf.setSlf4jTargetStream(LeakTask.class, ps);\n          Connection connection = ds.getConnection();\n         PoolUtilities.quietlySleep(TimeUnit.SECONDS.toMillis(3));\n          ps.close();\n          connection.close();\n          String s = new String(baos.toByteArray());", "fixed": "          TestElf.setSlf4jTargetStream(LeakTask.class, ps);\n          Connection connection = ds.getConnection();\n         PoolUtilities.quietlySleep(TimeUnit.SECONDS.toMillis(4));\n          ps.close();\n          connection.close();\n          String s = new String(baos.toByteArray());", "sourceBeforeFix": "TimeUnit.SECONDS.toMillis(3)", "sourceAfterFix": "TimeUnit.SECONDS.toMillis(4)"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "e9f14f107361d9cef5582c2d2a8e657691e76ec6", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "fixed": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "sourceBeforeFix": "mockRegionInfo.isMetaRegion()", "sourceAfterFix": "mockRegionInfo.isMetaTable()"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "fixed": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "sourceBeforeFix": "that.getDomain() == null", "sourceAfterFix": "that.getDomain() == null && getDomain() != null"}
{"fixCommitSHA1": "35076f03b4d9b49d15c77bcf6d42f7463fff4397", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "         edgeE.setAttribute(\"source\", e.getSource().getNodeData().getId());\n         edgeE.setAttribute(\"target\", e.getTarget().getNodeData().getId());\n        if( e.isDirected() && !graphModel.isDirected() ) {\n             edgeE.setAttribute(\"type\", \"directed\");\n         }\n        else if( !e.isDirected() && graphModel.isDirected() ) {\n             edgeE.setAttribute(\"type\", \"undirected\");\n         }", "fixed": "         edgeE.setAttribute(\"source\", e.getSource().getNodeData().getId());\n         edgeE.setAttribute(\"target\", e.getTarget().getNodeData().getId());\n        if( e.isDirected() && graphModel.isMixed() ) {\n             edgeE.setAttribute(\"type\", \"directed\");\n         }\n        else if( !e.isDirected() && graphModel.isMixed() ) {\n             edgeE.setAttribute(\"type\", \"undirected\");\n         }", "sourceBeforeFix": "graphModel.isDirected()", "sourceAfterFix": "graphModel.isMixed()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverAcceptor());\n \t\t}\n \t}", "fixed": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \t}", "sourceBeforeFix": "messageHandler.serverAcceptor()", "sourceAfterFix": "messageHandler.serverResponder()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0a8713235af5d85e00396cd65fdaef3939e38d60", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   }\n   private void getTestHelper(TachyonFS tfs) throws IOException {\n    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n    Assert.assertNotNull(mTfs.getFile(fileId));\n   }\n   @Test", "fixed": "   }\n   private void getTestHelper(TachyonFS tfs) throws IOException {\n    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n   @Test", "sourceBeforeFix": "mTfs.getFile(fileId)", "sourceAfterFix": "tfs.getFile(fileId)"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "fixed": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SalesforceEndpointBuilder\n             extends\n                 SalesforceEndpointConsumerBuilder, SalesforceEndpointProducerBuilder {\n         default AdvancedSalesforceEndpointBuilder advanced() {", "fixed": "     \n    public interface SalesforceEndpointBuilder\n             extends\n                 SalesforceEndpointConsumerBuilder, SalesforceEndpointProducerBuilder {\n         default AdvancedSalesforceEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n\t\tContext.setLocale(Context.getLocale());\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r", "fixed": " \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedRestEndpointBuilder\n             extends\n                 AdvancedRestEndpointConsumerBuilder, AdvancedRestEndpointProducerBuilder {\n         default RestEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedRestEndpointBuilder\n             extends\n                 AdvancedRestEndpointConsumerBuilder, AdvancedRestEndpointProducerBuilder {\n         default RestEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Failed to get files from \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to get files from \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedXQueryEndpointBuilder\n             extends\n                 AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {\n         default XQueryEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedXQueryEndpointBuilder\n             extends\n                 AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {\n         default XQueryEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    private static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }", "fixed": "             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "88ab3f29c17cb38e01cfa655876b7627558c6de1", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "         Node rhsValue = ref.getNext();\n         Node newName = IR.name(moduleName).srcref(ref);\n        newName.putProp(Node.ORIGINALNAME_PROP, rhsValue);\n         Node parent = ref.getParent();\n         parent.replaceChild(ref, newName);", "fixed": "         Node rhsValue = ref.getNext();\n         Node newName = IR.name(moduleName).srcref(ref);\n        newName.putProp(Node.ORIGINALNAME_PROP, qName);\n         Node parent = ref.getParent();\n         parent.replaceChild(ref, newName);", "sourceBeforeFix": "newName.putProp(Node.ORIGINALNAME_PROP,rhsValue)", "sourceAfterFix": "newName.putProp(Node.ORIGINALNAME_PROP,qName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "45b12e33e61bbddc5973995f9fcbbdff9d87ccdb", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "  */\n public class AtmosphereResourceEventListenerAdapter implements AtmosphereResourceEventListener {\n    private final static Logger logger = LoggerFactory.getLogger(AtmosphereResourceEventListener.class);\n     @Override\n     public void onPreSuspend(AtmosphereResourceEvent event) {", "fixed": "  */\n public class AtmosphereResourceEventListenerAdapter implements AtmosphereResourceEventListener {\n    private final static Logger logger = LoggerFactory.getLogger(AtmosphereResourceEventListenerAdapter.class);\n     @Override\n     public void onPreSuspend(AtmosphereResourceEvent event) {", "sourceBeforeFix": "AtmosphereResourceEventListener.class", "sourceAfterFix": "AtmosphereResourceEventListenerAdapter.class"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "bd2e348b7cb07ad4e855dac912c550e9799370e4", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         };\n     }\n    private static interface I1 {\n         String m1(@Header(\"foo\")String h1, @Header(\"bar\")String h2);\n         String m2(@Header(\"foo\")String h1, String h2);\n     }\n    private static interface I2 {\n         String m2(String h1, @Header(\"bar\")String h2);\n         String m3(@Header(\"foo\")String h1, String h2);\n         String m4(@Header(\"foo\")String h1, String h2);", "fixed": "         };\n     }\n    private interface I1 {\n         String m1(@Header(\"foo\")String h1, @Header(\"bar\")String h2);\n         String m2(@Header(\"foo\")String h1, String h2);\n     }\n    private interface I2 {\n         String m2(String h1, @Header(\"bar\")String h2);\n         String m3(@Header(\"foo\")String h1, String h2);\n         String m4(@Header(\"foo\")String h1, String h2);", "sourceBeforeFix": "10", "sourceAfterFix": "2"}
{"fixCommitSHA1": "a8513817db3153d638e818e9a27b0e2e1eed3bdc", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "             beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));\n             final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();\n             if (setop != null) {\n                logger.debug(\"    \" + op.getJavaName() + \"\\n                \" + op.getIDLName());\n                 final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);\n                beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(realSetmethod));\n             }\n         }", "fixed": "             beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));\n             final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();\n             if (setop != null) {\n                logger.debug(\"    \" + setop.getJavaName() + \"\\n                \" + setop.getIDLName());\n                 final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);\n                beanMethodMap.put(setop.getIDLName(), new SkeletonStrategy(realSetmethod));\n             }\n         }", "sourceBeforeFix": "op.getIDLName()", "sourceAfterFix": "setop.getIDLName()"}
{"fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     details.clear();\n                    details.put(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {", "fixed": "                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     details.clear();\n                    details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {", "sourceBeforeFix": "details.put(CONFIG_HASH_KEY,currentConfigHash)", "sourceAfterFix": "details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"}
{"fixCommitSHA1": "9d29b3be6a155045aa07ed40d01c9edbaef19b3d", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       FileStatus fStatus = mFileSystem.getFileStatus(new Path(path));\n       BlockLocation[] bLocations = mFileSystem.getFileBlockLocations(fStatus, offset, 1);\n       if (bLocations.length > 0) {\n        String[] names = bLocations[0].getNames();\n         Collections.addAll(ret, names);\n       }\n     } catch (IOException e) {", "fixed": "       FileStatus fStatus = mFileSystem.getFileStatus(new Path(path));\n       BlockLocation[] bLocations = mFileSystem.getFileBlockLocations(fStatus, offset, 1);\n       if (bLocations.length > 0) {\n        String[] names = bLocations[0].getHosts();\n         Collections.addAll(ret, names);\n       }\n     } catch (IOException e) {", "sourceBeforeFix": "bLocations[0].getNames()", "sourceAfterFix": "bLocations[0].getHosts()"}
{"fixCommitSHA1": "3d732616366b93a75351f4f43ecaa80d2d544abe", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "         if (!root.exists()) {\n           if (startOpt != StartupOption.FORMAT) {\n            LOG.info(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");", "fixed": "         if (!root.exists()) {\n           if (startOpt != StartupOption.FORMAT) {\n            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");", "sourceBeforeFix": "LOG.info(\"Cannot access storage directory \" + rootPath)", "sourceAfterFix": "LOG.warn(\"Cannot access storage directory \" + rootPath)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "509beae1e2d9a01e952f9eaf0c4a88037076fc63", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "    * @param server server to open a region\n    * @param regions regions to open\n    */\n  public void sendRegionOpen(HServerInfo server, List<HRegionInfo> regions) {\n     HRegionInterface hri = getServerConnection(server);\n     if (hri == null) {\n       LOG.warn(\"Attempting to send OPEN RPC to server \" + server.getServerName()", "fixed": "    * @param server server to open a region\n    * @param regions regions to open\n    */\n  public void sendRegionOpen(HServerInfo server, List<HRegionInfo> regions)\n  throws IOException {\n     HRegionInterface hri = getServerConnection(server);\n     if (hri == null) {\n       LOG.warn(\"Attempting to send OPEN RPC to server \" + server.getServerName()", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MockEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedMockEndpointBuilder advanced() {\n             return (AdvancedMockEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MockEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMockEndpointBuilder advanced() {\n             return (AdvancedMockEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "66181be1c62816d916c9301dddd2c8c5bc7be1dc", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "       @JsonProperty(\"function\") final String function\n   )\n   {\n    Preconditions.checkNotNull(name, \"Must have a valid, non-null aggregator name\");\n     Preconditions.checkNotNull(fieldNames, \"Must have a valid, non-null fieldNames\");\n    Preconditions.checkNotNull(function, \"Must have a valid, non-null fnAggregate\");\n     this.name = name;\n     this.fieldNames = fieldNames;", "fixed": "       @JsonProperty(\"function\") final String function\n   )\n   {\n    Preconditions.checkNotNull(name, \"Must have a valid, non-null post-aggregator name\");\n     Preconditions.checkNotNull(fieldNames, \"Must have a valid, non-null fieldNames\");\n    Preconditions.checkNotNull(function, \"Must have a valid, non-null function\");\n     this.name = name;\n     this.fieldNames = fieldNames;", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HdfsEndpointBuilder\n             extends\n                 HdfsEndpointConsumerBuilder, HdfsEndpointProducerBuilder {\n         default AdvancedHdfsEndpointBuilder advanced() {", "fixed": "     \n    public interface HdfsEndpointBuilder\n             extends\n                 HdfsEndpointConsumerBuilder, HdfsEndpointProducerBuilder {\n         default AdvancedHdfsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "20d8ac67dc04e9e0c4484af769b156bcd75ef00b", "projectName": "alibaba.canal", "bugType": "Missing Throws Exception", "problem": "     private SocketChannel       channel;\r\n    public MysqlUpdateExecutor(MysqlConnector connector){\r\n         if (!connector.isConnected()) {\r\n            throw new RuntimeException(\"should execute connector.connect() first\");\r\n         }\r\n         this.channel = connector.getChannel();\r", "fixed": "     private SocketChannel       channel;\r\n    public MysqlUpdateExecutor(MysqlConnector connector) throws IOException{\r\n         if (!connector.isConnected()) {\r\n            throw new IOException(\"should execute connector.connect() first\");\r\n         }\r\n         this.channel = connector.getChannel();\r", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLuceneEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LuceneEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLuceneEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LuceneEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0aaa94462bb08336d43b9c8becbbd538108fa318", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             synchronized (r) {\n                 try {\n                    r.getRequest().setAttribute(CACHED, \"true\");\n                     prepareInvokeOnStateChange(r, e);\n                 } catch (Throwable t) {", "fixed": "             synchronized (r) {\n                 try {\n                    rImpl.getRequest().setAttribute(CACHED, \"true\");\n                     prepareInvokeOnStateChange(r, e);\n                 } catch (Throwable t) {", "sourceBeforeFix": "r.getRequest()", "sourceAfterFix": "rImpl.getRequest()"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Change Modifier", "problem": " \npublic class SucceededFuture<T> implements Future<T> {\n   private final T result;\n  public SucceededFuture(T result) {\n     this.result = result;\n   }", "fixed": " \nclass SucceededFuture<T> implements Future<T> {\n   private final T result;\n  SucceededFuture(T result) {\n     this.result = result;\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedClientEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedClientEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SplunkEndpointBuilder\n             extends\n                 SplunkEndpointConsumerBuilder, SplunkEndpointProducerBuilder {\n         default AdvancedSplunkEndpointBuilder advanced() {", "fixed": "     \n    public interface SplunkEndpointBuilder\n             extends\n                 SplunkEndpointConsumerBuilder, SplunkEndpointProducerBuilder {\n         default AdvancedSplunkEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e3b94b6ab4c29b8dddb99ce9fd2efa36e097d455", "projectName": "facebook.presto", "bugType": "Change Binary Operator", "problem": "             }\n            while (!queuedPages.isEmpty() && bufferedBytes >= maxBufferedBytes) {\n                 QueuedPage queuedPage = queuedPages.removeFirst();\n                 addInternal(queuedPage.getPage());\n                 queuedPage.getFuture().set(null);", "fixed": "             }\n            while (!queuedPages.isEmpty() && bufferedBytes < maxBufferedBytes) {\n                 QueuedPage queuedPage = queuedPages.removeFirst();\n                 addInternal(queuedPage.getPage());\n                 queuedPage.getFuture().set(null);", "sourceBeforeFix": "bufferedBytes >= maxBufferedBytes", "sourceAfterFix": "bufferedBytes < maxBufferedBytes"}
{"fixCommitSHA1": "852c8b720dd810c699d6303d0470efa246c84d26", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForRoles\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRoles\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.createRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "fixed": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.saveRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "8bb08f39e3d806264edbd2854bf678f961c7157a", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "   private void doSetup() throws Exception\n   {\n     makeWorker();\n    makeRemoteTaskRunner(new TestRemoteTaskRunnerConfig(new Period(\"PT1S\")));\n   }\n   private void makeRemoteTaskRunner(RemoteTaskRunnerConfig config) throws Exception", "fixed": "   private void doSetup() throws Exception\n   {\n     makeWorker();\n    makeRemoteTaskRunner(new TestRemoteTaskRunnerConfig(new Period(\"PT5S\")));\n   }\n   private void makeRemoteTaskRunner(RemoteTaskRunnerConfig config) throws Exception", "sourceBeforeFix": "TIMEOUT_SECONDS=5", "sourceAfterFix": "TIMEOUT_SECONDS=20"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if the given number of bytes for a normalized suffice to determine the order of elements,\n \t *         false otherwise.\n \t */\n\tpublic boolean isNormalizedKeyPrefixOnly(int keyBytes);\n \t/**\n \t * Writes a normalized key for the given record into the target byte array, starting at the specified position", "fixed": " \t * @return True, if the given number of bytes for a normalized suffice to determine the order of elements,\n \t *         false otherwise.\n \t */\n\tpublic abstract boolean isNormalizedKeyPrefixOnly(int keyBytes);\n \t/**\n \t * Writes a normalized key for the given record into the target byte array, starting at the specified position", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.info(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "fixed": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "sourceBeforeFix": "logger.info(\"Computing Control Flow Graph\")", "sourceAfterFix": "logger.fine(\"Computing Control Flow Graph\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "02f1f95e522fd142dc0805c37e91d12880ab5996", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             else {\n                 block.append(arguments.get(index));\n                 index++;\n                block.append(ByteCodeUtils.ifWasNullPopAndGoto(context, end, unboxedReturnType, Lists.reverse(stackTypes)));\n             }\n         }\n         block.append(invoke(context, binding));", "fixed": "             else {\n                 block.append(arguments.get(index));\n                 index++;\n                block.append(ifWasNullPopAndGoto(context, end, unboxedReturnType, Lists.reverse(stackTypes)));\n             }\n         }\n         block.append(invoke(context, binding));", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "8bce6897f9f7e0b16508c462665e4f9d26d92e39", "projectName": "square.okhttp", "bugType": "Change Identifier Used", "problem": "     String contentType = null;\n     for (Header header : request.getAllHeaders()) {\n       String name = header.getName();\n      if (\"Content-Type\".equals(name)) {\n         contentType = header.getValue();\n       } else {\n         builder.header(name, header.getValue());", "fixed": "     String contentType = null;\n     for (Header header : request.getAllHeaders()) {\n       String name = header.getName();\n      if (\"Content-Type\".equalsIgnoreCase(name)) {\n         contentType = header.getValue();\n       } else {\n         builder.header(name, header.getValue());", "sourceBeforeFix": "\"Content-Type\".equals(name)", "sourceAfterFix": "\"Content-Type\".equalsIgnoreCase(name)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c60610c399277d16c94872e2279f861eb8ccd9b1", "projectName": "gephi.gephi", "bugType": "Change Operand ", "problem": "             }\n            final String containerSource = \"Stream \" + importer;\n             executor.execute(task, new Runnable() {\n                 public void run() {", "fixed": "             }\n            final String containerSource = \"Stream \" + importerName;\n             executor.execute(task, new Runnable() {\n                 public void run() {", "sourceBeforeFix": "\"Stream \" + importer", "sourceAfterFix": "\"Stream \" + importerName"}
{"fixCommitSHA1": "0fc882f517228b6d793b9ef0da5c3fd77c70a9bd", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {\r\n     if (jdbcType == null) {\r\n        ps.setString(i, parameter.toString());\r\n     } else {\r\n        ps.setObject(i, parameter.toString(), jdbcType.TYPE_CODE);\r\n     }\r\n   }\r", "fixed": "   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {\r\n     if (jdbcType == null) {\r\n        ps.setString(i, parameter.name());\r\n     } else {\r\n        ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE);\r\n     }\r\n   }\r", "sourceBeforeFix": "parameter.toString()", "sourceAfterFix": "parameter.name()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15800", "sourceAfterFix": "id=10800"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "d0a169978942736556fd0af1b8e4306c0291e107", "projectName": "apache.storm", "bugType": "Change Unary Operator\t", "problem": "      * @return nullToZero\n      */\n     private static Double nullToZero(Double value) {\n        return Objects.isNull(value) ? value : 0;\n     }\n     /**", "fixed": "      * @return nullToZero\n      */\n     private static Double nullToZero(Double value) {\n        return !Objects.isNull(value) ? value : 0;\n     }\n     /**", "sourceBeforeFix": "Objects.isNull(value)", "sourceAfterFix": "!Objects.isNull(value)"}
{"fixCommitSHA1": "ac9fdf161f9e1464c3492fa6162895be00189540", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         try {\n             Object answer;\n            XMLStreamReader xmlReader;\n             if (needFiltering(exchange)) {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, createNonXmlFilterReader(exchange, stream));\n             } else {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, stream);\n             }\n             String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);\n             if (partialClass != null || partClassFromHeader != null) {", "fixed": "         try {\n             Object answer;\n            final XMLStreamReader xmlReader;\n             if (needFiltering(exchange)) {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, createNonXmlFilterReader(exchange, stream));\n             } else {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, stream);\n             }\n             String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);\n             if (partialClass != null || partClassFromHeader != null) {", "sourceBeforeFix": "typeConverter.convertTo(XMLStreamReader.class,stream)", "sourceAfterFix": "typeConverter.convertTo(XMLStreamReader.class,exchange,stream)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": " \n public class FilterSetTest {\n    private CSVFilter filter;\n     @Before\n     public void setUp() {\n        filter = new CSVFilter(\"\");\n     }\n     @Test", "fixed": " \n public class FilterSetTest {\n    private CsvFilter filter;\n     @Before\n     public void setUp() {\n        filter = new CsvFilter(\"\");\n     }\n     @Test", "sourceBeforeFix": "private CSVFilter filter; ", "sourceAfterFix": "private CsvFilter filter; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "007ea4a7f2ba64fad78f78c1b798ca45455719e4", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     public void defaultsToAllowingComments() throws Exception {\n         final ObjectMapper mapper = factory.build();\n        assertThat(mapper.getJsonFactory().isEnabled(JsonParser.Feature.ALLOW_COMMENTS))\n                 .isTrue();\n     }", "fixed": "     public void defaultsToAllowingComments() throws Exception {\n         final ObjectMapper mapper = factory.build();\n        assertThat(mapper.getFactory().isEnabled(JsonParser.Feature.ALLOW_COMMENTS))\n                 .isTrue();\n     }", "sourceBeforeFix": "mapper.getJsonFactory()", "sourceAfterFix": "mapper.getFactory()"}
{"fixCommitSHA1": "ad3c1adb1c911a348c35bec42a1ec102de7dfdde", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "   }\n   /**\n   * Convenience method for free with recursive set. This is the same as calling free(file, true).\n    *\n    * @param file the handler for the file to free recursively\n    * @throws FileDoesNotExistException if the file does not exist in Tachyon space", "fixed": "   }\n   /**\n   * Convenience method for free without recursive set. This is the same as calling free(file, false).\n    *\n    * @param file the handler for the file to free recursively\n    * @throws FileDoesNotExistException if the file does not exist in Tachyon space", "sourceBeforeFix": "setPin(file,false)", "sourceAfterFix": "setPin(file,true)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "d737cae77778780237425d41e24966ace83e0766", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "   public BlockMeta(TempBlockMeta tempBlock) {\n     super(tempBlock.getBlockId(), tempBlock.getParentDir());\n    mBlockSize = new File(tempBlock.getCommitPath()).length();\n   }\n   @Override", "fixed": "   public BlockMeta(TempBlockMeta tempBlock) {\n     super(tempBlock.getBlockId(), tempBlock.getParentDir());\n    mBlockSize = new File(tempBlock.getPath()).length();\n   }\n   @Override", "sourceBeforeFix": "tempBlock.getCommitPath()", "sourceAfterFix": "tempBlock.getPath()"}
{"fixCommitSHA1": "cb7d625f0a9ee93743e8f3afd15d466e5fc8f286", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * should not have to drop definitions itself.\n    */\n   private void dropUntypedExterns() {\n    for (String externName : nameDefinitionMultimap.keys()) {\n       for (Definition def : new ArrayList<Definition>(nameDefinitionMultimap.get(externName))) {\n         if (def instanceof ExternalNameOnlyDefinition) {\n           Node node = def.getLValue();", "fixed": "    * should not have to drop definitions itself.\n    */\n   private void dropUntypedExterns() {\n    for (String externName : nameDefinitionMultimap.keySet()) {\n       for (Definition def : new ArrayList<Definition>(nameDefinitionMultimap.get(externName))) {\n         if (def instanceof ExternalNameOnlyDefinition) {\n           Node node = def.getLValue();", "sourceBeforeFix": "nameDefinitionMultimap.keys()", "sourceAfterFix": "nameDefinitionMultimap.keySet()"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "14c2a57c072c6036ba7c9246efb4186fd8fd2448", "projectName": "Graylog2.graylog2-server", "bugType": "More Specific If", "problem": "            if (r.destination != null) {\n                 return redirect(r.destination);\n             }", "fixed": "            if (r.destination != null && !r.destination.isEmpty()) {\n                 return redirect(r.destination);\n             }", "sourceBeforeFix": "r.destination != null", "sourceAfterFix": "r.destination != null && !r.destination.isEmpty()"}
{"fixCommitSHA1": "3e7863d4b4b4c8b8ddd529c5f47a055e1d5aad6b", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t\tprivate final Predicate maxContentSize;\n\t\tpublic MaxSizePredicate(int size) {\n \t\t\tthis.maxContentSize = Predicates.maxContentSize(size);\n \t\t}", "fixed": " \t\tprivate final Predicate maxContentSize;\n\t\tMaxSizePredicate(int size) {\n \t\t\tthis.maxContentSize = Predicates.maxContentSize(size);\n \t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "cad7c1f1b0e23a4a1320d967b17aafcaa0119ace", "projectName": "netty.netty", "bugType": "Same Function More Args", "problem": "                 cbb.addComponent(buffer);\n                 cbb.writerIndex(cbb.writerIndex() + buffer.readableBytes());\n             } else {\n                CompositeByteBuf cbb = compositeBuffer();\n                 cbb.addComponents(byteBuf, buffer);\n                 cbb.writerIndex(byteBuf.readableBytes() + buffer.readableBytes());\n                 byteBuf = cbb;", "fixed": "                 cbb.addComponent(buffer);\n                 cbb.writerIndex(cbb.writerIndex() + buffer.readableBytes());\n             } else {\n                CompositeByteBuf cbb = compositeBuffer(Integer.MAX_VALUE);\n                 cbb.addComponents(byteBuf, buffer);\n                 cbb.writerIndex(byteBuf.readableBytes() + buffer.readableBytes());\n                 byteBuf = cbb;", "sourceBeforeFix": "compositeBuffer()", "sourceAfterFix": "compositeBuffer(Integer.MAX_VALUE)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "2778cd8ad6b0f126e5250cc3006459f06991d3ef", "projectName": "hazelcast.hazelcast", "bugType": "Change Operand ", "problem": "     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n            logger.info(\"Using bind address: \" + publicAddress);\n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);", "fixed": "     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n            logger.info(\"Using bind address: \" + bindAddress);\n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);", "sourceBeforeFix": "\"Using bind address: \" + publicAddress", "sourceAfterFix": "\"Using bind address: \" + bindAddress"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "fixed": "                 .retInt();\n     }\n    private static void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "5f959c557973923b797770cac7e01032e89d63c9", "projectName": "spring-projects.spring-boot", "bugType": "Same Function More Args", "problem": " \t\t\tthrows Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.NEED, \"password\", \"src/test/resources/test.jks\"));\n \t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tthis.container.start();\n \t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());", "fixed": " \t\t\tthrows Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\taddTestTxtFile(factory);\n\t\tfactory.setSsl(getSsl(ClientAuth.NEED, \"password\", \"src/test/resources/test.jks\",\n\t\t\t\t\"src/test/resources/test.jks\"));\n \t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tthis.container.start();\n \t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());", "sourceBeforeFix": "getSsl(ClientAuth.NEED,\"password\",\"src/test/resources/test.jks\")", "sourceAfterFix": "getSsl(ClientAuth.NEED,\"password\",\"src/test/resources/test.jks\",\"src/test/resources/test.jks\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SjmsBatchEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedSjmsBatchEndpointBuilder advanced() {\n             return (AdvancedSjmsBatchEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SjmsBatchEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedSjmsBatchEndpointBuilder advanced() {\n             return (AdvancedSjmsBatchEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean keyUp (int keycode) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].keyUp(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean keyUp (int keycode) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).keyUp(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "3c136fbd9f79b179f010322aff8ed2b829209db8", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc, fc2);\n     }\n }", "fixed": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc2, fc);\n     }\n }", "sourceBeforeFix": "assertEquals(fc,fc2)", "sourceAfterFix": "assertEquals(fc2,fc)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4156ed69f5a554a2a0f6ae1fe0e411db1e7ab8d3", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegate(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "fixed": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegateForNewObject(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "sourceBeforeFix": "findDelegate(name)", "sourceAfterFix": "findDelegateForNewObject(name)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0258c8ad89e63130480ff5e15d7d4a12be92ff1c", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "   @Deployment\n   public void testWebServiceInvocationWithDataFlowUEL() throws Exception {\n     ProcessDefinitionEntity processDefinition = processEngineConfiguration\n      .getCommandExecutorTxRequiresNew()\n       .execute(new Command<ProcessDefinitionEntity>() {\n         public ProcessDefinitionEntity execute(CommandContext commandContext) {\n           return Context", "fixed": "   @Deployment\n   public void testWebServiceInvocationWithDataFlowUEL() throws Exception {\n     ProcessDefinitionEntity processDefinition = processEngineConfiguration\n      .getCommandExecutor()\n       .execute(new Command<ProcessDefinitionEntity>() {\n         public ProcessDefinitionEntity execute(CommandContext commandContext) {\n           return Context", "sourceBeforeFix": "processEngineConfiguration.getCommandExecutorTxRequiresNew()", "sourceAfterFix": "processEngineConfiguration.getCommandExecutor()"}
{"fixCommitSHA1": "fd7767ccda80823c077cdc3701166b319d0bd078", "projectName": "netty.netty", "bugType": "Missing Throws Exception", "problem": "         this.port = port;\n     }\n    public void run() {\n         ServerBootstrap b = new ServerBootstrap();\n         try {\n             b.eventLoop(new NioEventLoop(), new NioEventLoop())", "fixed": "         this.port = port;\n     }\n    public void run() throws InterruptedException {\n         ServerBootstrap b = new ServerBootstrap();\n         try {\n             b.eventLoop(new NioEventLoop(), new NioEventLoop())", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "ba0197ee4e9bf1976bb46f363f02b606d2389489", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param blockWorker block worker handle\n    */\n   public WebInterfaceWorkerBlockInfoServlet(BlockWorker blockWorker) {\n    mBlockWorker = Preconditions.checkNotNull(blockWorker);\n   }\n   /**", "fixed": "    * @param blockWorker block worker handle\n    */\n   public WebInterfaceWorkerBlockInfoServlet(BlockWorker blockWorker) {\n    mBlockWorker = Preconditions.checkNotNull(blockWorker, \"blockWorker\");\n   }\n   /**", "sourceBeforeFix": "Preconditions.checkNotNull(blockWorker)", "sourceAfterFix": "Preconditions.checkNotNull(blockWorker,\"blockWorker\")"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDdbStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default DdbStreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDdbStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default DdbStreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3066e39a4024e88b26e3346a93bd5b9b56dcefed", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "setLowHighExpected(lowResults, highResults, expectedResults, BLANC_F1, 46.00, 47.25, 46.68);\nsetLowHighExpected(lowResults, highResults, expectedResults, CONLL_SCORE, 53.75, 54.00, 54.01);\n     BenchmarkingHelper.benchmarkResults(results, lowResults, highResults, expectedResults);\n   }", "fixed": "setLowHighExpected(lowResults, highResults, expectedResults, BLANC_F1, 46.00, 47.25, 46.68);\nsetLowHighExpected(lowResults, highResults, expectedResults, CONLL_SCORE, 53.75, 54.10, 54.01);\n     BenchmarkingHelper.benchmarkResults(results, lowResults, highResults, expectedResults);\n   }", "sourceBeforeFix": "setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)", "sourceAfterFix": "setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.10,54.01)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d0cb778dc8811906c7e7b5a20e08bd70f49dd163", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst);\n     mFileSystem.rename(src, dst, renameOptions);\n    Mockito.verify(mFileSystemMasterClient).rename(src, dst);\n   }\n   /**", "fixed": "     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     mFileSystem.rename(src, dst, renameOptions);\n    Mockito.verify(mFileSystemMasterClient).rename(src, dst, renameOptions);\n   }\n   /**", "sourceBeforeFix": "Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst)", "sourceAfterFix": "Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst,renameOptions)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "adf50d7ab0098e76ee68014b28e22fb8ba245752", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testGoogleFrontPageAsync() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedMessageCount(1);\n        mock.message(0).outBody(String.class).contains(\"google\");\n         template.sendBody(\"direct:start\", null);", "fixed": "     public void testGoogleFrontPageAsync() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedMessageCount(1);\n        mock.message(0).body(String.class).contains(\"google\");\n         template.sendBody(\"direct:start\", null);", "sourceBeforeFix": "mock.message(0).outBody(String.class)", "sourceAfterFix": "mock.message(0).body(String.class)"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "fixed": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asJavaIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "sourceBeforeFix": "JavaConversions.asIterable(logManager.allLogs())", "sourceAfterFix": "JavaConversions.asJavaIterable(logManager.allLogs())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WeatherEndpointBuilder\n             extends\n                 WeatherEndpointConsumerBuilder, WeatherEndpointProducerBuilder {\n         default AdvancedWeatherEndpointBuilder advanced() {", "fixed": "     \n    public interface WeatherEndpointBuilder\n             extends\n                 WeatherEndpointConsumerBuilder, WeatherEndpointProducerBuilder {\n         default AdvancedWeatherEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface QuickfixjEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedQuickfixjEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface QuickfixjEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedQuickfixjEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3b1d91e0105be86ffa011c5ca9ebbba49e3fcd5d", "projectName": "antlr.antlr4", "bugType": "Wrong Function Name", "problem": "         tokens.consume();\n         tokens.LT(1);\n        String result = tokens.toString();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }", "fixed": "         tokens.consume();\n         tokens.LT(1);\n        String result = tokens.getText();\n         String expecting = \"x = 3 * 0 + 2 * 0;\";\n         assertEquals(expecting, result);\n     }", "sourceBeforeFix": "tokens.toString()", "sourceAfterFix": "tokens.getText()"}
{"fixCommitSHA1": "dff64bf31f0406905c321e100e29d3600cf618e3", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": "      * Allow this route to be run as an application\n      *\n      * @param args\n      */\n    public static void main(String[] args) {\n         new Main().run(args);\n     }", "fixed": "      * Allow this route to be run as an application\n      *\n      * @param args\n     * @throws Exception \n      */\n    public static void main(String[] args) throws Exception {\n         new Main().run(args);\n     }", "sourceBeforeFix": "9", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a2eab9e8e70af1aee9585bda90a1bce3ee6276dd", "projectName": "wildfly.wildfly", "bugType": "More Specific If", "problem": "             final String server = SERVER.resolveModelAttribute(context, subModel).asString();\n             final ServiceController<?> controller = context.getServiceRegistry(false).getService(UndertowService.deploymentServiceName(server, host, path));\nif (controller.getState() != ServiceController.State.UP){\n                 return;\n             }", "fixed": "             final String server = SERVER.resolveModelAttribute(context, subModel).asString();\n             final ServiceController<?> controller = context.getServiceRegistry(false).getService(UndertowService.deploymentServiceName(server, host, path));\nif (controller != null && controller.getState() != ServiceController.State.UP){\n                 return;\n             }", "sourceBeforeFix": "controller.getState() != ServiceController.State.UP", "sourceAfterFix": "controller != null && controller.getState() != ServiceController.State.UP"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "fixed": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e981384cc21ca3c1958acd4b494a6ddd147c0a60", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "fixed": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "sourceBeforeFix": "config.setProxyList(modelconf.get(CommonAttributes.PROXY_URL).asString())", "sourceAfterFix": "config.setProxyURL(modelconf.get(CommonAttributes.PROXY_URL).asString())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface UndertowEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedUndertowEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface UndertowEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedUndertowEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "eb04c74353ebdde873abe92417a43bbac6911ce0", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \tpublic void draw (Batch spriteBatch) {\r\n \t\tTextureRegion[] regions = font.getRegions();\r\n \t\tfor (int j = 0, n = vertexData.length; j < n; j++) {\r\nif (idx[j] >= 0) {\n \t\t\t\tfloat[] vertices = vertexData[j];\r\n \t\t\t\tspriteBatch.draw(regions[j].getTexture(), vertices, 0, idx[j]);\r\n \t\t\t}\r", "fixed": " \tpublic void draw (Batch spriteBatch) {\r\n \t\tTextureRegion[] regions = font.getRegions();\r\n \t\tfor (int j = 0, n = vertexData.length; j < n; j++) {\r\nif (idx[j] > 0) {\n \t\t\t\tfloat[] vertices = vertexData[j];\r\n \t\t\t\tspriteBatch.draw(regions[j].getTexture(), vertices, 0, idx[j]);\r\n \t\t\t}\r", "sourceBeforeFix": "idx[j] >= 0", "sourceAfterFix": "idx[j] > 0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JBPMEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJBPMEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JBPMEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJBPMEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CometdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCometdEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CometdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCometdEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "e8d7cdcc372e14f8a0a664911b5ae6934201e30b", "projectName": "apache.hive", "bugType": "Same Function Less Args", "problem": "     }\n     if (writeIdString != null && !ObjectStore.isCurrentStatsValidForTheQuery(\n        conf, db, tbl, params, statsWriteId, writeIdString, false)) {\n       return allCols;\n     }\n     List<String> colsToUpdate = new ArrayList<>();", "fixed": "     }\n     if (writeIdString != null && !ObjectStore.isCurrentStatsValidForTheQuery(\n        conf, params, statsWriteId, writeIdString, false)) {\n       return allCols;\n     }\n     List<String> colsToUpdate = new ArrayList<>();", "sourceBeforeFix": "ObjectStore.isCurrentStatsValidForTheQuery(conf,db,tbl,params,statsWriteId,writeIdString,false)", "sourceAfterFix": "ObjectStore.isCurrentStatsValidForTheQuery(conf,params,statsWriteId,writeIdString,false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "8616612734924c0a8a9781aed94669c866b12981", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (EJBException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "fixed": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (IllegalStateException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "sourceBeforeFix": "EJBException nsee", "sourceAfterFix": "IllegalStateException nsee"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytesBinary(regionname), serverName);\n   }\n   /**", "fixed": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytes(regionname), serverName);\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "544edb296479cbd05f35381b20a651e9d022e197", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 1000; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "fixed": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(200);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 200; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "sourceBeforeFix": "i < 1000", "sourceAfterFix": "i < 200"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port.toString();\n \t\t}\n\t\tpublic String getPort() {\n \t\t\treturn this.port;\n \t\t}", "fixed": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port;\n \t\t}\n\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}", "sourceBeforeFix": "/**   * Telnet port.  */ private String port=\"5000\"; ", "sourceAfterFix": "/**   * Telnet port.  */ private Integer port=5000; "}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "fixed": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"}
{"fixCommitSHA1": "e9fbd7f493863da1e68776473d8b5d03861daa6f", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 32 * 1024 * 1024);\n\t\t\trunPartialSorter(sorter, NUM_RECORDS, 28);\n \t\t}\n \t\tcatch (Exception t) {\n \t\t\tt.printStackTrace();", "fixed": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 10 * 1024 * 1024);\n\t\t\trunPartialSorter(sorter, NUM_RECORDS, 25);\n \t\t}\n \t\tcatch (Exception t) {\n \t\t\tt.printStackTrace();", "sourceBeforeFix": "32 * 1024 * 1024", "sourceAfterFix": "10 * 1024 * 1024"}
{"fixCommitSHA1": "8a9e1bcbff1ff10cf122b23b3a1aa437f02a2086", "projectName": "gephi.gephi", "bugType": "Change Unary Operator\t", "problem": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "fixed": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "sourceBeforeFix": "sourceEdgeTextData.getText().isEmpty()", "sourceAfterFix": "!sourceEdgeTextData.getText().isEmpty()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "97dc0ab1bd49e5d7644b91bc07c56d759aa84cfa", "projectName": "openmrs.openmrs-core", "bugType": "Change Binary Operator", "problem": " \t */\r\n \t@Override\r\n \tpublic String getName() {\r\n\t\tif (getConcept() != null || getConcept().getName() != null) {\r\n \t\t\treturn getConcept().getName().toString();\r\n \t\t}\r\n \t\treturn null;\r", "fixed": " \t */\r\n \t@Override\r\n \tpublic String getName() {\r\n\t\tif (getConcept() != null && getConcept().getName() != null) {\r\n \t\t\treturn getConcept().getName().toString();\r\n \t\t}\r\n \t\treturn null;\r", "sourceBeforeFix": "getConcept() != null || getConcept().getDescription() != null", "sourceAfterFix": "getConcept() != null && getConcept().getDescription() != null"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "3ee84b5ac2da10343a88e7c360871d9547ebdcf5", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testConstructor() {\n        assertUtilityConstructor(BitSetUtils.class);\n     }\n     @Test", "fixed": "     @Test\n     public void testConstructor() {\n        assertUtilityConstructor(SetUtil.class);\n     }\n     @Test", "sourceBeforeFix": "BitSetUtils.class", "sourceAfterFix": "SetUtil.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "   @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class add_write_notification_log_args implements org.apache.thrift.TBase<add_write_notification_log_args, add_write_notification_log_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_write_notification_log_args>   {\n     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"add_write_notification_log_args\");\n    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField(\"rqst\", org.apache.thrift.protocol.TType.STRUCT, (short)-1);\n     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n     static {", "fixed": "   @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class add_write_notification_log_args implements org.apache.thrift.TBase<add_write_notification_log_args, add_write_notification_log_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_write_notification_log_args>   {\n     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"add_write_notification_log_args\");\n    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField(\"rqst\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n     static {", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GitHubEndpointBuilder\n             extends\n                 GitHubEndpointConsumerBuilder, GitHubEndpointProducerBuilder {\n         default AdvancedGitHubEndpointBuilder advanced() {", "fixed": "     \n    public interface GitHubEndpointBuilder\n             extends\n                 GitHubEndpointConsumerBuilder, GitHubEndpointProducerBuilder {\n         default AdvancedGitHubEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c882d23367e3d5dbec8574b8fef5d7be176e76aa", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Binary Operator", "problem": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) && nextNerStartIndex != end) {\n     } else if (startNer == null) {", "fixed": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) || nextNerStartIndex != end) {\n     } else if (startNer == null) {", "sourceBeforeFix": "prevNerEndIndex != (start - 1) && nextNerStartIndex != end", "sourceAfterFix": "prevNerEndIndex != (start - 1) || nextNerStartIndex != end"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f59fa8b2b797061c4231edd62f97eeed460d45c1", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "template.sendBody(\"jpa:\n        getMockEndpoint(\"mock:start\").expectedMinimumMessageCount(4);\n         getMockEndpoint(\"mock:result\").expectedMessageCount(2);", "fixed": "template.sendBody(\"jpa:\n        getMockEndpoint(\"mock:start\").expectedMinimumMessageCount(5);\n         getMockEndpoint(\"mock:result\").expectedMessageCount(2);", "sourceBeforeFix": "getMockEndpoint(\"mock:start\").expectedMinimumMessageCount(4)", "sourceAfterFix": "getMockEndpoint(\"mock:start\").expectedMinimumMessageCount(5)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "852c8b720dd810c699d6303d0470efa246c84d26", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"hello\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"hello\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "eb008892d5d730c4c3c14991ae19650d010f0547", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "         decomposer.exposeExpression(n);\n         compiler.reportCodeChange();\n       } else {\n        compiler.report(JSError.make(currentStatement, Es6ToEs3Converter.CANNOT_CONVERT,\n           \"Undecomposable expression\"));\n       }\n     }", "fixed": "         decomposer.exposeExpression(n);\n         compiler.reportCodeChange();\n       } else {\n        compiler.report(JSError.make(n, Es6ToEs3Converter.CANNOT_CONVERT,\n           \"Undecomposable expression\"));\n       }\n     }", "sourceBeforeFix": "JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT,\"Undecomposable expression\")", "sourceAfterFix": "JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT,\"Undecomposable expression\")"}
{"fixCommitSHA1": "d18446f8da47a778fa65b9c0ca77019740879a21", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Numeric Literal", "problem": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n        assertFalse(predicate.apply(pickleEvent));\n     }\n     @Test", "fixed": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void matches_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n        assertTrue(predicate.apply(pickleEvent));\n     }\n     @Test", "sourceBeforeFix": "asList(4L)", "sourceAfterFix": "asList(8L)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "75fccf13c0a0323179f37083f4249f8a4be38d85", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "                 thread.shutdown();\n             }\n             synchronized (ticket) {\n                ticket.notify();\n             }\n         }\n     }", "fixed": "                 thread.shutdown();\n             }\n             synchronized (ticket) {\n                ticket.notifyAll();\n             }\n         }\n     }", "sourceBeforeFix": "ticket.notify()", "sourceAfterFix": "ticket.notifyAll()"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, false, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "fixed": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, true, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"new-level\",ModelType.STRING)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"new-level\",ModelType.STRING,true)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n        testUser, tUri.getPath());\n   }\n   @Test", "fixed": "   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n        \"In Memory\", testUser, tUri.getPath());\n   }\n   @Test", "sourceBeforeFix": "TfsShell.convertMsToDate(files[3].getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(files[3].getCreationTimeMs())"}
{"fixCommitSHA1": "2b0752b688e6f27129f344050787e9546adc004a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n        ICompletableFuture f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);", "fixed": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n        ICompletableFuture f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AhcEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedAhcEndpointBuilder advanced() {\n             return (AdvancedAhcEndpointBuilder) this;\n         }", "fixed": "     \n    public interface AhcEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedAhcEndpointBuilder advanced() {\n             return (AdvancedAhcEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ActiveMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedActiveMQEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ActiveMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedActiveMQEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "cdf4227191227faa8f576b40ea825ff89f3fe4c1", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         assertEquals(5, deserialized.getOwnedEntryCount());\n         assertEquals(0, deserialized.getBackupEntryCount());\n         assertEquals(0, deserialized.getBackupCount());\n        assertEquals(0, deserialized.getOwnedEntryMemoryCost());\n         assertEquals(0, deserialized.getBackupEntryMemoryCost());\n         assertEquals(1231241512, deserialized.getLastAccessTime());\n         assertEquals(1341412343, deserialized.getLastUpdateTime());", "fixed": "         assertEquals(5, deserialized.getOwnedEntryCount());\n         assertEquals(0, deserialized.getBackupEntryCount());\n         assertEquals(0, deserialized.getBackupCount());\n        assertEquals(1234, deserialized.getOwnedEntryMemoryCost());\n         assertEquals(0, deserialized.getBackupEntryMemoryCost());\n         assertEquals(1231241512, deserialized.getLastAccessTime());\n         assertEquals(1341412343, deserialized.getLastUpdateTime());", "sourceBeforeFix": "assertEquals(0,localReplicatedMapStats.getOwnedEntryMemoryCost())", "sourceAfterFix": "assertEquals(1234,localReplicatedMapStats.getOwnedEntryMemoryCost())"}
{"fixCommitSHA1": "a85bc005400d000cdf9efd1cf791d3e2f0ead12e", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     classes = {\n         CamelAutoConfiguration.class,\n         CamelCloudAutoConfiguration.class,\n        CamelCloudServiceCallConfiguration.class\n     },\n     properties = {\n         \"ribbon.eureka.enabled=false\",", "fixed": "     classes = {\n         CamelAutoConfiguration.class,\n         CamelCloudAutoConfiguration.class,\n        CamelCloudServiceCallRoutesAutoConfiguration.class\n     },\n     properties = {\n         \"ribbon.eureka.enabled=false\",", "sourceBeforeFix": "CamelCloudServiceCallConfiguration.class", "sourceAfterFix": "CamelCloudServiceCallRoutesAutoConfiguration.class"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "98390cf27b0ce41447e0a104a8963b2cfdc20795", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \tpublic void add (boolean value1, boolean value2, boolean value3, boolean value4) {\r\n \t\tboolean[] items = this.items;\r\n\t\tif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));\r\n \t\titems[size] = value1;\r\n \t\titems[size + 1] = value2;\r\n \t\titems[size + 2] = value3;\r", "fixed": " \tpublic void add (boolean value1, boolean value2, boolean value3, boolean value4) {\r\n \t\tboolean[] items = this.items;\r\nif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f)));\n \t\titems[size] = value1;\r\n \t\titems[size + 1] = value2;\r\n \t\titems[size + 2] = value3;\r", "sourceBeforeFix": "size * 1.75f", "sourceAfterFix": "size * 1.8f"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b7ceb6548fc986277173ca79065914877f1cc007", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tif (!this.autoTimer.isEnabled()) {\n \t\t\treturn chain.filter(exchange);\n \t\t}\n\t\treturn chain.filter(exchange).compose((call) -> filter(exchange, call));\n \t}\n \tprivate Publisher<Void> filter(ServerWebExchange exchange, Mono<Void> call) {", "fixed": " \t\tif (!this.autoTimer.isEnabled()) {\n \t\t\treturn chain.filter(exchange);\n \t\t}\n\t\treturn chain.filter(exchange).transformDeferred((call) -> filter(exchange, call));\n \t}\n \tprivate Publisher<Void> filter(ServerWebExchange exchange, Mono<Void> call) {", "sourceBeforeFix": "chain.filter(exchange).compose((call) -> filter(exchange,call))", "sourceAfterFix": "chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface S3EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedS3EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface S3EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedS3EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "e78b610375a31d161665d2990bb6baa41933e0ee", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                if (nodeEngine.getPartitionService().getPartitionOwner(i).equals(nodeEngine.getClusterService().getThisAddress())) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }", "fixed": "             for (int i = 0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {\n                 RecordStore recordStore = getPartitionContainer(i).getRecordStore(mapContainer.getName());\n                if (nodeEngine.getClusterService().getThisAddress().equals(nodeEngine.getPartitionService().getPartitionOwner(i))) {\n                     if (!recordMap.containsKey(mapContainer)) {\n                         recordMap.put(mapContainer, new ArrayList<Record>());\n                     }", "sourceBeforeFix": "nodeEngine.getPartitionService()", "sourceAfterFix": "nodeEngine.getClusterService()"}
