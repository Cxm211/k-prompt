{"fixCommitSHA1": "652af1ee3ffbb286cf8b4ee1ecf2312566cf7ec5", "projectName": "Graylog2.graylog2-server", "bugType": "Less Specific If", "problem": "                 .expect(200, 404)\n                 .execute();\n            if (response == null) {\n                 return -1L;\n             } else {\n                 return response.value;", "fixed": "                 .expect(200, 404)\n                 .execute();\n            if (response == null || response.value == null) {\n                 return -1L;\n             } else {\n                 return response.value;", "sourceBeforeFix": "response == null", "sourceAfterFix": "response == null || response.value == null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "a4662237bc467310f0dc1c28aa621f84571225b1", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(0));\n     runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "fixed": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(1));\n     runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "sourceBeforeFix": "new Date(0)", "sourceAfterFix": "new Date(1)"}
{"fixCommitSHA1": "4652223dec1e4cd9f9a2978e4a0e6d4086c3b24a", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         assertEquals(CONTENT_LENGTH, c.content().readableBytes());\n         assertEquals(\n                 Unpooled.wrappedBuffer(content, content.length - CONTENT_LENGTH, CONTENT_LENGTH),\n                c.content().readBytes(CONTENT_LENGTH));\n         c.release();\n         assertFalse(channel.finish());", "fixed": "         assertEquals(CONTENT_LENGTH, c.content().readableBytes());\n         assertEquals(\n                 Unpooled.wrappedBuffer(content, content.length - CONTENT_LENGTH, CONTENT_LENGTH),\n                c.content().readSlice(CONTENT_LENGTH));\n         c.release();\n         assertFalse(channel.finish());", "sourceBeforeFix": "c.content().readBytes(CONTENT_LENGTH)", "sourceAfterFix": "c.content().readSlice(CONTENT_LENGTH)"}
{"fixCommitSHA1": "3a43345ad0a599659d462cfc14dba9d8c0553bbf", "projectName": "Graylog2.graylog2-server", "bugType": "Change Operand ", "problem": "         final ClosingRetentionStrategyConfig closingRetentionStrategyConfig = clusterConfigService.get(ClosingRetentionStrategyConfig.class);\n        final DeletionRetentionStrategy deletionRetentionStrategy = clusterConfigService.get(DeletionRetentionStrategy.class);\n         if (closingRetentionStrategyConfig == null) {\n             final ClosingRetentionStrategyConfig closingConfig = ClosingRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());", "fixed": "         final ClosingRetentionStrategyConfig closingRetentionStrategyConfig = clusterConfigService.get(ClosingRetentionStrategyConfig.class);\n        final DeletionRetentionStrategyConfig deletionRetentionStrategyConfig = clusterConfigService.get(DeletionRetentionStrategyConfig.class);\n         if (closingRetentionStrategyConfig == null) {\n             final ClosingRetentionStrategyConfig closingConfig = ClosingRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());", "sourceBeforeFix": "deletionRetentionStrategy == null", "sourceAfterFix": "deletionRetentionStrategyConfig == null"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "678913db7377dc67b3cbe92f6c9c9e401b777d97", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 else {\n                     callback.process(entry.getFileStatus(), entry.getBlockLocations());\n                 }\n                if (future.isCancelled()) {\n                     return;\n                 }\n             }", "fixed": "                 else {\n                     callback.process(entry.getFileStatus(), entry.getBlockLocations());\n                 }\n                if (future.isDone()) {\n                     return;\n                 }\n             }", "sourceBeforeFix": "future.isCancelled()", "sourceAfterFix": "future.isDone()"}
{"fixCommitSHA1": "6899744572ba4d61d410f4fd039109da97cbf977", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\txx *= lx;\r\n \t\t\txy *= lx;\r\n \t\t\txz *= lx;\r\n\t\t\tyz *= ly;\r\n \t\t\tyy *= ly;\r\n \t\t\tyz *= ly;\r\n \t\t\tzx *= lz;\r", "fixed": " \t\t\txx *= lx;\r\n \t\t\txy *= lx;\r\n \t\t\txz *= lx;\r\n\t\t\tyx *= ly;\r\n \t\t\tyy *= ly;\r\n \t\t\tyz *= ly;\r\n \t\t\tzx *= lz;\r", "sourceBeforeFix": "yz*=ly", "sourceAfterFix": "yx*=ly"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CwEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedCwEndpointBuilder advanced() {\n             return (AdvancedCwEndpointBuilder) this;\n         }", "fixed": "     \n    public interface CwEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedCwEndpointBuilder advanced() {\n             return (AdvancedCwEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMultimapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastMultimapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "fixed": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n    \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "sourceBeforeFix": "getJSDocTypeWithBraces(operation)", "sourceAfterFix": "getJSDocType(operation)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "fixed": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "175ce3aa1fdf3ce5d8c4a6965edbfc6254d1488b", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": " \t\t\tfilter.setItemName(item.getName());\n \t\t\tfilter.setOrdering(Ordering.DESCENDING);\n\t\t\tfilter.setPageSize(3);\n \t\t\tint startPage = 0;\n \t\t\tfilter.setPageNumber(startPage);", "fixed": " \t\t\tfilter.setItemName(item.getName());\n \t\t\tfilter.setOrdering(Ordering.DESCENDING);\n\t\t\tfilter.setPageSize(1000);\n \t\t\tint startPage = 0;\n \t\t\tfilter.setPageNumber(startPage);", "sourceBeforeFix": "filter.setPageSize(3)", "sourceAfterFix": "filter.setPageSize(1000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "27fb87cfcea241c2d7961baf68e84ce97f2dee7a", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       }\n       statsData.setDoubleStats(doubleStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"string\")) {\n       StringColumnStatsData stringStats = new StringColumnStatsData();\n       stringStats.setMaxColLenIsSet(false);\n       stringStats.setAvgColLenIsSet(false);", "fixed": "       }\n       statsData.setDoubleStats(doubleStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"string\") || columnType.toLowerCase().startsWith(\"char\")\n|| columnType.toLowerCase().startsWith(\"varchar\")) {\n       StringColumnStatsData stringStats = new StringColumnStatsData();\n       stringStats.setMaxColLenIsSet(false);\n       stringStats.setAvgColLenIsSet(false);", "sourceBeforeFix": "columnType.equalsIgnoreCase(\"double\")", "sourceAfterFix": "columnType.equalsIgnoreCase(\"double\") || columnType.equalsIgnoreCase(\"float\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "48041fee0e8a87ebebc32f085634a6cd231dd33d", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "   }\n   synchronized void start(boolean checkExpired) {\n    this.timerID = checkExpired ? client.getVertx().setTimer(1, id -> checkExpired()) : -1;\n   }\n   private synchronized void checkExpired() {\n     long timestamp = System.currentTimeMillis();\n     endpointMap.values().forEach(e -> e.pool.closeIdle(timestamp));\n    timerID = client.getVertx().setTimer(1, id -> checkExpired());\n   }\n   private static final class EndpointKey {", "fixed": "   }\n   synchronized void start(boolean checkExpired) {\n    this.timerID = checkExpired ? client.getVertx().setTimer(1000, id -> checkExpired()) : -1;\n   }\n   private synchronized void checkExpired() {\n     long timestamp = System.currentTimeMillis();\n     endpointMap.values().forEach(e -> e.pool.closeIdle(timestamp));\n    timerID = client.getVertx().setTimer(1000, id -> checkExpired());\n   }\n   private static final class EndpointKey {", "sourceBeforeFix": "client.getVertx().setTimer(1,id -> checkExpired())", "sourceAfterFix": "client.getVertx().setTimer(1000,id -> checkExpired())"}
{"fixCommitSHA1": "f40a8efd0788a6385a62ef5052f71f3e6b7db295", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tfinal float ty = target.y - y * dot;\r\n \t\tfinal float tz = target.z - z * dot;\r\n \t\tfinal float l2 = tx * tx + ty * ty + tz * tz;\r\n\t\tfinal float dl = (l2 == 0 || l2 == 1f) ? 1f : 1f / (float)Math.sqrt(l2);\r\n\t\treturn this.mul((float)Math.cos(theta)).add(tx * dl * st, ty * dl * st, tz * dl * st).nor();\r\n \t}\r\n \t\r", "fixed": " \t\tfinal float ty = target.y - y * dot;\r\n \t\tfinal float tz = target.z - z * dot;\r\n \t\tfinal float l2 = tx * tx + ty * ty + tz * tz;\r\n\t\tfinal float dl = st * ((l2 == 0 || l2 == 1f) ? 1f : 1f / (float)Math.sqrt(l2));\r\n\t\treturn this.mul((float)Math.cos(theta)).add(tx * dl, ty * dl, tz * dl).nor();\r\n \t}\r\n \t\r", "sourceBeforeFix": "y / vz", "sourceAfterFix": "z / vz"}
{"fixCommitSHA1": "72b86ae3aa6b084fc0cacf3ad86506ac9cf6486b", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.error(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}", "fixed": " \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.debug(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}", "sourceBeforeFix": "logger.error(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())", "sourceAfterFix": "logger.debug(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "dd80647fbf218880e5f8d72441d080b6c92778fa", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error during Vorbis decoding.\");\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t} else {\r\n \t\t\t\t\t\tbytes = 0;\r", "fixed": " \t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error during Vorbis decoding.\", e);\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t} else {\r\n \t\t\t\t\t\tbytes = 0;\r", "sourceBeforeFix": "new GdxRuntimeException(\"Error during Vorbis decoding.\")", "sourceAfterFix": "new GdxRuntimeException(\"Error during Vorbis decoding.\",e)"}
{"fixCommitSHA1": "2918286bf4a010c9ac8eadffb958ff10fb41ad62", "projectName": "junit-team.junit", "bugType": "Change Identifier Used", "problem": "         if (description == null) {\n             description = Description.createTestDescription(getTestClass().getJavaClass(),\n                     testName(method), method.getAnnotations());\n            fMethodDescriptions.put(method, description);\n         }\n         return description;", "fixed": "         if (description == null) {\n             description = Description.createTestDescription(getTestClass().getJavaClass(),\n                     testName(method), method.getAnnotations());\n            fMethodDescriptions.putIfAbsent(method, description);\n         }\n         return description;", "sourceBeforeFix": "fMethodDescriptions.put(method,description)", "sourceAfterFix": "fMethodDescriptions.putIfAbsent(method,description)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFacebookEndpointBuilder\n             extends\n                 AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {\n         default FacebookEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFacebookEndpointBuilder\n             extends\n                 AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {\n         default FacebookEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e9f14f107361d9cef5582c2d2a8e657691e76ec6", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "fixed": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "sourceBeforeFix": "mockRegionInfo.isMetaRegion()", "sourceAfterFix": "mockRegionInfo.isMetaTable()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesNodesEndpointBuilder\n             extends\n                 KubernetesNodesEndpointConsumerBuilder, KubernetesNodesEndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesNodesEndpointBuilder\n             extends\n                 KubernetesNodesEndpointConsumerBuilder, KubernetesNodesEndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "32d470c4e3edba4b399ae18bdcb9e09592e3cc14", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\tios.cFlags += \" -DFT2_BUILD_LIBRARY\";\r\n \t\tios.cppFlags += \" -DFT2_BUILD_LIBRARY\";\r\n\t\tnew NativeCodeGenerator().generate();\r\n \t\tnew AntScriptGenerator()\r\n \t\t\t.generate(new BuildConfig(\"gdx-freetype\"), win32home, win32, win64, lin32, lin64, mac, mac64, android, ios);\r", "fixed": " \t\tios.cFlags += \" -DFT2_BUILD_LIBRARY\";\r\n \t\tios.cppFlags += \" -DFT2_BUILD_LIBRARY\";\r\n\t\tnew NativeCodeGenerator().generate(\"src\", \"bin:../../gdx/bin\", \"jni\");\r\n \t\tnew AntScriptGenerator()\r\n \t\t\t.generate(new BuildConfig(\"gdx-freetype\"), win32home, win32, win64, lin32, lin64, mac, mac64, android, ios);\r", "sourceBeforeFix": "new NativeCodeGenerator().generate()", "sourceAfterFix": "new NativeCodeGenerator().generate(\"src\",\"bin:../../gdx/bin\",\"jni\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "fixed": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "sourceBeforeFix": "LOG.info(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort())", "sourceAfterFix": "LOG.debug(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "1dd50dfae2c7d4853f7d04351d8cbfc77cfc922f", "projectName": "dropwizard.dropwizard", "bugType": "Change Numeric Literal", "problem": "     @NotNull\n     @JsonProperty\n    private Size requestBufferSize = Size.kilobytes(32);\n     @NotNull\n     @JsonProperty\n    private Size requestHeaderBufferSize = Size.kilobytes(3);\n     @NotNull\n     @JsonProperty", "fixed": "     @NotNull\n     @JsonProperty\n    private Size requestBufferSize = Size.kilobytes(16);\n     @NotNull\n     @JsonProperty\n    private Size requestHeaderBufferSize = Size.kilobytes(6);\n     @NotNull\n     @JsonProperty", "sourceBeforeFix": "Size.kilobytes(3)", "sourceAfterFix": "Size.kilobytes(6)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "d50e8bff665f2272ffc93e15099db69d4292a130", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tAssert.assertEquals(800, Utils.calculateHeapSize(1000) );\n\t\tAssert.assertEquals(9500, Utils.calculateHeapSize(10000) );\n \t}\n }", "fixed": " \t\tAssert.assertEquals(800, Utils.calculateHeapSize(1000) );\n\t\tAssert.assertEquals(9300, Utils.calculateHeapSize(10000) );\n \t}\n }", "sourceBeforeFix": "Assert.assertEquals(9500,Utils.calculateHeapSize(10000))", "sourceAfterFix": "Assert.assertEquals(9300,Utils.calculateHeapSize(10000))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d9b4d060ac419c29b77793203b6b0fefe9d443d6", "projectName": "dropwizard.dropwizard", "bugType": "Change Modifier", "problem": "      * @param arguments the command-line arguments\n      * @throws Exception if something goes wrong\n      */\n    public final void run(String... arguments) throws Exception {\n         final Bootstrap<T> bootstrap = new Bootstrap<>(this);\n         bootstrap.addCommand(new ServerCommand<>(this));\n         bootstrap.addCommand(new CheckCommand<>(this));", "fixed": "      * @param arguments the command-line arguments\n      * @throws Exception if something goes wrong\n      */\n    public void run(String... arguments) throws Exception {\n         final Bootstrap<T> bootstrap = new Bootstrap<>(this);\n         bootstrap.addCommand(new ServerCommand<>(this));\n         bootstrap.addCommand(new CheckCommand<>(this));", "sourceBeforeFix": "17", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    void handle(Exception exception, Request request, Response response);\n }", "fixed": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    void handle(T exception, Request request, Response response);\n }", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "T exception"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "d338970323b86d631a5c1a786768133a0aabff46", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\treq.getParameter(\"items\"), req.getParameter(\"groups\"));\n \t\t\tImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.debug(\"Item not found error while generating chart.\");\n \t\t} catch (IllegalArgumentException e) {\n\t\t\tlogger.debug(\"Illegal argument in chart: {}\", e);\n \t\t}\n \t}", "fixed": " \t\t\t\t\treq.getParameter(\"items\"), req.getParameter(\"groups\"));\n \t\t\tImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.error(\"Item not found error while generating chart.\", e);\n \t\t} catch (IllegalArgumentException e) {\n\t\t\tlogger.error(\"Illegal argument in chart\", e);\n \t\t}\n \t}", "sourceBeforeFix": "logger.debug(\"Item not found error while generating chart.\")", "sourceAfterFix": "logger.error(\"Item not found error while generating chart.\",e)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "93facb514e158589060eacc69e50cc7ff76082b2", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n    private <K> Collection<Data> convertKeysToData(Set<K> keys) {\n         if (keys == null || keys.isEmpty()) {\n             return Collections.emptyList();\n         }", "fixed": "     }\n    private <K> List<Data> convertKeysToData(Set<K> keys) {\n         if (keys == null || keys.isEmpty()) {\n             return Collections.emptyList();\n         }", "sourceBeforeFix": "Collection<Data>", "sourceAfterFix": "List<Data>"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "204d9f571caab35a0adb72ffd87fd9c85a12300a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       if (!phNames.contains(phName)) {\n         throw new MalformedException(\n             \"Unrecognized message placeholder referenced: \" + phName,\n            objLitNode);\n       }\n     }", "fixed": "       if (!phNames.contains(phName)) {\n         throw new MalformedException(\n             \"Unrecognized message placeholder referenced: \" + phName,\n            node);\n       }\n     }", "sourceBeforeFix": "new MalformedException(\"Unused message placeholder: \" + phName,objLitNode)", "sourceAfterFix": "new MalformedException(\"Unused message placeholder: \" + phName,node)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SpringLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringLdapEndpointBuilder advanced() {", "fixed": "     \n    public interface SpringLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringLdapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cadd7cc57026a1f9991d2d90270a7aacbd0a7aa2", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }, executor);\n     }\n    private void sendDelete()\n     {\n         HttpResponseFuture<StatusResponse> resultFuture = httpClient.executeAsync(prepareDelete().setUri(location).build(), createStatusResponseHandler());\n         future = resultFuture;", "fixed": "         }, executor);\n     }\n    private synchronized void sendDelete()\n     {\n         HttpResponseFuture<StatusResponse> resultFuture = httpClient.executeAsync(prepareDelete().setUri(location).build(), createStatusResponseHandler());\n         future = resultFuture;", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "8b59afeaaa4458b6d21d88b2edc0d22ed04d9798", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         getMockEndpoint(\"mock:error\").expectedMessageCount(2);\n        resultEndpoint.expectedBodiesReceived(\"one\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "fixed": "         getMockEndpoint(\"mock:error\").expectedMessageCount(2);\n        resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "sourceBeforeFix": "resultEndpoint.expectedBodiesReceived(\"one\",\"two\",\"three\")", "sourceAfterFix": "resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\",\"two\",\"three\")"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RabbitMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRabbitMQEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RabbitMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRabbitMQEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c25f3ed04a7dcad130303a10f6d235e7ee7b36fd", "projectName": "libgdx.libgdx", "bugType": "Change Unary Operator\t", "problem": " \t\tif (handle.delete()) fail();\r\n \t\tif (handle.list().length != 0) fail();\r\n \t\tif (handle.child(\"meow\").exists()) fail();\r\n\t\tif (handle.parent().exists()) fail();\r\n \t\ttry {\r\n \t\t\thandle.read().close();\r\n \t\t\tfail();\r", "fixed": " \t\tif (handle.delete()) fail();\r\n \t\tif (handle.list().length != 0) fail();\r\n \t\tif (handle.child(\"meow\").exists()) fail();\r\n\t\tif (!handle.parent().exists()) fail();\r\n \t\ttry {\r\n \t\t\thandle.read().close();\r\n \t\t\tfail();\r", "sourceBeforeFix": "handle.parent().exists()", "sourceAfterFix": "!handle.parent().exists()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTwitterTimelineEndpointBuilder\n             extends\n                 AdvancedTwitterTimelineEndpointConsumerBuilder, AdvancedTwitterTimelineEndpointProducerBuilder {\n         default TwitterTimelineEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTwitterTimelineEndpointBuilder\n             extends\n                 AdvancedTwitterTimelineEndpointConsumerBuilder, AdvancedTwitterTimelineEndpointProducerBuilder {\n         default TwitterTimelineEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEC2EndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default EC2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEC2EndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default EC2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n     @GET\n     @Path(\"/jsonFormData\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n     @GET\n     @Path(\"/jsonFormData\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "66181be1c62816d916c9301dddd2c8c5bc7be1dc", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "   private static Function compile(String function) {\n     final ContextFactory contextFactory = ContextFactory.getGlobal();\n    Context context = contextFactory.enterContext();\n     context.setOptimizationLevel(9);\n     final ScriptableObject scope = context.initStandardObjects();", "fixed": "   private static Function compile(String function) {\n     final ContextFactory contextFactory = ContextFactory.getGlobal();\n    final Context context = contextFactory.enterContext();\n     context.setOptimizationLevel(9);\n     final ScriptableObject scope = context.initStandardObjects();", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbdeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "fixed": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N oppositeNode(Object edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n   @Override\n  public N removeInEdge(Object edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "fixed": "   }\n   @Override\n  public N adjacentNode(E edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n   @Override\n  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void doPost(HttpServletRequest req,\n                           HttpServletResponse resp) throws ServletException, IOException {\n        final Task task = tasks.get(req.getRequestURI());\n         if (task != null) {\n             try {\n                 resp.setContentType(MediaType.TEXT_PLAIN);", "fixed": "     @Override\n     protected void doPost(HttpServletRequest req,\n                           HttpServletResponse resp) throws ServletException, IOException {\n        final Task task = tasks.get(req.getServletPath());\n         if (task != null) {\n             try {\n                 resp.setContentType(MediaType.TEXT_PLAIN);", "sourceBeforeFix": "req.getRequestURI()", "sourceAfterFix": "req.getServletPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0eea03987839ba88fac6015355a2b067d6cfe436", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": " @RunWith(PowerMockRunner.class)\n @PrepareForTest(Permission.class)\npublic class MkdirsOptionsTest {\n   ", "fixed": " @RunWith(PowerMockRunner.class)\n @PrepareForTest(Permission.class)\npublic final class MkdirsOptionsTest {\n   ", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.parseShort(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Byte.valueOf(value.toString())", "sourceAfterFix": "Byte.parseByte(value.toString())"}
{"fixCommitSHA1": "42fa2f2fa4a95d30263d4f69a7d8f792c3591368", "projectName": "Atmosphere.atmosphere", "bugType": "Change Modifier", "problem": "     protected void loadMetaService() {\n         try {\n            final Map<String, MetaServiceAction> config = (Map<String, MetaServiceAction>) servletConfig.getServletContext().getAttribute(AtmosphereFramework.MetaServiceAction.class.getName());\n             if (config == null) {\n                IOUtils.readServiceFile(AtmosphereFramework.class.getName());\n             }\n             for (final Map.Entry<String, MetaServiceAction> action : config.entrySet()) {", "fixed": "     protected void loadMetaService() {\n         try {\n            Map<String, MetaServiceAction> config = (Map<String, MetaServiceAction>) servletConfig.getServletContext().getAttribute(AtmosphereFramework.MetaServiceAction.class.getName());\n             if (config == null) {\n                config = IOUtils.readServiceFile(AtmosphereFramework.class.getName());\n             }\n             for (final Map.Entry<String, MetaServiceAction> action : config.entrySet()) {", "sourceBeforeFix": "16", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWeatherEndpointBuilder\n             extends\n                 AdvancedWeatherEndpointConsumerBuilder, AdvancedWeatherEndpointProducerBuilder {\n         default WeatherEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWeatherEndpointBuilder\n             extends\n                 AdvancedWeatherEndpointConsumerBuilder, AdvancedWeatherEndpointProducerBuilder {\n         default WeatherEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f60f4dbdad22bbd4ef94ce1b01eb63f9adeb7659", "projectName": "alibaba.druid", "bugType": "Delete Throws Exception", "problem": "     }\r\n    public Number integerValue() throws NumberFormatException {\r\n         long result = 0;\r\n         boolean negative = false;\r\n         int i = np, max = np + sp;\r", "fixed": "     }\r\n    public Number integerValue() {\r\n         long result = 0;\r\n         boolean negative = false;\r\n         int i = np, max = np + sp;\r", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "9b53590a89d388ca0af8b6535d5a873567b49ab4", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "             throw new NullPointerException(\"uncollectedPointCreator must not be null\");\n         }\n         this.timeWindow = timeWindow;\n        this.uncollectedPointCreater = uncollectedPointCreator;\n     }\n     public Chart<P> build(List<P> sampledPoints) {", "fixed": "             throw new NullPointerException(\"uncollectedPointCreator must not be null\");\n         }\n         this.timeWindow = timeWindow;\n        this.uncollectedPointCreator = uncollectedPointCreator;\n     }\n     public Chart<P> build(List<P> sampledPoints) {", "sourceBeforeFix": "uncollectedPointCreater.createUnCollectedPoint(timestamp)", "sourceAfterFix": "uncollectedPointCreator.createUnCollectedPoint(timestamp)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PropertiesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPropertiesEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PropertiesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPropertiesEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "         \"function f() {goog.asserts.assertInstanceof(this, Error);}\");\n   }\n  private String config(String rule, String message, String... fields) {\n     String result = \"requirement: {\\n\"\n         + \"  type: CUSTOM\\n\"\n         + \"  java_class: '\" + rule + \"'\\n\";", "fixed": "         \"function f() {goog.asserts.assertInstanceof(this, Error);}\");\n   }\n  private static String config(String rule, String message, String... fields) {\n     String result = \"requirement: {\\n\"\n         + \"  type: CUSTOM\\n\"\n         + \"  java_class: '\" + rule + \"'\\n\";", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         \n        public FrameShower(Component parent, final String msg) {\n             this.parent = parent;\n             this.msg = msg;\n         }", "fixed": "         \n        FrameShower(Component parent, final String msg) {\n             this.parent = parent;\n             this.msg = msg;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create(\"value\", ModelType.STRING).build();\n    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();", "fixed": "     SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create(\"value\", ModelType.STRING).build();\n    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING, true).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"min-level\",ModelType.STRING)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"min-level\",ModelType.STRING,true)"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RestEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "710fae2d6c9db4eec40aafbe618814ebe9e9aec5", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param timer a timer to add to the scheduler\n    */\n   public static void addTimer(ScheduledTimer timer) {\n    Preconditions.checkNotNull(timer);\n     try (LockResource r = new LockResource(sLock)) {\n       Preconditions.checkState(!sTimers.containsKey(timer.getThreadName()),\n           \"The timer for thread %s is already waiting to be scheduled\", timer.getThreadName());", "fixed": "    * @param timer a timer to add to the scheduler\n    */\n   public static void addTimer(ScheduledTimer timer) {\n    Preconditions.checkNotNull(timer, \"timer\");\n     try (LockResource r = new LockResource(sLock)) {\n       Preconditions.checkState(!sTimers.containsKey(timer.getThreadName()),\n           \"The timer for thread %s is already waiting to be scheduled\", timer.getThreadName());", "sourceBeforeFix": "Preconditions.checkNotNull(timer)", "sourceAfterFix": "Preconditions.checkNotNull(timer,\"timer\")"}
{"fixCommitSHA1": "46125686874f5b69bcdb6f4c9bef3f900a7057c6", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "                         processSelectedKeys(selector.selectedKeys());\n                     }\n                     long currentTimeNanos = System.nanoTime();\n                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) {\n                         lastConnectTimeoutCheckTimeNanos = currentTimeNanos;\n                         processConnectTimeout(selector.keys(), currentTimeNanos);\n                     }", "fixed": "                         processSelectedKeys(selector.selectedKeys());\n                     }\n                     long currentTimeNanos = System.nanoTime();\n                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 10 * 1000000L) {\n                         lastConnectTimeoutCheckTimeNanos = currentTimeNanos;\n                         processConnectTimeout(selector.keys(), currentTimeNanos);\n                     }", "sourceBeforeFix": "selector.select(500)", "sourceAfterFix": "selector.select(10)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "d4a16659412af852dd849b0e87b46779d9541fa0", "projectName": "netty.netty", "bugType": "Change Binary Operator", "problem": "             runDelegatedTasks(serverResult, serverEngine);\n             cTOs.compact();\n             sTOc.compact();\n        } while (isHandshaking(clientResult) && isHandshaking(serverResult));\n     }\n     private static boolean isHandshaking(SSLEngineResult result) {", "fixed": "             runDelegatedTasks(serverResult, serverEngine);\n             cTOs.compact();\n             sTOc.compact();\n        } while (isHandshaking(clientResult) || isHandshaking(serverResult));\n     }\n     private static boolean isHandshaking(SSLEngineResult result) {", "sourceBeforeFix": "isHandshaking(clientResult) && isHandshaking(serverResult)", "sourceAfterFix": "isHandshaking(clientResult) || isHandshaking(serverResult)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.info(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "fixed": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "sourceBeforeFix": "logger.info(\"Creating extern file for exports\")", "sourceAfterFix": "logger.fine(\"Creating extern file for exports\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface OptaPlannerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface OptaPlannerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3039d610149aa9a633141bf41abcbd1923dcdff8", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "    * @throws IOException if the specified SplitAlgorithm class couldn't be\n    * instantiated\n    */\n  static SplitAlgorithm newSplitAlgoInstance(Configuration conf,\n           String splitClassName) throws IOException {\n     Class<?> splitClass;", "fixed": "    * @throws IOException if the specified SplitAlgorithm class couldn't be\n    * instantiated\n    */\n  public static SplitAlgorithm newSplitAlgoInstance(Configuration conf,\n           String splitClassName) throws IOException {\n     Class<?> splitClass;", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 cancelledKeys = 0;\n                runAllTasks();\n                 selector = this.selector;\n                processSelectedKeys();\n                 selector = this.selector;\n                 if (isShutdown()) {", "fixed": "                 cancelledKeys = 0;\n                processSelectedKeys();\n                 selector = this.selector;\n                runAllTasks();\n                 selector = this.selector;\n                 if (isShutdown()) {", "sourceBeforeFix": "processSelectedKeys()", "sourceAfterFix": "runAllTasks()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "68e2bde0e098378e60387fa1de6fbecd26fcb9b6", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "                 mapInitialLoadInfo.put(name, recordStore.isLoaded());\n             }\n            Set<RecordReplicationInfo> recordSet = new HashSet<RecordReplicationInfo>();\n             for (Entry<Data, Record> recordEntry : recordStore.getReadonlyRecordMap().entrySet()) {\n                 Data key = recordEntry.getKey();\n                 Record record = recordEntry.getValue();", "fixed": "                 mapInitialLoadInfo.put(name, recordStore.isLoaded());\n             }\n            Set<RecordReplicationInfo> recordSet = new HashSet<RecordReplicationInfo>(recordStore.size());\n             for (Entry<Data, Record> recordEntry : recordStore.getReadonlyRecordMap().entrySet()) {\n                 Data key = recordEntry.getKey();\n                 Record record = recordEntry.getValue();", "sourceBeforeFix": "new HashSet<RecordReplicationInfo>()", "sourceAfterFix": "new HashSet<RecordReplicationInfo>(recordStore.size())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "fixed": "     \n    public interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "06d716c08a00fc5e3fb3ecf12e1dbb703756e9c9", "projectName": "apache.storm", "bugType": "Less Specific If", "problem": "             int port = Utils.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT));\n             List<String> servers = (List<String>) conf.get(Config.DRPC_SERVERS);\n            if(servers.isEmpty()) {\n                 throw new RuntimeException(\"No DRPC servers configured for topology\");   \n             }\n             if(numTasks < servers.size()) {", "fixed": "             int port = Utils.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT));\n             List<String> servers = (List<String>) conf.get(Config.DRPC_SERVERS);\n            if(servers == null || servers.isEmpty()) {\n                 throw new RuntimeException(\"No DRPC servers configured for topology\");   \n             }\n             if(numTasks < servers.size()) {", "sourceBeforeFix": "servers.isEmpty()", "sourceAfterFix": "servers == null || servers.isEmpty()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFacebookEndpointBuilder\n             extends\n                 AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {\n         default FacebookEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFacebookEndpointBuilder\n             extends\n                 AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {\n         default FacebookEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Identifier Used", "problem": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void matches_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n        assertTrue(predicate.apply(pickleEvent));\n     }\n     @Test", "fixed": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n        assertFalse(predicate.apply(pickleEvent));\n     }\n     @Test", "sourceBeforeFix": "assertTrue(predicate.apply(pickleEvent))", "sourceAfterFix": "assertFalse(predicate.apply(pickleEvent))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "097a6b00c39c7dee3b2d6d321a7fe5b3eb626fb0", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "fixed": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGooglePubsubEndpointBuilder\n             extends\n                 AdvancedGooglePubsubEndpointConsumerBuilder, AdvancedGooglePubsubEndpointProducerBuilder {\n         default GooglePubsubEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGooglePubsubEndpointBuilder\n             extends\n                 AdvancedGooglePubsubEndpointConsumerBuilder, AdvancedGooglePubsubEndpointProducerBuilder {\n         default GooglePubsubEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c4fde52160773dca18bad002589957880b0aeeb3", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "              .addData(\"taskId\", task.getId())\n              .addData(\"dataSource\", task.getDataSource())\n              .emit();\n          log.warn(e, \"Graceful shutdown of task[%s] aborted with exception.\");\n           error = true;\n         }\n       } else {", "fixed": "              .addData(\"taskId\", task.getId())\n              .addData(\"dataSource\", task.getDataSource())\n              .emit();\n          log.warn(e, \"Graceful shutdown of task[%s] aborted with exception.\", task.getId());\n           error = true;\n         }\n       } else {", "sourceBeforeFix": "log.warn(e,\"Graceful shutdown of task[%s] aborted with exception.\")", "sourceAfterFix": "log.warn(e,\"Graceful shutdown of task[%s] aborted with exception.\",task.getId())"}
{"fixCommitSHA1": "0867fa3723a28ad280f7512a7b68141b58215209", "projectName": "libgdx.libgdx", "bugType": "Change Caller in Function Call", "problem": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tfloatBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "fixed": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tintBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "sourceBeforeFix": "floatBuffer.clear()", "sourceAfterFix": "intBuffer.clear()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4497d9362a4347a82acc9d611df544eb64e2ca18", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "             fireChannelClosed(pairedChannel);\n         } finally {\n             future.setSuccess();\n            if (localAddress != null) {\n                 LocalChannelRegistry.unregister(localAddress);\n             }\n         }", "fixed": "             fireChannelClosed(pairedChannel);\n         } finally {\n             future.setSuccess();\n            if (localAddress != null && getParent() == null) {\n                 LocalChannelRegistry.unregister(localAddress);\n             }\n         }", "sourceBeforeFix": "localAddress != null", "sourceAfterFix": "localAddress != null && getParent() == null"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtmosphereWebsocketEndpointBuilder\n             extends\n                 AtmosphereWebsocketEndpointConsumerBuilder, AtmosphereWebsocketEndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointBuilder advanced() {", "fixed": "     \n    public interface AtmosphereWebsocketEndpointBuilder\n             extends\n                 AtmosphereWebsocketEndpointConsumerBuilder, AtmosphereWebsocketEndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set the format for the influence of this check.\n      * @param format a <code>String</code> value\n      */\n    public void setInfluenceFormat(String format) {\n         influenceFormat = format;\n     }", "fixed": "      * Set the format for the influence of this check.\n      * @param format a <code>String</code> value\n      */\n    public final void setInfluenceFormat(String format) {\n         influenceFormat = format;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourceName, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "fixed": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourcePath, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "sourceBeforeFix": "new CompilerException(sourceName,e.line,e.getCause())", "sourceAfterFix": "new CompilerException(sourcePath,e.line,e.getCause())"}
{"fixCommitSHA1": "ac2d51d28fd28794371073b7009abd88f31cbedf", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                 + \"    </test:setState>\"\n                 + \"  </soapenv:Body>\"\n                 + \"</soapenv:Envelope>\";\nString result = HttpRequest.put(\"http:\n         System.out.println(result);\n     }", "fixed": "                 + \"    </test:setState>\"\n                 + \"  </soapenv:Body>\"\n                 + \"</soapenv:Envelope>\";\nString result = HttpRequest.post(\"http:\n         System.out.println(result);\n     }", "sourceBeforeFix": "HttpRequest.put(\"http://localhost:8080/ejbws-example/SingletonEndpoint\",message,10,SECONDS)", "sourceAfterFix": "HttpRequest.post(\"http://localhost:8080/ejbws-example/SingletonEndpoint\",message,10,SECONDS)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "fixed": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}", "fixed": " \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}", "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEKSEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default EKSEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEKSEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default EKSEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RefEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRefEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RefEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRefEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIrcEndpointBuilder\n             extends\n                 AdvancedIrcEndpointConsumerBuilder, AdvancedIrcEndpointProducerBuilder {\n         default IrcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIrcEndpointBuilder\n             extends\n                 AdvancedIrcEndpointConsumerBuilder, AdvancedIrcEndpointProducerBuilder {\n         default IrcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "b27f246f740829ca4a64beeb0b9405b06c49cff0", "projectName": "Alluxio.alluxio", "bugType": "Less Specific If", "problem": "               String ufsUri = resolution.getUri().toString();\n               UnderFileSystem ufs = resolution.getUfs();\n               AlluxioURI parentUri = alluxioUriToDel.getParent();\n              if (!ufsSyncChecker.isDirectoryInSync(parentUri)) {\n                 if (delInode.isFile()) {\n                   if (!ufs.deleteFile(ufsUri)) {", "fixed": "               String ufsUri = resolution.getUri().toString();\n               UnderFileSystem ufs = resolution.getUfs();\n               AlluxioURI parentUri = alluxioUriToDel.getParent();\n              if (alluxioUriToDel.equals(inodePath.getUri())\n                  || !ufsSyncChecker.isDirectoryInSync(parentUri)) {\n                 if (delInode.isFile()) {\n                   if (!ufs.deleteFile(ufsUri)) {", "sourceBeforeFix": "!ufsSyncChecker.isDirectoryInSync(parentUri)", "sourceAfterFix": "alluxioUriToDel.equals(inodePath.getUri()) || !ufsSyncChecker.isDirectoryInSync(parentUri)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "be1426a22096f6e95d36f389a5ea9b8a38482ebe", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "                 }\n             } catch (SocketException e) {\n                logger.error(\"Failed to enumerate network interfaces\", e);\n             }\n         }", "fixed": "                 }\n             } catch (SocketException e) {\n                logger.warn(\"Failed to enumerate network interfaces\", e);\n             }\n         }", "sourceBeforeFix": "logger.error(\"Failed to enumerate network interfaces\",e)", "sourceAfterFix": "logger.warn(\"Failed to enumerate network interfaces\",e)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "fc33d6ae99e12f7e90036ec057644e7fd18ff413", "projectName": "netty.netty", "bugType": "Same Function Less Args", "problem": "         String response = \"HTTP/1.1 200 OK\\r\\n\" +\n                 \"Content-Length: 0\\r\\n\\r\\n\";\n        HttpClientCodec codec = new HttpClientCodec(4096, 8192, 8192, true);\n         EmbeddedChannel ch = new EmbeddedChannel(codec, new HttpObjectAggregator(1024));\nHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"http:", "fixed": "         String response = \"HTTP/1.1 200 OK\\r\\n\" +\n                 \"Content-Length: 0\\r\\n\\r\\n\";\n        HttpClientCodec codec = new HttpClientCodec(4096, 8192, true);\n         EmbeddedChannel ch = new EmbeddedChannel(codec, new HttpObjectAggregator(1024));\nHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"http:", "sourceBeforeFix": "new HttpClientCodec(4096,8192,8192,true)", "sourceAfterFix": "new HttpClientCodec(4096,8192,true)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "eb4fd212d3307ddbab60a5acccef6473dfa0490f", "projectName": "springside.springside4", "bugType": "Same Function Less Args", "problem": " \t\tcheckToken(token);\r\n \t\tAccount currentUser = accountService.getLoginUser(token);\r\n \t\tList<Book> books = adminService.listMyBook(currentUser.id, pageable);\r\n\t\treturn BeanMapper.mapList(books, Book.class, BookDto.class);\r\n \t}\r\n \t@RequestMapping(value = \"/api/myborrowedbook\", produces = MediaTypes.JSON_UTF_8)\r", "fixed": " \t\tcheckToken(token);\r\n \t\tAccount currentUser = accountService.getLoginUser(token);\r\n \t\tList<Book> books = adminService.listMyBook(currentUser.id, pageable);\r\n\t\treturn BeanMapper.mapList(books, BookDto.class);\r\n \t}\r\n \t@RequestMapping(value = \"/api/myborrowedbook\", produces = MediaTypes.JSON_UTF_8)\r", "sourceBeforeFix": "BeanMapper.mapList(books,Book.class,BookDto.class)", "sourceAfterFix": "BeanMapper.mapList(books,BookDto.class)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "fixed": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n        } else if (c.getDomain() == null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());", "fixed": "         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());", "sourceBeforeFix": "c.getDomain() == null", "sourceAfterFix": "c.getDomain() == null && getDomain() != null"}
{"fixCommitSHA1": "b7a82854871f76fbc0bda0c5fec2be699fc46b68", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     private static final int MAX_SECONDS = 60 * 10;\n     private static final int NUMBER_OF_CLIENTS = 8;\n    private static final int THREADS_PER_CLIENT = 8;\n     private static final String MAP_NAME = randomString();", "fixed": "     private static final int MAX_SECONDS = 60 * 10;\n     private static final int NUMBER_OF_CLIENTS = 8;\n    private static final int THREADS_PER_CLIENT = 4;\n     private static final String MAP_NAME = randomString();", "sourceBeforeFix": "THREADS_PER_CLIENT=8", "sourceAfterFix": "THREADS_PER_CLIENT=4"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b2a8186bd3793d72b868a112512d6a9a087d18c3", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 Data key = next.getKey();\n                 CacheRecord record = next.getValue();\n                 iter.remove();\n                cache.setRecord(key, record);\n             }\n         }\n         data.clear();", "fixed": "                 Data key = next.getKey();\n                 CacheRecord record = next.getValue();\n                 iter.remove();\n                cache.putRecord(key, record);\n             }\n         }\n         data.clear();", "sourceBeforeFix": "cache.setRecord(key,record)", "sourceAfterFix": "cache.putRecord(key,record)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "c9a67786483edaf7480cc73cdec2e492a7f16f46", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     String[] partKeyTypes = pcolTypes.trim().split(\":\");\n     if (partSpec.size() != partKeyTypes.length) {\n        throw new HiveException(\"Internal error : Partition Spec size, \" + partProps.size() +\n                 \" doesn't match partition key definition size, \" + partKeyTypes.length);\n     }\n     boolean hasVC = vcs != null && !vcs.isEmpty();", "fixed": "     String[] partKeyTypes = pcolTypes.trim().split(\":\");\n     if (partSpec.size() != partKeyTypes.length) {\n        throw new HiveException(\"Internal error : Partition Spec size, \" + partSpec.size() +\n                 \" doesn't match partition key definition size, \" + partKeyTypes.length);\n     }\n     boolean hasVC = vcs != null && !vcs.isEmpty();", "sourceBeforeFix": "partProps.size()", "sourceAfterFix": "partSpec.size()"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         if (ast.getType() != TokenTypes.ANNOTATION) {", "fixed": "     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         if (ast.getType() != TokenTypes.ANNOTATION) {", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbdeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "fixed": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "           throws IOException, AlluxioException, InterruptedException {\n     final long deadline = System.currentTimeMillis() + tunit.toMillis(timeout);\n    final long pollPeriod = Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS);\n     boolean completed = false;\n     long timeleft = deadline - System.currentTimeMillis();", "fixed": "           throws IOException, AlluxioException, InterruptedException {\n     final long deadline = System.currentTimeMillis() + tunit.toMillis(timeout);\n    final long pollPeriod = Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS);\n     boolean completed = false;\n     long timeleft = deadline - System.currentTimeMillis();", "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   static class DelegatingSSLSocketFactory extends SSLSocketFactory {\n     protected final SSLSocketFactory delegate;\n    public DelegatingSSLSocketFactory(SSLSocketFactory delegate) {\n       this.delegate = delegate;\n     }", "fixed": "   static class DelegatingSSLSocketFactory extends SSLSocketFactory {\n     protected final SSLSocketFactory delegate;\n    DelegatingSSLSocketFactory(SSLSocketFactory delegate) {\n       this.delegate = delegate;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "fixed": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic abstract void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.valueOf(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "fixed": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "sourceBeforeFix": "Integer.valueOf(sessionTTL)", "sourceAfterFix": "Integer.parseInt(sessionTTL)"}
{"fixCommitSHA1": "9ade53da21a13bf55b876bdccc42d3d674b37642", "projectName": "apache.camel", "bugType": "Change Unary Operator\t", "problem": "             setHost(value);\n         }\n        if (getProtocol() != null && isIgnoreUriScheme()) {\n             String scheme = uri.getScheme();\n             if (scheme != null) {\n                 setProtocol(scheme);", "fixed": "             setHost(value);\n         }\n        if (getProtocol() != null && !isIgnoreUriScheme()) {\n             String scheme = uri.getScheme();\n             if (scheme != null) {\n                 setProtocol(scheme);", "sourceBeforeFix": "isIgnoreUriScheme()", "sourceAfterFix": "!isIgnoreUriScheme()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleCalendarStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleCalendarStreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleCalendarStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleCalendarStreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "89b4aa976ee9aa4ccf8c404bdcd7b9e32dfb4c3e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                         AuthorizationResult ar = context.authorize(rrOp, EnumSet.of(Action.ActionEffect.ADDRESS));\n                         if (ar.getDecision() == AuthorizationResult.Decision.DENY) {\n                            filteredData.addAccessRestrictedResource(absoluteChildAddr);\n                         } else {\n                             ModelNode childMap = directChildren.get(childType);\n                             if (childMap == null) {", "fixed": "                         AuthorizationResult ar = context.authorize(rrOp, EnumSet.of(Action.ActionEffect.ADDRESS));\n                         if (ar.getDecision() == AuthorizationResult.Decision.DENY) {\n                            localFilteredData.addAccessRestrictedResource(absoluteChildAddr);\n                         } else {\n                             ModelNode childMap = directChildren.get(childType);\n                             if (childMap == null) {", "sourceBeforeFix": "filteredData.addAccessRestrictedResource(absoluteChildAddr)", "sourceAfterFix": "localFilteredData.addAccessRestrictedResource(absoluteChildAddr)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "95e4c74b9add0a315b7611494f2557df966bb681", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "      *\n      * @param folder the location\n      */\n    public static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!externalStaticResourcesSet) {", "fixed": "      *\n      * @param folder the location\n      */\n    public synchronized static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!externalStaticResourcesSet) {", "sourceBeforeFix": "9", "sourceAfterFix": "41"}
{"fixCommitSHA1": "c38ee7371ffee08671b886ff9eb74a4cb35b92e7", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         MaterializedResult expectedTables = MaterializedResult.resultBuilder(queryRunner.getDefaultSession(), VARCHAR)\n                 .row(\"orders\")\n                 .build();\n        assertEquals(actualTables, expectedTables);\n     }\n     @Test", "fixed": "         MaterializedResult expectedTables = MaterializedResult.resultBuilder(queryRunner.getDefaultSession(), VARCHAR)\n                 .row(\"orders\")\n                 .build();\n        assertContains(actualTables, expectedTables);\n     }\n     @Test", "sourceBeforeFix": "assertEquals(actualTables,expectedTables)", "sourceAfterFix": "assertContains(actualTables,expectedTables)"}
{"fixCommitSHA1": "31a360700bc11b55dc64e89c7b6f8b660b50bddb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     }\n     protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {\n        final List<ResultMessageSummary> result = Lists.newArrayListWithExpectedSize(resultMessages.size());\n         for (ResultMessage resultMessage : resultMessages) {\n             result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));", "fixed": "     }\n     protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {\n        final List<ResultMessageSummary> result = Lists.newArrayListWithCapacity(resultMessages.size());\n         for (ResultMessage resultMessage : resultMessages) {\n             result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));", "sourceBeforeFix": "Lists.newArrayListWithExpectedSize(resultMessages.size())", "sourceAfterFix": "Lists.newArrayListWithCapacity(resultMessages.size())"}
{"fixCommitSHA1": "5cf710f1b72db6a8413d42668b0e878243217165", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                         l.onSuspend(request, response);\n                         break;\n                     case RESUME:\n                        l.onSuspend(request, response);\n                         break;\n                     case DESTROYED:\n                         l.onDestroyed(request, response);", "fixed": "                         l.onSuspend(request, response);\n                         break;\n                     case RESUME:\n                        l.onResume(request, response);\n                         break;\n                     case DESTROYED:\n                         l.onDestroyed(request, response);", "sourceBeforeFix": "l.onSuspend(request,response)", "sourceAfterFix": "l.onResume(request,response)"}
{"fixCommitSHA1": "a13c4373a5e57d322b143516b493e84f14909fec", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(12, tokens.size());\n   }\n   @Test", "fixed": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(9, tokens.size());\n   }\n   @Test", "sourceBeforeFix": "assertEquals(12,tokens.size())", "sourceAfterFix": "assertEquals(9,tokens.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4af3d1f01144d5a959934641e66abfcb94644b0a", "projectName": "hazelcast.hazelcast", "bugType": "Delete Throws Exception", "problem": "     HazelcastInstance server1;\n     @Before\n    public void setUp() throws Exception {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "fixed": "     HazelcastInstance server1;\n     @Before\n    public void setUp() {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "322fa14393f4ab34e22f0e3ad569afe12415ad1d", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId > max) {\r\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "fixed": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId >= max) {\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "sourceBeforeFix": "DEFAULT_MAX=1024", "sourceAfterFix": "DEFAULT_MAX=4096"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "1bac47f6afece6418b841fced7807ef5ff7a2615", "projectName": "mybatis.mybatis-3", "bugType": "Wrong Function Name", "problem": "   }\r\n   private boolean commandReadyToExecute(String trimmedLine) {\r\n    return !fullLineDelimiter && trimmedLine.endsWith(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);\r\n   }\r\n   private void executeStatement(String command) throws SQLException, UnsupportedEncodingException {\r", "fixed": "   }\r\n   private boolean commandReadyToExecute(String trimmedLine) {\r\n    return !fullLineDelimiter && trimmedLine.contains(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);\r\n   }\r\n   private void executeStatement(String command) throws SQLException, UnsupportedEncodingException {\r", "sourceBeforeFix": "trimmedLine.endsWith(delimiter)", "sourceAfterFix": "trimmedLine.contains(delimiter)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Caller in Function Call", "problem": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(littleEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "fixed": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "98dfe7e6b2c2d098a216c1bd60cf9deaa83098ef", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.subscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "fixed": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.psubscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "sourceBeforeFix": "connection.subscribe(jedisPubSub,patterns)", "sourceAfterFix": "connection.psubscribe(jedisPubSub,patterns)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NetWeaverEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedNetWeaverEndpointBuilder advanced() {\n             return (AdvancedNetWeaverEndpointBuilder) this;\n         }", "fixed": "     \n    public interface NetWeaverEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedNetWeaverEndpointBuilder advanced() {\n             return (AdvancedNetWeaverEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "4b0219ee9bdb5c1a1e5c1809ce40b8d0031a773b", "projectName": "netty.netty", "bugType": "Less Specific If", "problem": "     }\n     private void handleRenegotiation(HandshakeStatus handshakeStatus) {\n        if (handshakeStatus == HandshakeStatus.NOT_HANDSHAKING) {\n             return;\n         }", "fixed": "     }\n     private void handleRenegotiation(HandshakeStatus handshakeStatus) {\n        if (handshakeStatus == HandshakeStatus.NOT_HANDSHAKING ||\n            handshakeStatus == HandshakeStatus.FINISHED) {\n             return;\n         }", "sourceBeforeFix": "handshakeStatus == HandshakeStatus.NOT_HANDSHAKING", "sourceAfterFix": "handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "45bf206c4d10874716feb5ef11f55a041bd22111", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = new TwoDimensionalMap<String, String, SimpleMatrix>();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "fixed": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = TwoDimensionalMap.treeMap();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "sourceBeforeFix": "Generics.newHashMap()", "sourceAfterFix": "Generics.newTreeMap()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJmsEndpointBuilder\n             extends\n                 AdvancedJmsEndpointConsumerBuilder, AdvancedJmsEndpointProducerBuilder {\n         default JmsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJmsEndpointBuilder\n             extends\n                 AdvancedJmsEndpointConsumerBuilder, AdvancedJmsEndpointProducerBuilder {\n         default JmsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "fixed": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentTo(node2)"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   class OkHttpRequest implements Runnable {\n     private final Call call;\n    public OkHttpRequest(Call call) {\n       this.call = call;\n     }", "fixed": "   class OkHttpRequest implements Runnable {\n     private final Call call;\n    OkHttpRequest(Call call) {\n       this.call = call;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "13dc20d21b6b2e186cd7825fbf854e00810ba873", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         DefaultCamelContext defaultCamelContext = (DefaultCamelContext)getCamelContext();\n         defaultCamelContext.stopRoute(id);\n        defaultCamelContext.removeRouteDefinition(id);\n         defaultCamelContext.addRoutes(builder);", "fixed": "         DefaultCamelContext defaultCamelContext = (DefaultCamelContext)getCamelContext();\n         defaultCamelContext.stopRoute(id);\n        defaultCamelContext.removeRoute(id);\n         defaultCamelContext.addRoutes(builder);", "sourceBeforeFix": "defaultCamelContext.removeRouteDefinition(id)", "sourceAfterFix": "defaultCamelContext.removeRoute(id)"}
{"fixCommitSHA1": "7cf7647e546201d3f175860526888cd92b3927b3", "projectName": "apache.storm", "bugType": "More Specific If", "problem": "             Long id = (Long) tuple.getValue(0);\n             Long timeDeltaMs = (Long) tuple.getValue(1);\n             TupleInfo tupleInfo = (TupleInfo) pending.remove(id);\n            if (tupleInfo.getMessageId() != null) {\n                 if (taskId != tupleInfo.getTaskId()) {\n                     throw new RuntimeException(\"Fatal error, mismatched task ids: \" + taskId + \" \" + tupleInfo.getTaskId());\n                 }", "fixed": "             Long id = (Long) tuple.getValue(0);\n             Long timeDeltaMs = (Long) tuple.getValue(1);\n             TupleInfo tupleInfo = (TupleInfo) pending.remove(id);\n            if (tupleInfo != null && tupleInfo.getMessageId() != null) {\n                 if (taskId != tupleInfo.getTaskId()) {\n                     throw new RuntimeException(\"Fatal error, mismatched task ids: \" + taskId + \" \" + tupleInfo.getTaskId());\n                 }", "sourceBeforeFix": "tupleInfo.getMessageId() != null", "sourceAfterFix": "tupleInfo != null && tupleInfo.getMessageId() != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "78051257136d79f17c1dab7c814557f40e163c48", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {\n        codegenModel.additionalPropertiesType = getSwaggerType(swaggerModel.getAdditionalProperties());\n         addImport(codegenModel, codegenModel.additionalPropertiesType);\n     }", "fixed": "     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {\n        codegenModel.additionalPropertiesType = getTypeDeclaration(swaggerModel.getAdditionalProperties());\n         addImport(codegenModel, codegenModel.additionalPropertiesType);\n     }", "sourceBeforeFix": "getSwaggerType(swaggerModel.getAdditionalProperties())", "sourceAfterFix": "getTypeDeclaration(swaggerModel.getAdditionalProperties())"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "3517e9bad4eceb4aefaa9f3a999ec83f2db33f25", "projectName": "google.closure-compiler", "bugType": "More Specific If", "problem": "       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n         isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();\n       }", "fixed": "       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if( functionJSDocInfo != null  &&\n          functionJSDocInfo.getAssociatedNode() != null) {\n         isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();\n       }", "sourceBeforeFix": "functionJSDocInfo != null", "sourceAfterFix": "functionJSDocInfo != null && functionJSDocInfo.getAssociatedNode() != null"}
{"fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     public static Set<String> getPackageNames(ClassLoader classLoader)\n             throws CheckstyleException {\n        Set<String> result;\n         try {", "fixed": "     public static Set<String> getPackageNames(ClassLoader classLoader)\n             throws CheckstyleException {\n        final Set<String> result;\n         try {", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         appendToBody.ret();\n     }\n    private void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "         appendToBody.ret();\n     }\n    private static void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * Increments to counter by one for the supplied scope.\n          * @param scope the scope counter to increment.\n          */\n        void increment(Scope scope) {\n             total++;\n             if (inInterface) {\n                 counts.put(Scope.PUBLIC, 1 + value(Scope.PUBLIC));", "fixed": "          * Increments to counter by one for the supplied scope.\n          * @param scope the scope counter to increment.\n          */\n        private void increment(Scope scope) {\n             total++;\n             if (inInterface) {\n                 counts.put(Scope.PUBLIC, 1 + value(Scope.PUBLIC));", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "53f6920929a7e40f680806fd727c195314f92414", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": "* @see org.openmrs.api.db.ConceptDAO\n \t */\r\n \t@Override\r\n\tpublic Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n\t\treturn (Integer) criteria.uniqueResult();\r\n \t}\r\n \t/**\r", "fixed": "* @see org.openmrs.api.db.ConceptDAO\n \t */\r\n \t@Override\r\n\tpublic Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n\t\treturn (Long) criteria.uniqueResult();\r\n \t}\r\n \t/**\r", "sourceBeforeFix": "(Integer)criteria.uniqueResult()", "sourceAfterFix": "(Long)criteria.uniqueResult()"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "b186ed3519d4627f3352aa65db3d8283d1e8beda", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);\n         public void processCall(Node node, Packet packet) {\n            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getSemaphore(packet.name);\n             final Integer value = (Integer) toObject(packet.getValueData());\n             final boolean flag = (Boolean) toObject(packet.getKeyData());\n             processCall(packet, semaphoreProxy, value, flag);", "fixed": "         abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);\n         public void processCall(Node node, Packet packet) {\n            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getOrCreateProxyByName(packet.name);\n             final Integer value = (Integer) toObject(packet.getValueData());\n             final boolean flag = (Boolean) toObject(packet.getKeyData());\n             processCall(packet, semaphoreProxy, value, flag);", "sourceBeforeFix": "factory.getSemaphore(packet.name)", "sourceAfterFix": "factory.getOrCreateProxyByName(packet.name)"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7e53685310fa22abd12307e141511184fa6ede3a", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "   public void setOutputFormatClass(Class<? extends HiveOutputFormat> outputFormatClass) {\n     this.outputFormatClass = outputFormatClass;\n     tPartition.getSd().setOutputFormat(HiveFileFormatUtils\n        .getOutputFormatSubstitute(outputFormatClass).toString());\n   }\n   final public Class<? extends InputFormat> getInputFormatClass()", "fixed": "   public void setOutputFormatClass(Class<? extends HiveOutputFormat> outputFormatClass) {\n     this.outputFormatClass = outputFormatClass;\n     tPartition.getSd().setOutputFormat(HiveFileFormatUtils\n        .getOutputFormatSubstitute(outputFormatClass).getName());\n   }\n   final public Class<? extends InputFormat> getInputFormatClass()", "sourceBeforeFix": "HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).toString()", "sourceAfterFix": "HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).getName()"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "         )\n     );\n    Assert.assertTrue(\"Operation must complete within 100ms\", queryNotifyLatch.await(100, TimeUnit.MILLISECONDS));\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "fixed": "         )\n     );\n    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastMapEndpointBuilder\n             extends\n                 AdvancedHazelcastMapEndpointConsumerBuilder, AdvancedHazelcastMapEndpointProducerBuilder {\n         default HazelcastMapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastMapEndpointBuilder\n             extends\n                 AdvancedHazelcastMapEndpointConsumerBuilder, AdvancedHazelcastMapEndpointProducerBuilder {\n         default HazelcastMapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "83f58a38a06e424cc74c9d4035bf552df731fe65", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "         super.doStop();\n         if (configuration.isWebhookAutoRegister()) {\n            log.info(\"Unregistering webhook for endpoint \" + delegateEndpoint);\n             delegateEndpoint.unregisterWebhook();\n         }\n     }", "fixed": "         super.doStop();\n         if (configuration.isWebhookAutoRegister()) {\n            log.info(\"Unregistering webhook for endpoint {}\", delegateEndpoint);\n             delegateEndpoint.unregisterWebhook();\n         }\n     }", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n }", "fixed": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n }", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     \t\t}\n     \t\trecvQueue.add(recvMessage);\n\t\t\tlogger.trace(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \t\t/**", "fixed": "     \t\t}\n     \t\trecvQueue.add(recvMessage);\n\t\t\tlogger.debug(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \t\t/**", "sourceBeforeFix": "logger.trace(\"Receive queue ADD: Length={}\",recvQueue.size())", "sourceAfterFix": "logger.debug(\"Receive queue ADD: Length={}\",recvQueue.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4af3d1f01144d5a959934641e66abfcb94644b0a", "projectName": "hazelcast.hazelcast", "bugType": "Delete Throws Exception", "problem": "     HazelcastInstance server1;\n     @Before\n    public void setUp() throws Exception {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "fixed": "     HazelcastInstance server1;\n     @Before\n    public void setUp() {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "sourceBeforeFix": "id=15807", "sourceAfterFix": "id=10807"}
{"fixCommitSHA1": "8309c8f182b1f7febfff37ad92d724d642f56f97", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "   protected FSNamesystem namesystem; \n   protected final Configuration conf;\n   protected NamenodeRole role;\n  private HAState state;\n   private final boolean haEnabled;\n   private final HAContext haContext;\n   protected boolean allowStaleStandbyReads;", "fixed": "   protected FSNamesystem namesystem; \n   protected final Configuration conf;\n   protected NamenodeRole role;\n  private volatile HAState state;\n   private final boolean haEnabled;\n   private final HAContext haContext;\n   protected boolean allowStaleStandbyReads;", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c2023397cf81452d755a5401fe95b1d47dbde48a", "projectName": "scribejava.scribejava", "bugType": "Same Function Swap Args", "problem": "                 .protocol(Protocol.HTTP_1_1)\n                 .code(200)\n                 .message(\"ok\")\n                .body(ResponseBody.create(MediaType.get(\"text/plain\"), new byte[0]))\n                 .build();\n         handler.onResponse(call, response);\n         assertNull(callback.getResponse());", "fixed": "                 .protocol(Protocol.HTTP_1_1)\n                 .code(200)\n                 .message(\"ok\")\n                .body(ResponseBody.create(new byte[0], MediaType.get(\"text/plain\")))\n                 .build();\n         handler.onResponse(call, response);\n         assertNull(callback.getResponse());", "sourceBeforeFix": "ResponseBody.create(MediaType.get(\"text/plain\"),new byte[0])", "sourceAfterFix": "ResponseBody.create(new byte[0],MediaType.get(\"text/plain\"))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "fixed": "                 .retInt();\n     }\n    private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "be4d2df2b76f02b1f0fd5c406d80ddc3b8500af2", "projectName": "yusuke.twitter4j", "bugType": "Change Numeric Literal", "problem": "      * @param args message\n      */\n     public static void main(String[] args) {\n        if (args.length < 1) {\n             System.out.println(\"Usage: java twitter4j.examples.list.GetUserListStatuses [list owner screen name] [list id]\");\n             System.exit(-1);\n         }", "fixed": "      * @param args message\n      */\n     public static void main(String[] args) {\n        if (args.length < 2) {\n             System.out.println(\"Usage: java twitter4j.examples.list.GetUserListStatuses [list owner screen name] [list id]\");\n             System.exit(-1);\n         }", "sourceBeforeFix": "args.length < 1", "sourceAfterFix": "args.length < 2"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic interface TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "fixed": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic abstract class TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;", "fixed": "      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "1889d7ed5c71d8e82e3d440962d7d7ef26c0956f", "projectName": "apache.hbase", "bugType": "Change Binary Operator", "problem": "     }\n    if (this.assignmentManager.isRegionInTransition(regionInfo) == null) {\n       this.assignmentManager.regionOnline(regionInfo, serverInfo);\n     } else {\n       LOG.warn(\"Skipping the onlining of \" + regionInfo.getRegionNameAsString() +", "fixed": "     }\n    if (this.assignmentManager.isRegionInTransition(regionInfo) != null) {\n       this.assignmentManager.regionOnline(regionInfo, serverInfo);\n     } else {\n       LOG.warn(\"Skipping the onlining of \" + regionInfo.getRegionNameAsString() +", "sourceBeforeFix": "this.assignmentManager.isRegionInTransition(regionInfo) == null", "sourceAfterFix": "this.assignmentManager.isRegionInTransition(regionInfo) != null"}
{"fixCommitSHA1": "1f8fb8ad37dbd4cb4be77d827ba19e857bd451d1", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "               log.debug(\"Optimistic locking exception : \" + exception);\n             } else {\n              log.debug(\"Error while closing command context\", exception);\n             }\n             transactionContext.rollback();", "fixed": "               log.debug(\"Optimistic locking exception : \" + exception);\n             } else {\n              log.error(\"Error while closing command context\", exception);\n             }\n             transactionContext.rollback();", "sourceBeforeFix": "log.debug(\"Error while closing command context\",exception)", "sourceAfterFix": "log.error(\"Error while closing command context\",exception)"}
{"fixCommitSHA1": "d5d886baf0d9ab5b389dd4276bf13cf8032c7df7", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "             } else if (\"target\".equals(key)) {\n                 NodeDraft target = container.getNode(value.toString());\n                 edgeDraft.setTarget(target);\n            } else if (\"value\".equals(key)) {\n                 if (value instanceof Double) {\n                     edgeDraft.setWeight(((Double) value).floatValue());\n                 }", "fixed": "             } else if (\"target\".equals(key)) {\n                 NodeDraft target = container.getNode(value.toString());\n                 edgeDraft.setTarget(target);\n            } else if (\"value\".equals(key) || \"weight\".equals(key)) {\n                 if (value instanceof Double) {\n                     edgeDraft.setWeight(((Double) value).floatValue());\n                 }", "sourceBeforeFix": "\"value\".equals(key)", "sourceAfterFix": "\"value\".equals(key) || \"weight\".equals(key)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.nanoTime();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "fixed": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "3694d51c4eb8bdce7a0d15d2705efd704a54fd74", "projectName": "antlr.antlr4", "bugType": "Less Specific If", "problem": " \t\t\t\t\tSystem.out.format(\"\\tMode\\tStates\\tConfigs\\tMode%n\");\n \t\t\t\t\tfor (int i = 0; i < modeToDFA.length; i++) {\n \t\t\t\t\t\tDFA dfa = modeToDFA[i];\n\t\t\t\t\t\tif (dfa == null) {\n \t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t}", "fixed": " \t\t\t\t\tSystem.out.format(\"\\tMode\\tStates\\tConfigs\\tMode%n\");\n \t\t\t\t\tfor (int i = 0; i < modeToDFA.length; i++) {\n \t\t\t\t\t\tDFA dfa = modeToDFA[i];\n\t\t\t\t\t\tif (dfa == null || dfa.states.isEmpty()) {\n \t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t}", "sourceBeforeFix": "dfa == null", "sourceAfterFix": "dfa == null || dfa.states.isEmpty()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "4597da262b00311e03c657db986f712387def622", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertFalse(model.getUniqueItems());\n     }\n }\n\\ No newline at end of file", "fixed": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertTrue(model.getUniqueItems());\n     }\n }\n\\ No newline at end of file", "sourceBeforeFix": "assertTrue(model.getUniqueItems())", "sourceAfterFix": "assertFalse(model.getUniqueItems())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "36f71405ee04602e76844b255e44f146bb476161", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tthis.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));\r\n \t\tfor (ConceptSet cSet : this.getConceptSets()) {\r\n\t\t\tcSet.setConcept(this);\r\n \t\t}\r\n \t\tthis.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));\r", "fixed": " \t\tthis.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));\r\n \t\tfor (ConceptSet cSet : this.getConceptSets()) {\r\n\t\t\tcSet.setConceptSet(this);\r\n \t\t}\r\n \t\tthis.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));\r", "sourceBeforeFix": "cSet.setConcept(this)", "sourceAfterFix": "cSet.setConceptSet(this)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     }\n     public void destroy() {\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }", "fixed": "     }\n     public void destroy() {\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "ceb0d5e68bc6cbf8015be6d5dd785991fbc81455", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "     Thread.yield();\n    response = client.get(path);\n     assertEquals(response.getCode(), 404);", "fixed": "     Thread.yield();\n    response = client.get(path, MIMETYPE_PROTOBUF);\n     assertEquals(response.getCode(), 404);", "sourceBeforeFix": "client.get(path)", "sourceAfterFix": "client.get(path,MIMETYPE_XML)"}
{"fixCommitSHA1": "9e756fefbb053926754108335e3ad78b586439ac", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         WebsocketEndpoint websocketEndpoint = (WebsocketEndpoint)context.getEndpoint(uri);\n         WebsocketComponent component = websocketEndpoint.getComponent();\n         component.setMinThreads(1);\n        component.setMaxThreads(11);\n         Consumer consumer = websocketEndpoint.createConsumer(processor);\n         component.connect((WebsocketProducerConsumer) consumer);", "fixed": "         WebsocketEndpoint websocketEndpoint = (WebsocketEndpoint)context.getEndpoint(uri);\n         WebsocketComponent component = websocketEndpoint.getComponent();\n         component.setMinThreads(1);\n        component.setMaxThreads(20);\n         Consumer consumer = websocketEndpoint.createConsumer(processor);\n         component.connect((WebsocketProducerConsumer) consumer);", "sourceBeforeFix": "component.setMaxThreads(11)", "sourceAfterFix": "component.setMaxThreads(20)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "fixed": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private static void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "e2ac6f8c326490b85b9ad9e0a67d53ffb7fc2842", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     public final static String SUSPEND = NettyCometSupport.class.getName() + \".suspend\";\n     public final static String RESUME = NettyCometSupport.class.getName() + \".resume\";\n    private static final Logger logger = LoggerFactory.getLogger(BlockingIOCometSupport.class);\n     public NettyCometSupport(AtmosphereConfig config) {\n         super(config);", "fixed": "     public final static String SUSPEND = NettyCometSupport.class.getName() + \".suspend\";\n     public final static String RESUME = NettyCometSupport.class.getName() + \".resume\";\n    private static final Logger logger = LoggerFactory.getLogger(NettyCometSupport.class);\n     public NettyCometSupport(AtmosphereConfig config) {\n         super(config);", "sourceBeforeFix": "BlockingIOCometSupport.class", "sourceAfterFix": "NettyCometSupport.class"}
{"fixCommitSHA1": "ed1852a789daeef03ab260ef4f962bca9160d13e", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "fixed": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final P testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "sourceBeforeFix": "final Prototype testedPrototype", "sourceAfterFix": "final P testedPrototype"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface OptaPlannerEndpointBuilder\n             extends\n                 OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointBuilder advanced() {", "fixed": "     \n    public interface OptaPlannerEndpointBuilder\n             extends\n                 OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d78e066362deca6a9112d9330524825539db447f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic void draw (SpriteBatch batch, float x, float y, float width, float height) {\r\n \t\tTextureRegion region = getRegion();\r\n\t\tfloat regionWidth = region.getRegionWidth(), regionHeight = region.getRegionWidth();\r\n \t\tfloat remainingX = width % regionWidth, remainingY = height % regionHeight;\r\n \t\tfloat startX = x, startY = y;\r\n \t\tfloat endX = x + width - remainingX, endY = y + height - remainingY;\r", "fixed": " \tpublic void draw (SpriteBatch batch, float x, float y, float width, float height) {\r\n \t\tTextureRegion region = getRegion();\r\n\t\tfloat regionWidth = region.getRegionWidth(), regionHeight = region.getRegionHeight();\r\n \t\tfloat remainingX = width % regionWidth, remainingY = height % regionHeight;\r\n \t\tfloat startX = x, startY = y;\r\n \t\tfloat endX = x + width - remainingX, endY = y + height - remainingY;\r", "sourceBeforeFix": "region.getRegionWidth()", "sourceAfterFix": "region.getRegionHeight()"}
{"fixCommitSHA1": "5bcda0dcda632007620256bcc654628a81ab50f0", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "     if (s == null || regex == null) {\n       return null;\n     }\n    if (!regex.equals(lastRegex)) {\n       lastRegex.set(regex);\n       p = Pattern.compile(regex.toString());\n     }", "fixed": "     if (s == null || regex == null) {\n       return null;\n     }\n    if (!regex.equals(lastRegex) || p == null) {\n       lastRegex.set(regex);\n       p = Pattern.compile(regex.toString());\n     }", "sourceBeforeFix": "!regex.equals(lastRegex)", "sourceAfterFix": "!regex.equals(lastRegex) || p == null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getId() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r", "fixed": " \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getUuid() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r", "sourceBeforeFix": "patientState.getState().getId()", "sourceAfterFix": "patientState.getState().getUuid()"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     protected void flushDirtyLogs() {\n         log.debug(\"Checking for dirty logs to flush...\");\n        final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.asMap(logManager.logsByTopicPartition()).entrySet();\n         for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {\n             final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();\n             final Log kafkaLog = topicAndPartitionLogEntry.getValue();", "fixed": "     protected void flushDirtyLogs() {\n         log.debug(\"Checking for dirty logs to flush...\");\n        final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition()).entrySet();\n         for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {\n             final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();\n             final Log kafkaLog = topicAndPartitionLogEntry.getValue();", "sourceBeforeFix": "JavaConversions.asIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))", "sourceAfterFix": "JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))"}
{"fixCommitSHA1": "2ea202704a509c0bea14438beb65443f33517ebc", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "                         String command = shellMsg.getCommand();\n                         if (command == null) {\n                            throw new UnsupportedOperationException(\"Command not found in bolt message: \" + shellMsg);\n                         }\n                         if(command.equals(\"ack\")) {\n                             handleAck(shellMsg.getId());", "fixed": "                         String command = shellMsg.getCommand();\n                         if (command == null) {\n                            throw new IllegalArgumentException(\"Command not found in bolt message: \" + shellMsg);\n                         }\n                         if(command.equals(\"ack\")) {\n                             handleAck(shellMsg.getId());", "sourceBeforeFix": "new UnsupportedOperationException(\"Command not found in bolt message: \" + shellMsg)", "sourceAfterFix": "new IllegalArgumentException(\"Command not found in bolt message: \" + shellMsg)"}
{"fixCommitSHA1": "4baf500fc14016bfc22a339c68a4c05050d14a52", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Caller in Function Call", "problem": "     public int read(String table, String key, Set<String> fields,\n             HashMap<String, ByteIterator> result) {\n         if (fields == null) {\n            StringByteIteartor.putAllAsByteIterators(result, jedis.hgetAll(key));\n         }\n         else {\n             String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);", "fixed": "     public int read(String table, String key, Set<String> fields,\n             HashMap<String, ByteIterator> result) {\n         if (fields == null) {\n            StringByteIterator.putAllAsByteIterators(result, jedis.hgetAll(key));\n         }\n         else {\n             String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);", "sourceBeforeFix": "StringByteIteartor.putAllAsByteIterators(result,jedis.hgetAll(key))", "sourceAfterFix": "StringByteIterator.putAllAsByteIterators(result,jedis.hgetAll(key))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "14db1773526284bfc9837a4ef9121862dc8544fb", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " class DataRecordWithStats extends AbstractRecordWithStats<Data> {\n    protected Data value;\n     DataRecordWithStats() {\n         super();", "fixed": " class DataRecordWithStats extends AbstractRecordWithStats<Data> {\n    protected volatile Data value;\n     DataRecordWithStats() {\n         super();", "sourceBeforeFix": "4", "sourceAfterFix": "68"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "509beae1e2d9a01e952f9eaf0c4a88037076fc63", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "   @Override\n  public void openRegion(HRegionInfo region) {\n     LOG.info(\"Received request to open region: \" +\n       region.getRegionNameAsString());\n     if (this.stopped) throw new RegionServerStoppedException();", "fixed": "   @Override\n  public void openRegion(HRegionInfo region)\n  throws RegionServerStoppedException {\n     LOG.info(\"Received request to open region: \" +\n       region.getRegionNameAsString());\n     if (this.stopped) throw new RegionServerStoppedException();", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0a1836b22646342828e96b1d0e7dad9c8bfdabfe", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(6);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "fixed": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(7);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "sourceBeforeFix": "start.expectedMessageCount(6)", "sourceAfterFix": "start.expectedMessageCount(7)"}
{"fixCommitSHA1": "2c3e641f9f9b847eb609a575107ad67a63edc09b", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "fixed": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}
{"fixCommitSHA1": "34e23fe425e62f240a65c435d41adfbbe211522d", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     org.apache.hadoop.hbase.client.SnapshotDescription snapshotPOJO = null;\n     if (cpHost != null) {\n      snapshotPOJO = ProtobufUtil.createSnapshotDesc(reqSnapshot);\n       cpHost.preRestoreSnapshot(snapshotPOJO, snapshotTableDesc);\n     }", "fixed": "     org.apache.hadoop.hbase.client.SnapshotDescription snapshotPOJO = null;\n     if (cpHost != null) {\n      snapshotPOJO = ProtobufUtil.createSnapshotDesc(snapshot);\n       cpHost.preRestoreSnapshot(snapshotPOJO, snapshotTableDesc);\n     }", "sourceBeforeFix": "ProtobufUtil.createSnapshotDesc(reqSnapshot)", "sourceAfterFix": "ProtobufUtil.createSnapshotDesc(snapshot)"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Boolean Literal", "problem": "     }\n    @Cucumber.Options(monochrome = false)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = true)\n     static class BaseClassWithMonoChromeFalse {\n     }", "fixed": "     }\n    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n     }", "sourceBeforeFix": "monochrome=true", "sourceAfterFix": "monochrome=false"}
{"fixCommitSHA1": "e97382e401f58108ad645dee2076ddd110a3e7e9", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             throw new IOException(\"Failed to list directory: \" + dir);\n         }\n         for (File file : files) {\n            Files.delete(file.toPath());\n         }\n        Files.delete(dir.toPath());\n     }\n }", "fixed": "             throw new IOException(\"Failed to list directory: \" + dir);\n         }\n         for (File file : files) {\n            Files.deleteIfExists(file.toPath());\n         }\n        Files.deleteIfExists(dir.toPath());\n     }\n }", "sourceBeforeFix": "Files.delete(file.toPath())", "sourceAfterFix": "Files.deleteIfExists(file.toPath())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFtpsEndpointBuilder\n             extends\n                 AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {\n         default FtpsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFtpsEndpointBuilder\n             extends\n                 AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {\n         default FtpsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,", "fixed": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HdfsEndpointBuilder\n             extends\n                 HdfsEndpointConsumerBuilder, HdfsEndpointProducerBuilder {\n         default AdvancedHdfsEndpointBuilder advanced() {", "fixed": "     \n    public interface HdfsEndpointBuilder\n             extends\n                 HdfsEndpointConsumerBuilder, HdfsEndpointProducerBuilder {\n         default AdvancedHdfsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n     @GET\n     @Path(\"/logout\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n     @GET\n     @Path(\"/logout\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         appendToBody.ret();\n     }\n    private void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "         appendToBody.ret();\n     }\n    private static void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "dce2381dc4a877fcbfb869f115152ecd44a92173", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "     }\n     for (String label : nodeLabels) {\n      if (q.acccessibleNodeLabels.contains(label)) {\n         return true;\n       }\n     }", "fixed": "     }\n     for (String label : nodeLabels) {\n      if (q.accessibleNodeLabels.contains(label)) {\n         return true;\n       }\n     }", "sourceBeforeFix": "entry.getValue().acccessibleNodeLabels", "sourceAfterFix": "entry.getValue().accessibleNodeLabels"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTexturesEXT(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "fixed": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTextures(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "sourceBeforeFix": "GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)", "sourceAfterFix": "GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)"}
{"fixCommitSHA1": "eee0ec390231389b32e27f9ab52e279140abd82e", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "         }\n     }\n    boolean isContentAlwaysEmpty(@SuppressWarnings(\"unused\") H msg) {\n         return false;\n     }", "fixed": "         }\n     }\n    \n    protected boolean isContentAlwaysEmpty(@SuppressWarnings(\"unused\") H msg) {\n         return false;\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "99ed41cc78fe7dbc36ea17d9a6a1a56b51bcb12d", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "         assertEquals(inDegree1, 0.0);\r\n         assertEquals(inDegree2, 1.0);\r\n         assertEquals(outDegree1, 1.0);\r\n        assertEquals(avDegree, 1.0);\r\n     }\r\n     @Test\r", "fixed": "         assertEquals(inDegree1, 0.0);\r\n         assertEquals(inDegree2, 1.0);\r\n         assertEquals(outDegree1, 1.0);\r\n        assertEquals(avDegree, 0.5);\r\n     }\r\n     @Test\r", "sourceBeforeFix": "assertEquals(avDegree,1.0)", "sourceAfterFix": "assertEquals(avDegree,0.5)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JmsEndpointBuilder\n             extends\n                 JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {\n         default AdvancedJmsEndpointBuilder advanced() {", "fixed": "     \n    public interface JmsEndpointBuilder\n             extends\n                 JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {\n         default AdvancedJmsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(-1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "fixed": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface IgniteCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "8b59afeaaa4458b6d21d88b2edc0d22ed04d9798", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     public void process(Exchange exchange) throws Exception {\n                         String id = exchange.getIn().getHeader(\"messageId\", String.class);\n                         if (id.equals(\"2\")) {\n                            throw new IllegalArgumentException(\"Damm I cannot handle id 2\");\n                         }\n                     }\n                 }).to(\"mock:result\");", "fixed": "                     public void process(Exchange exchange) throws Exception {\n                         String id = exchange.getIn().getHeader(\"messageId\", String.class);\n                         if (id.equals(\"2\")) {\n                            throw new IllegalArgumentException(\"Damn I cannot handle id 2\");\n                         }\n                     }\n                 }).to(\"mock:result\");", "sourceBeforeFix": "resultEndpoint.expectedBodiesReceived(\"one\",\"three\")", "sourceAfterFix": "resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\",\"three\")"}
{"fixCommitSHA1": "c0637a44dab4b0fddd4c2e0b9794db9864ecb580", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "    * Returns a {@link WildcardType} if the {@link TypeMirror} represents a wildcard type or throws\n    * an {@link IllegalArgumentException}.\n    */\n  public static WildcardType asWildcard(WildcardType maybeWildcardType) {\n     return maybeWildcardType.accept(WildcardTypeVisitor.INSTANCE, null);\n   }", "fixed": "    * Returns a {@link WildcardType} if the {@link TypeMirror} represents a wildcard type or throws\n    * an {@link IllegalArgumentException}.\n    */\n  public static WildcardType asWildcard(TypeMirror maybeWildcardType) {\n     return maybeWildcardType.accept(WildcardTypeVisitor.INSTANCE, null);\n   }", "sourceBeforeFix": "WildcardType maybeWildcardType", "sourceAfterFix": "TypeMirror maybeWildcardType"}
{"fixCommitSHA1": "1b50e64ae913b5521dcc38f5eaf7a637acf5ecd2", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "     if (mConnected) {\n       try {\n        if (mHeartbeat != null) {\n           mHeartbeatExecutor.heartbeat();\n         }\n         mProtocol.getTransport().close();", "fixed": "     if (mConnected) {\n       try {\n        if (mHeartbeatExecutor != null) {\n           mHeartbeatExecutor.heartbeat();\n         }\n         mProtocol.getTransport().close();", "sourceBeforeFix": "mHeartbeat != null", "sourceAfterFix": "mHeartbeatExecutor != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "a076b497cd3ad3b559d00c145d3504441472a48b", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "     public int getDegree(Node node) {\n         view.checkUpdate();\n         AbstractNode absNode = checkNode(node);\n        int count = view.getClusteredLayerInDegree(absNode);\n         return count;\n     }", "fixed": "     public int getDegree(Node node) {\n         view.checkUpdate();\n         AbstractNode absNode = checkNode(node);\n        int count = view.getClusteredLayerDegree(absNode);\n         return count;\n     }", "sourceBeforeFix": "view.getClusteredLayerInDegree(absNode)", "sourceAfterFix": "view.getClusteredLayerDegree(absNode)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "fixed": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "e376b7be0a40adaba56bbefce50c3f0930a9475c", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         }\n     }\n    public AttributeModel getModel() {\n         Workspace workspace = projectController.getCurrentWorkspace();\n         if (workspace != null) {\n             AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);", "fixed": "         }\n     }\n    public synchronized AttributeModel getModel() {\n         Workspace workspace = projectController.getCurrentWorkspace();\n         if (workspace != null) {\n             AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "781f153ed21f62ab877ebb9e75cdff7330370cc4", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         assertFalse(valueCollection.retainAll(new ArrayList()));\n     }\n    @Test(expected = UnsupportedOperationException.class)\n     public void testToArrayWithArgument() throws Exception {\n         EntryHolder entryHolder = mock(EntryHolder.class);\n         Set set = new HashSet();", "fixed": "         assertFalse(valueCollection.retainAll(new ArrayList()));\n     }\n    @Test(expected = NullPointerException.class)\n     public void testToArrayWithArgument() throws Exception {\n         EntryHolder entryHolder = mock(EntryHolder.class);\n         Set set = new HashSet();", "sourceBeforeFix": "UnsupportedOperationException.class", "sourceAfterFix": "NullPointerException.class"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "8c1933ecbf207bce05820d0c440f26e3240a6d41", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testSendLotsOfMessagesButOnly3GetThrough() throws Exception {\n         MockEndpoint resultEndpoint = resolveMandatoryEndpoint(\"mock:result\", MockEndpoint.class);\n         resultEndpoint.expectedMessageCount(3);\n        resultEndpoint.setResultWaitTime(1000);\n         for (int i = 0; i < messageCount; i++) {\n             template.sendBody(\"seda:a\", \"<message>\" + i + \"</message>\");", "fixed": "     public void testSendLotsOfMessagesButOnly3GetThrough() throws Exception {\n         MockEndpoint resultEndpoint = resolveMandatoryEndpoint(\"mock:result\", MockEndpoint.class);\n         resultEndpoint.expectedMessageCount(3);\n        resultEndpoint.setResultWaitTime(5000);\n         for (int i = 0; i < messageCount; i++) {\n             template.sendBody(\"seda:a\", \"<message>\" + i + \"</message>\");", "sourceBeforeFix": "resultEndpoint.setResultWaitTime(1000)", "sourceAfterFix": "resultEndpoint.setResultWaitTime(5000)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0f2731335aac2410e85d739743e8589cce75846c", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "                     TextManager.this.model = VizController.getInstance().getVizModel().getTextModel();\n                    if (model.getNodeTextColumns() == null) {\n                         AttributeController attributeController = Lookup.getDefault().lookup(AttributeController.class);\n                         if (attributeController != null && attributeController.getModel() != null) {\n                             AttributeModel attributeModel = attributeController.getModel();", "fixed": "                     TextManager.this.model = VizController.getInstance().getVizModel().getTextModel();\n                    if (model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0) {\n                         AttributeController attributeController = Lookup.getDefault().lookup(AttributeController.class);\n                         if (attributeController != null && attributeController.getModel() != null) {\n                             AttributeModel attributeModel = attributeController.getModel();", "sourceBeforeFix": "model.getNodeTextColumns() == null", "sourceAfterFix": "model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param isStatic\n          *        if import is static.\n          */\n        public void setStaticImport(boolean isStatic) {\n             this.staticImport = isStatic;\n         }\n     }", "fixed": "          * @param isStatic\n          *        if import is static.\n          */\n        public final void setStaticImport(boolean isStatic) {\n             this.staticImport = isStatic;\n         }\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 }\n             }\n         }\n        return r;\n     }\n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {", "fixed": "                 }\n             }\n         }\n        return this;\n     }\n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "f10bf59e6ecf33a0dc996b884e486e42e9241853", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "     int cleanedSize = cleaned.size();\n     waitCount = 0;\n     while (cleanedSize < allocatedSize && waitCount++ < 200) {\n      Thread.sleep(100);\n       resp = nm.nodeHeartbeat(true);\n       cleaned = resp.getContainersToCleanup();\n       cleanedSize += cleaned.size();", "fixed": "     int cleanedSize = cleaned.size();\n     waitCount = 0;\n     while (cleanedSize < allocatedSize && waitCount++ < 200) {\n      Thread.sleep(300);\n       resp = nm.nodeHeartbeat(true);\n       cleaned = resp.getContainersToCleanup();\n       cleanedSize += cleaned.size();", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(300)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6e4e6d32757138712bcba38d7ab1ed8ae97cdcb5", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     @Override\n     public StructField getStructFieldRef(String s) {\n       for(StructField field: fields) {\n        if (field.getFieldName().equals(s)) {\n           return field;\n         }\n       }", "fixed": "     @Override\n     public StructField getStructFieldRef(String s) {\n       for(StructField field: fields) {\n        if (field.getFieldName().equalsIgnoreCase(s)) {\n           return field;\n         }\n       }", "sourceBeforeFix": "field.getFieldName().equals(s)", "sourceAfterFix": "field.getFieldName().equalsIgnoreCase(s)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "3d3f3d5f9c1243bdc111bd463e2f3afc23384d13", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @author Stephen Bloch\n      * June 19, 2003\n      */\n    private abstract static class LexicalFrame\n     {\n         \n         private final Set<String> varNames;", "fixed": "      * @author Stephen Bloch\n      * June 19, 2003\n      */\n    private static class LexicalFrame\n     {\n         \n         private final Set<String> varNames;", "sourceBeforeFix": "1034", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "b6b9cd997b689c70f194da8517910d3bb2d8e843", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\t\tswitch (event.phase) {\n \t\t\t\tcase Began:\n \t\t\t\t\tif (inputProcessor != null) inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);\n\t\t\t\t\tif (numTouched == 1) justTouched = true;\n \t\t\t\t\tbreak;\n \t\t\t\tcase Cancelled:\n \t\t\t\tcase Ended:", "fixed": " \t\t\t\tswitch (event.phase) {\n \t\t\t\tcase Began:\n \t\t\t\t\tif (inputProcessor != null) inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);\n\t\t\t\t\tif (numTouched >= 1) justTouched = true;\n \t\t\t\t\tbreak;\n \t\t\t\tcase Cancelled:\n \t\t\t\tcase Ended:", "sourceBeforeFix": "numTouched == 1", "sourceAfterFix": "numTouched >= 1"}
{"fixCommitSHA1": "a8513817db3153d638e818e9a27b0e2e1eed3bdc", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));\n             final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();\n             if (setop != null) {\n                logger.debug(\"    \" + op.getJavaName() + \"\\n                \" + op.getIDLName());\n                 final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);\n                beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(realSetmethod));\n             }\n         }", "fixed": "             beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));\n             final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();\n             if (setop != null) {\n                logger.debug(\"    \" + setop.getJavaName() + \"\\n                \" + setop.getIDLName());\n                 final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);\n                beanMethodMap.put(setop.getIDLName(), new SkeletonStrategy(realSetmethod));\n             }\n         }", "sourceBeforeFix": "op.getIDLName()", "sourceAfterFix": "setop.getIDLName()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param candidate The candidate to check.\n \t * @return True, if the candidate is equal to the reference, false otherwise.\n \t */\n\tpublic boolean equalToReference(T2 candidate);\n\tpublic int compareToReference(T2 candidate);\n }", "fixed": " \t * @param candidate The candidate to check.\n \t * @return True, if the candidate is equal to the reference, false otherwise.\n \t */\n\tpublic abstract boolean equalToReference(T2 candidate);\n\tpublic abstract int compareToReference(T2 candidate);\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterTimelineEndpointBuilder\n             extends\n                 TwitterTimelineEndpointConsumerBuilder, TwitterTimelineEndpointProducerBuilder {\n         default AdvancedTwitterTimelineEndpointBuilder advanced() {", "fixed": "     \n    public interface TwitterTimelineEndpointBuilder\n             extends\n                 TwitterTimelineEndpointConsumerBuilder, TwitterTimelineEndpointProducerBuilder {\n         default AdvancedTwitterTimelineEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplemetationMethodDescriptor> implemetationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "fixed": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplementationMethodDescriptor> implementationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b4979166050e553fd967e5094509de7975651ec", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "             chunks.get(chunk.getId()).put(chunk.getSequenceNumber(), chunk);\n         } else {\n            Map<Integer, GELFMessageChunk> c = Maps.newHashMap();\n             c.put(chunk.getSequenceNumber(), chunk);\n             chunks.put(chunk.getId(), c);\n         }", "fixed": "             chunks.get(chunk.getId()).put(chunk.getSequenceNumber(), chunk);\n         } else {\n            Map<Integer, GELFMessageChunk> c = Maps.newTreeMap();\n             c.put(chunk.getSequenceNumber(), chunk);\n             chunks.put(chunk.getId(), c);\n         }", "sourceBeforeFix": "Maps.newHashMap()", "sourceAfterFix": "Maps.newTreeMap()"}
{"fixCommitSHA1": "2128c76abd417bcdc41c6120d924b618593e9fca", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic boolean act (float delta) {\n \t\tActor actor = (targetActor != null ? targetActor : this.actor);\n \t\tif (capture)\n\t\t\ttargetActor.addCaptureListener(listener);\n \t\telse\n\t\t\ttargetActor.addListener(listener);\n \t\treturn true;\n \t}", "fixed": " \tpublic boolean act (float delta) {\n \t\tActor actor = (targetActor != null ? targetActor : this.actor);\n \t\tif (capture)\n\t\t\tactor.addCaptureListener(listener);\n \t\telse\n\t\t\tactor.addListener(listener);\n \t\treturn true;\n \t}", "sourceBeforeFix": "targetActor.addListener(listener)", "sourceAfterFix": "actor.addListener(listener)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "fixed": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "9a9b02c330e9e452f37335d0e59c462175bb5df7", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForRole\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRole\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"hello\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "42cf20c9f1842cc9257fe271b7b8bc4367795b57", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": " {\n   @JsonProperty\n   @Min(0)\n  private int numConnections = 5;\n   @JsonProperty\n   private Period readTimeout = new Period(\"PT15M\");", "fixed": " {\n   @JsonProperty\n   @Min(0)\n  private int numConnections = 20;\n   @JsonProperty\n   private Period readTimeout = new Period(\"PT15M\");", "sourceBeforeFix": "numConnections=5", "sourceAfterFix": "numConnections=20"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     protected CamelContext createCamelContext() throws Exception {\n         NagiosEventNotifier notifier = new NagiosEventNotifier();\n         notifier.getConfiguration().setHost(\"localhost\");\n        notifier.getConfiguration().setPort(25667);\n         notifier.getConfiguration().setPassword(\"password\");\n         CamelContext context = super.createCamelContext();", "fixed": "     protected CamelContext createCamelContext() throws Exception {\n         NagiosEventNotifier notifier = new NagiosEventNotifier();\n         notifier.getConfiguration().setHost(\"localhost\");\n        notifier.getConfiguration().setPort(25669);\n         notifier.getConfiguration().setPassword(\"password\");\n         CamelContext context = super.createCamelContext();", "sourceBeforeFix": "new NagiosNscaStub(25667,\"password\")", "sourceAfterFix": "new NagiosNscaStub(25669,\"password\")"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n\t\tcatch (Throwable t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r", "fixed": " \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n\t\tcatch (Exception t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r", "sourceBeforeFix": "Throwable e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NeutronEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedNeutronEndpointBuilder advanced() {\n             return (AdvancedNeutronEndpointBuilder) this;\n         }", "fixed": "     \n    public interface NeutronEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedNeutronEndpointBuilder advanced() {\n             return (AdvancedNeutronEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8e1fa1f0a27b51d6a9e30594095b602a7fa699cd", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "    Pattern argPattern = Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\");\n     Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n     List<String> processedArgs = new ArrayList<>();", "fixed": "    Pattern argPattern = Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\", Pattern.DOTALL);\n     Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n     List<String> processedArgs = new ArrayList<>();", "sourceBeforeFix": "Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\")", "sourceAfterFix": "Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\",Pattern.DOTALL)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n        String ufsPath = mMountTable.resolve(getPath(dir)).getPath();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }", "fixed": "       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n        String ufsPath = mMountTable.resolve(getPath(dir)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }", "sourceBeforeFix": "mMountTable.resolve(getPath(next)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(next)).toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "475938ec477d1d0d357fb0f586a57650d9ee78c0", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "             throws IOException, ServletException {\n         if (!req.isAsyncStarted()) {\n            AsyncContext asyncContext = req.startAsync();\n             asyncContext.addListener(new CometListener(this));\n             if (action.timeout() != -1) {", "fixed": "             throws IOException, ServletException {\n         if (!req.isAsyncStarted()) {\n            AsyncContext asyncContext = req.startAsync(req, res);\n             asyncContext.addListener(new CometListener(this));\n             if (action.timeout() != -1) {", "sourceBeforeFix": "req.startAsync()", "sourceAfterFix": "req.startAsync(req,res)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dbcdd1231cf705bdb20e8296d53b52186eb8baed", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author Lars K\u00fchne\n  * @noinspection ThisEscapedInObjectConstruction\n  */\npublic class TreeTable extends JTable {\n     private static final long serialVersionUID = -8493693409423365387L;\n     ", "fixed": "  * @author Lars K\u00fchne\n  * @noinspection ThisEscapedInObjectConstruction\n  */\npublic final class TreeTable extends JTable {\n     private static final long serialVersionUID = -8493693409423365387L;\n     ", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PropertiesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPropertiesEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PropertiesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPropertiesEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PahoEndpointBuilder\n             extends\n                 PahoEndpointConsumerBuilder, PahoEndpointProducerBuilder {\n         default AdvancedPahoEndpointBuilder advanced() {", "fixed": "     \n    public interface PahoEndpointBuilder\n             extends\n                 PahoEndpointConsumerBuilder, PahoEndpointProducerBuilder {\n         default AdvancedPahoEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param detailNode javadoc tag node\n      * @return java doc tag content appended in result\n      */\n    private String getStringInsideTag(String result, DetailNode detailNode) {\n         final StringBuilder contents = new StringBuilder(result);\n         DetailNode tempNode = detailNode;\n         while (tempNode != null) {", "fixed": "      * @param detailNode javadoc tag node\n      * @return java doc tag content appended in result\n      */\n    private static String getStringInsideTag(String result, DetailNode detailNode) {\n         final StringBuilder contents = new StringBuilder(result);\n         DetailNode tempNode = detailNode;\n         while (tempNode != null) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f006de8639371e844451db9024bcf4c8823b45b6", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }", "fixed": "       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }", "sourceBeforeFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()", "sourceAfterFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()"}
{"fixCommitSHA1": "9a9b02c330e9e452f37335d0e59c462175bb5df7", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForRoles\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRole\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRole\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "39fe5a830bb4e05a85bef3e52115c708f9409abf", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddress()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "fixed": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddressNode1()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "ab45cc12ff4e9b8e62aa1b3776367df3b1020b93", "projectName": "gephi.gephi", "bugType": "Change Caller in Function Call", "problem": "         @Override\n         public Number getMinimumValue() {\n             if (minimum == null) {\n                AbstractRanking.refreshMinMax(this, graph);\n             }\n             return minimum;\n         }", "fixed": "         @Override\n         public Number getMinimumValue() {\n             if (minimum == null) {\n                DynamicAttributeRanking.refreshMinMax(this, graph);\n             }\n             return minimum;\n         }", "sourceBeforeFix": "AbstractRanking.refreshMinMax(this,graph)", "sourceAfterFix": "DynamicAttributeRanking.refreshMinMax(this,graph)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\n \tpublic IntSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic IntSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "d4468b05034b3c4166195394e88eed6633bec842", "projectName": "jersey.jersey", "bugType": "Change Caller in Function Call", "problem": " /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n  *\n * Copyright (c) 2012-2015 Oracle and/or its affiliates. All rights reserved.\n  *\n  * The contents of this file are subject to the terms of either the GNU\n  * General Public License Version 2 only (\"GPL\") or the Common Development", "fixed": " /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n  *\n * Copyright (c) 2012-2016 Oracle and/or its affiliates. All rights reserved.\n  *\n  * The contents of this file are subject to the terms of either the GNU\n  * General Public License Version 2 only (\"GPL\") or the Common Development", "sourceBeforeFix": "warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))", "sourceAfterFix": "hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))"}
{"fixCommitSHA1": "419fb4a4dee3cd001631daa06fe6b8c30095b468", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "                                                   ) throws IOException {\n     try {\n      ugi.reloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "fixed": "                                                   ) throws IOException {\n     try {\n      ugi.checkTGTAndReloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "sourceBeforeFix": "UserGroupInformation.getLoginUser().reloginFromKeytab()", "sourceAfterFix": "UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Identifier Used", "problem": "     }\n    @Cucumber.Options(monochrome = false)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = true)\n     static class BaseClassWithMonoChromeFalse {\n     }", "fixed": "     }\n    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n     }", "sourceBeforeFix": "assertFalse(runtimeOptions.isMonochrome())", "sourceAfterFix": "assertTrue(runtimeOptions.isMonochrome())"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8777c0882b68f70d662d21b862b0db35cf50826d", "projectName": "google.closure-compiler", "bugType": "Missing Throws Exception", "problem": "      * @param entryValues The number of entries in the array.\n      * @return The entry object.\n      */\n    private Entry decodeEntry(int[] vals, int entryValues) {\n       Entry entry;\n       switch (entryValues) {", "fixed": "      * @param entryValues The number of entries in the array.\n      * @return The entry object.\n      */\n    private Entry decodeEntry(int[] vals, int entryValues) throws SourceMapParseException {\n       Entry entry;\n       switch (entryValues) {", "sourceBeforeFix": "2", "sourceAfterFix": "2"}
{"fixCommitSHA1": "b7a9f743db97d9925edf634525a7c8e6a6cc1dd1", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": "\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Can't advance\");\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t}", "fixed": "\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Can't advance\", node.getNodeId());\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t}", "sourceBeforeFix": "logger.debug(\"NODE {}: Retry timout: Can't advance\")", "sourceAfterFix": "logger.debug(\"NODE {}: Retry timout: Can't advance\",node.getNodeId())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedYammerEndpointBuilder\n             extends\n                 AdvancedYammerEndpointConsumerBuilder, AdvancedYammerEndpointProducerBuilder {\n         default YammerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedYammerEndpointBuilder\n             extends\n                 AdvancedYammerEndpointConsumerBuilder, AdvancedYammerEndpointProducerBuilder {\n         default YammerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "44c122307e968c2aabc4a89d410c804c632246b1", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void specificPort() throws Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(40000);\n \t\tfactory.setPort(specificPort);\n \t\tthis.container = factory\n \t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());", "fixed": " \t@Test\n \tpublic void specificPort() throws Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n \t\tfactory.setPort(specificPort);\n \t\tthis.container = factory\n \t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());", "sourceBeforeFix": "SocketUtils.findAvailableTcpPort(40000)", "sourceAfterFix": "SocketUtils.findAvailableTcpPort(41000)"}
{"fixCommitSHA1": "998d200618f6c6699f8bacd059ffda7c54f4d39e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkPlanDoNotMatch(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    public static <T extends PlanNode> Rule<T> checkPlanDoNotMatch(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "fixed": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkNoPlanNodeMatches(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    private static <T extends PlanNode> Rule<T> checkNoPlanNodeMatches(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "sourceBeforeFix": "checkPlanDoNotMatch(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")", "sourceAfterFix": "checkNoPlanNodeMatches(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "       final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Boolean Literal", "problem": "     }\n    @Cucumber.Options(monochrome = false)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = true)\n     static class BaseClassWithMonoChromeFalse {\n     }", "fixed": "     }\n    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n     }", "sourceBeforeFix": "monochrome=false", "sourceAfterFix": "monochrome=true"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glGenTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @throws CheckstyleException if an error occurs.\n      */\n     static PkgControl load(final URI uri) throws CheckstyleException {\n        InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();\n         }", "fixed": "      * @throws CheckstyleException if an error occurs.\n      */\n     static PkgControl load(final URI uri) throws CheckstyleException {\n        final InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "fixed": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "d31a409d8f87800c523f1cc4f7862f716cac7313", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 List<ChannelSftp.LsEntry> files = operations.listFiles(file.getParent());\n                 for (ChannelSftp.LsEntry f : files) {\n                     if (f.getFilename().equals(file.getFileName())) {\n                        newLastModified = f.getAttrs().getATime();\n                         newLength = f.getAttrs().getSize();\n                     }\n                 }", "fixed": "                 List<ChannelSftp.LsEntry> files = operations.listFiles(file.getParent());\n                 for (ChannelSftp.LsEntry f : files) {\n                     if (f.getFilename().equals(file.getFileName())) {\n                        newLastModified = f.getAttrs().getMTime();\n                         newLength = f.getAttrs().getSize();\n                     }\n                 }", "sourceBeforeFix": "f.getAttrs().getATime()", "sourceAfterFix": "f.getAttrs().getMTime()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtmosEndpointBuilder\n             extends\n                 AtmosEndpointConsumerBuilder, AtmosEndpointProducerBuilder {\n         default AdvancedAtmosEndpointBuilder advanced() {", "fixed": "     \n    public interface AtmosEndpointBuilder\n             extends\n                 AtmosEndpointConsumerBuilder, AtmosEndpointProducerBuilder {\n         default AdvancedAtmosEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ccc86e9f1cddebc731ac1ccabdd469df11d72d8b", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "fixed": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "sourceBeforeFix": "RestartStrategies.fixedDelayRestart(3,0)", "sourceAfterFix": "RestartStrategies.fixedDelayRestart(1,0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6413dacaaf602e9de5fe439ee290229563f8e361", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "         final boolean registerRuntimeOnly = context.isRuntimeOnlyRegistrationValid();\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME, 1, 0);\n         final ManagementResourceRegistration registration = subsystem.registerSubsystemModel(SecuritySubsystemRootResourceDefinition.INSTANCE);\n         registration.registerOperationHandler(DESCRIBE, GenericSubsystemDescribeHandler.INSTANCE, GenericSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);", "fixed": "         final boolean registerRuntimeOnly = context.isRuntimeOnlyRegistrationValid();\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME, 1, 1);\n         final ManagementResourceRegistration registration = subsystem.registerSubsystemModel(SecuritySubsystemRootResourceDefinition.INSTANCE);\n         registration.registerOperationHandler(DESCRIBE, GenericSubsystemDescribeHandler.INSTANCE, GenericSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);", "sourceBeforeFix": "context.registerSubsystem(SUBSYSTEM_NAME,1,0)", "sourceAfterFix": "context.registerSubsystem(SUBSYSTEM_NAME,1,1)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFhirEndpointBuilder\n             extends\n                 AdvancedFhirEndpointConsumerBuilder, AdvancedFhirEndpointProducerBuilder {\n         default FhirEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFhirEndpointBuilder\n             extends\n                 AdvancedFhirEndpointConsumerBuilder, AdvancedFhirEndpointProducerBuilder {\n         default FhirEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5d9193eb8fcb699722980d5e5680557553c3ee39", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"kinesisClient\", amazonKinesisClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "fixed": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"kinesisClient\", amazonKinesisClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "sourceBeforeFix": "registry.put(\"kinesisClient\",amazonKinesisClient)", "sourceAfterFix": "registry.bind(\"kinesisClient\",amazonKinesisClient)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "sourceBeforeFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(2000L)", "sourceAfterFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(500L)"}
{"fixCommitSHA1": "5c77a7dcd455f7a6e0ba3f289266032be687dc4f", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     scanInfo.setSmall(false);\n    counter = doScan(table, scanInfo, counter + 2);\n     table.close();\n     connection.close();", "fixed": "     scanInfo.setSmall(false);\n    counter = doScan(table, scanInfo, counter + 1);\n     table.close();\n     connection.close();", "sourceBeforeFix": "counter + 2", "sourceAfterFix": "counter + 1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/tasks/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "fixed": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "sourceBeforeFix": "req.getServletPath()", "sourceAfterFix": "req.getPathInfo()"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         String annotation)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new NullPointerException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "fixed": "         String annotation)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
