{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result1\");\n        mock.expectedBodiesReceived(\"Hello World\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result1\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World\")"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n     @GET\n     @Path(\"/jsonFormData\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n     @GET\n     @Path(\"/jsonFormData\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "4e184a37363ce309c7419d2fa64d98ebf3df375f", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.info(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "fixed": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.finest(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "sourceBeforeFix": "logger.info(\"Optimized Selector: \" + selector.getClass().getName())", "sourceAfterFix": "logger.finest(\"Optimized Selector: \" + selector.getClass().getName())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "cf879b3c6018dac6e6788ac9e341cbc7f85864a5", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         template.sendBodyAndHeader(\"direct:start\", \"D\", \"id\", 123);\n         template.sendBodyAndHeader(\"direct:start\", \"E\", \"id\", 123);\n        assertMockEndpointsSatisfied();\n     }\n     @Override", "fixed": "         template.sendBodyAndHeader(\"direct:start\", \"D\", \"id\", 123);\n         template.sendBodyAndHeader(\"direct:start\", \"E\", \"id\", 123);\n        assertMockEndpointsSatisfied(30, TimeUnit.SECONDS);\n     }\n     @Override", "sourceBeforeFix": "assertMockEndpointsSatisfied()", "sourceAfterFix": "assertMockEndpointsSatisfied(30,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "320421c66bab7fc9670e766769c4a9ec60063fe8", "projectName": "neo4j.neo4j", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void makeSureStoreCantBeUpgradedByBatchInserterEvenIfExplicitlyToldTo() throws Exception\n     {\n        String path = path( 11 );\n         new EmbeddedGraphDatabase( path ).shutdown();\n         setOlderNeoStoreVersion( path );", "fixed": "     @Test\n     public void makeSureStoreCantBeUpgradedByBatchInserterEvenIfExplicitlyToldTo() throws Exception\n     {\n        String path = path( 14 );\n         new EmbeddedGraphDatabase( path ).shutdown();\n         setOlderNeoStoreVersion( path );", "sourceBeforeFix": "path(11)", "sourceAfterFix": "path(14)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Web3jEndpointBuilder\n             extends\n                 Web3jEndpointConsumerBuilder, Web3jEndpointProducerBuilder {\n         default AdvancedWeb3jEndpointBuilder advanced() {", "fixed": "     \n    public interface Web3jEndpointBuilder\n             extends\n                 Web3jEndpointConsumerBuilder, Web3jEndpointProducerBuilder {\n         default AdvancedWeb3jEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "6190e5a019d5009864d47bf4b08ceef4ac52cf91", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n    Assert.assertEquals(0, mTestStream.getBytesFlushed());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n   }\n }", "fixed": "   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n    Assert.assertEquals(0, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n   }\n }", "sourceBeforeFix": "mTestStream.getBytesFlushed()", "sourceAfterFix": "mTestStream.getFlushedBytes()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "             break;\n           }\n           switch (schemeField.id) {\ncase -1:\n               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                 struct.rqst = new WriteNotificationLogRequest();\n                 struct.rqst.read(iprot);", "fixed": "             break;\n           }\n           switch (schemeField.id) {\ncase 1:\n               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                 struct.rqst = new WriteNotificationLogRequest();\n                 struct.rqst.read(iprot);", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tfactory.setContextLifecycleListeners(Arrays.asList(listeners[0], listeners[1]));\n \t\tfactory.addContextLifecycleListeners(listeners[2], listeners[3]);\n\t\tthis.container = factory.getEmbdeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) listeners);\n \t\tfor (LifecycleListener listener : listeners) {\n \t\t\tordered.verify(listener).lifecycleEvent((LifecycleEvent) anyObject());", "fixed": " \t\t}\n \t\tfactory.setContextLifecycleListeners(Arrays.asList(listeners[0], listeners[1]));\n \t\tfactory.addContextLifecycleListeners(listeners[2], listeners[3]);\n\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) listeners);\n \t\tfor (LifecycleListener listener : listeners) {\n \t\t\tordered.verify(listener).lifecycleEvent((LifecycleEvent) anyObject());", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 15807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "fixed": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 10807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "sourceBeforeFix": "id=15803", "sourceAfterFix": "id=10803"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8a8c325f6ecf37bd569b14019ef7a212fe830269", "projectName": "wildfly.wildfly", "bugType": "Change Boolean Literal", "problem": "     public static final SimpleAttributeDefinition ALIAS = new SimpleAttributeDefinitionBuilder(ModelDescriptionConstants.ALIAS,\n             ModelType.STRING, true).setXmlName(ModelDescriptionConstants.ALIAS)\n            .setValidator(new StringLengthValidator(1, Integer.MAX_VALUE, true, true))\n             .setFlags(AttributeAccess.Flag.RESTART_RESOURCE_SERVICES).build();\n     public static final SimpleAttributeDefinition KEY_PASSWORD = new SimpleAttributeDefinitionBuilder(", "fixed": "     public static final SimpleAttributeDefinition ALIAS = new SimpleAttributeDefinitionBuilder(ModelDescriptionConstants.ALIAS,\n             ModelType.STRING, true).setXmlName(ModelDescriptionConstants.ALIAS)\n            .setValidator(new StringLengthValidator(1, Integer.MAX_VALUE, true, false))\n             .setFlags(AttributeAccess.Flag.RESTART_RESOURCE_SERVICES).build();\n     public static final SimpleAttributeDefinition KEY_PASSWORD = new SimpleAttributeDefinitionBuilder(", "sourceBeforeFix": "new StringLengthValidator(1,Integer.MAX_VALUE,true,true)", "sourceAfterFix": "new StringLengthValidator(1,Integer.MAX_VALUE,true,false)"}
{"fixCommitSHA1": "3d7e389a85a9c316be6d15754edda832d789e25a", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         try {\n             pathHandler.addPrefixPath(ErrorContextHandler.ERROR_CONTEXT, ErrorContextHandler.createErrorContext(consoleSlot));\n         } catch (ModuleLoadException e) {\n            ROOT_LOGGER.error(consoleSlot == null ? \"main\" : consoleSlot);\n         }\n         ManagementRootConsoleRedirectHandler rootConsoleRedirectHandler = new ManagementRootConsoleRedirectHandler(consoleHandler);", "fixed": "         try {\n             pathHandler.addPrefixPath(ErrorContextHandler.ERROR_CONTEXT, ErrorContextHandler.createErrorContext(consoleSlot));\n         } catch (ModuleLoadException e) {\n            ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? \"main\" : consoleSlot);\n         }\n         ManagementRootConsoleRedirectHandler rootConsoleRedirectHandler = new ManagementRootConsoleRedirectHandler(consoleHandler);", "sourceBeforeFix": "ROOT_LOGGER.error(consoleSlot == null ? \"main\" : consoleSlot)", "sourceAfterFix": "ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? \"main\" : consoleSlot)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "92f8bef51dfa0a81f9bfd88b9790cb04de0eb413", "projectName": "stanfordnlp.CoreNLP", "bugType": "Same Function More Args", "problem": "   }\n   private static final Pattern sgml = Pattern.compile(\"<[^>]*>\");\n  private final WordToSentenceProcessor<IN> wts = new WordToSentenceProcessor<IN>();\nprivate SeqClassifierFlags flags;\n   private TokenizerFactory<IN> tokenizerFactory;", "fixed": "   }\n   private static final Pattern sgml = Pattern.compile(\"<[^>]*>\");\n  private final WordToSentenceProcessor<IN> wts = new WordToSentenceProcessor<IN>(WordToSentenceProcessor.NewlineIsSentenceBreak.ALWAYS);\nprivate SeqClassifierFlags flags;\n   private TokenizerFactory<IN> tokenizerFactory;", "sourceBeforeFix": "new WordToSentenceProcessor<IN>()", "sourceAfterFix": "new WordToSentenceProcessor<IN>(WordToSentenceProcessor.NewlineIsSentenceBreak.ALWAYS)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "ea3eb38533e342e381416cf0ac0ced45cfb28c92", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Numeric Literal", "problem": "       HikariConfig config = new HikariConfig();\n       config.setDataSourceClassName(\"com.zaxxer.hikari.mocks.StubDataSource\");\n      config.setIdleTimeout(TimeUnit.SECONDS.toMillis(25));\n       config.validate();\n      Assert.assertTrue(new String(baos.toByteArray()).contains(\"less than 30000ms\"));\n    }\n    @Test", "fixed": "       HikariConfig config = new HikariConfig();\n       config.setDataSourceClassName(\"com.zaxxer.hikari.mocks.StubDataSource\");\n      config.setIdleTimeout(TimeUnit.SECONDS.toMillis(5));\n       config.validate();\n      Assert.assertTrue(new String(baos.toByteArray()).contains(\"less than 10000ms\"));\n    }\n    @Test", "sourceBeforeFix": "TimeUnit.SECONDS.toMillis(25)", "sourceAfterFix": "TimeUnit.SECONDS.toMillis(5)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f48ebce5cdf47682dc74bcf51581b88527e5f92", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             nodeState.fromJson(jsonNodeState);\n         }\n         JsonObject jsonHotRestartState = getObject(json, \"hotRestartState\", null);\n        if (hotRestartState != null) {\n             hotRestartState = new HotRestartStateImpl();\n             hotRestartState.fromJson(jsonHotRestartState);\n         }", "fixed": "             nodeState.fromJson(jsonNodeState);\n         }\n         JsonObject jsonHotRestartState = getObject(json, \"hotRestartState\", null);\n        if (jsonHotRestartState != null) {\n             hotRestartState = new HotRestartStateImpl();\n             hotRestartState.fromJson(jsonHotRestartState);\n         }", "sourceBeforeFix": "hotRestartState != null", "sourceAfterFix": "jsonHotRestartState != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bf71d079f373a5f8761acb186472f89259612b5d", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n        Key.get(NoopChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)", "fixed": "         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)", "sourceBeforeFix": "NoopChatHandlerProvider.class", "sourceAfterFix": "ServiceAnnouncingChatHandlerProvider.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cea7f4acbe4f286cbb031efa816f9e881278fdc3", "projectName": "checkstyle.checkstyle", "bugType": "Delete Throws Exception", "problem": "     private final PkgControl pcCommon = new PkgControl(pcRoot, \"common\");\n     @Before\n    public void setUp() throws Exception {\n         pcRoot.addGuard(new Guard(false, false, \".*\\\\.(spring|lui)framework\", false, true));\n         pcRoot.addGuard(new Guard(false, false, \"org\\\\.hibernate\", false, true));\n         pcRoot.addGuard(new Guard(true, false, \"org\\\\.(apache|lui)\\\\.commons\", false, true));", "fixed": "     private final PkgControl pcCommon = new PkgControl(pcRoot, \"common\");\n     @Before\n    public void setUp() {\n         pcRoot.addGuard(new Guard(false, false, \".*\\\\.(spring|lui)framework\", false, true));\n         pcRoot.addGuard(new Guard(false, false, \"org\\\\.hibernate\", false, true));\n         pcRoot.addGuard(new Guard(true, false, \"org\\\\.(apache|lui)\\\\.commons\", false, true));", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "9a7cd4fedbaa2cf02c3cb37e2618ad72409e4745", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertEquals(10, events.size());\n     }\n     @Override", "fixed": "         context.stop();\n         List<MessagePayload> events = nagios.getMessagePayloadList();\n        assertEquals(11, events.size());\n     }\n     @Override", "sourceBeforeFix": "assertEquals(10,events.size())", "sourceAfterFix": "assertEquals(11,events.size())"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJettyHttpEndpointBuilder9\n             extends\n                 EndpointConsumerBuilder {\n         default JettyHttpEndpointBuilder9 basic() {", "fixed": "     \n    public interface AdvancedJettyHttpEndpointBuilder9\n             extends\n                 EndpointConsumerBuilder {\n         default JettyHttpEndpointBuilder9 basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CometdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCometdEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CometdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCometdEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "49736ff78d46cf4aae5a621f887c09b18d10ddf6", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @throws InvocationTargetException\n \t * @throws IllegalAccessException\n \t */\n\tpublic void copy(Allergy allergy) throws InvocationTargetException, IllegalAccessException {\n \t\tsetAllergyId(null);\n \t\tsetUuid(UUID.randomUUID().toString());\n \t\tsetPatient(allergy.getPatient());", "fixed": " \t * @throws InvocationTargetException\n \t * @throws IllegalAccessException\n \t */\n\tpublic void copy(Allergy allergy) {\n \t\tsetAllergyId(null);\n \t\tsetUuid(UUID.randomUUID().toString());\n \t\tsetPatient(allergy.getPatient());", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "aebe2ca06a3fb220c7211b174c85250f36afae25", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "71775a876d1b049c7dfc49ffd35eff0d3f066691", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "      *\n      * @param folder the location\n      */\n    public static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!externalStaticResourcesSet) {", "fixed": "      *\n      * @param folder the location\n      */\n    public synchronized static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!externalStaticResourcesSet) {", "sourceBeforeFix": "9", "sourceAfterFix": "41"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "6d74c7fe901c4279f977a5d9b9f76f833e31cdb6", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 1, SECONDS);\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 1, SECONDS);\n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;", "fixed": "     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 60, SECONDS);\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 30, SECONDS);\n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;", "sourceBeforeFix": "new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\",1,SECONDS)", "sourceAfterFix": "new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\",30,SECONDS)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   @Override\n   public void process(Node externs, Node root) {\n    logger.info(\"Aliasing common strings\");\n     NodeTraversal.traverse(compiler, root, this);", "fixed": "   @Override\n   public void process(Node externs, Node root) {\n    logger.fine(\"Aliasing common strings\");\n     NodeTraversal.traverse(compiler, root, this);", "sourceBeforeFix": "logger.info(sb.toString())", "sourceAfterFix": "logger.fine(sb.toString())"}
{"fixCommitSHA1": "d82c094be09d50811339a1d0524b3a2ad35ebefa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(1L))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "fixed": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(5000L))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "sourceBeforeFix": "new ModelNode().set(1L)", "sourceAfterFix": "new ModelNode().set(5000L)"}
{"fixCommitSHA1": "4a19c2c078ddf5484e0cb8c1ac075451f158fa40", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                            orderResult = 1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = -1;\n                             break;\n                     }\n                     break;", "fixed": "                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                            orderResult = -1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = 1;\n                             break;\n                     }\n                     break;", "sourceBeforeFix": "1", "sourceAfterFix": "-1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a3b9f6f1ebb21dd528effcceba2ac207f40b15e8", "projectName": "alibaba.canal", "bugType": "More Specific If", "problem": "     }\n     public static String unescapeQuotaName(String name) {\n        if (name.length() > 2) {\n             char c0 = name.charAt(0);\n             char x0 = name.charAt(name.length() - 1);\n             if (c0 == '\\'' && x0 == '\\'') {", "fixed": "     }\n     public static String unescapeQuotaName(String name) {\n        if (name != null && name.length() > 2) {\n             char c0 = name.charAt(0);\n             char x0 = name.charAt(name.length() - 1);\n             if (c0 == '\\'' && x0 == '\\'') {", "sourceBeforeFix": "name.length() > 2", "sourceAfterFix": "name != null && name.length() > 2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a96276ab5c62a694fd8cb0630aba97e903f1d719", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tcam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\r\n \t\tcam.position.set(bounds.getCenter().cpy().add(len, len, len));\r\n \t\tcam.lookAt(bounds.getCenter().x, bounds.getCenter().y, bounds.getCenter().z);\r\n\t\tcam.near = 0.1f;\r\n \t\tcam.far = 1000;\r\n \t\trenderer = new ImmediateModeRenderer10();\r", "fixed": " \t\tcam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\r\n \t\tcam.position.set(bounds.getCenter().cpy().add(len, len, len));\r\n \t\tcam.lookAt(bounds.getCenter().x, bounds.getCenter().y, bounds.getCenter().z);\r\n\t\tcam.near = 1f;\r\n \t\tcam.far = 1000;\r\n \t\trenderer = new ImmediateModeRenderer10();\r", "sourceBeforeFix": "cam.near=0.1f", "sourceAfterFix": "cam.near=1f"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KinesisFirehoseEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisFirehoseEndpointBuilder advanced() {", "fixed": "     \n    public interface KinesisFirehoseEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisFirehoseEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0940ca6f4588c99837f551bd1bdf64dec5392a45", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   public void testInvalidGoogBase14() {\n     testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",\n        GOOG_BASE_CLASS_ERROR);\n   }\n   public void testInvalidGoogBase14b() {\n     testError(\"class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }\",\n        GOOG_BASE_CLASS_ERROR);\n   }\n   public void testValidBase1() {", "fixed": "   public void testInvalidGoogBase14() {\n     testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",\n        BASE_CLASS_ERROR);\n   }\n   public void testInvalidGoogBase14b() {\n     testError(\"class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }\",\n        BASE_CLASS_ERROR);\n   }\n   public void testValidBase1() {", "sourceBeforeFix": "testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",GOOG_BASE_CLASS_ERROR)", "sourceAfterFix": "testError(\"class Foo extends BaseFoo { constructor() { Foo.base(this); } }\",BASE_CLASS_ERROR)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "9031a4c20455ba16a63233f10783a55915afcd9b", "projectName": "alibaba.dubbo", "bugType": "Change Unary Operator\t", "problem": "                                     jedis = jedisPool.getResource();\r\n                                     try {\r\n                                         if (service.endsWith(Constants.ANY_VALUE)) {\r\n                                            if (!first) {\r\n                                                 first = false;\r\n                                                 Set<String> keys = jedis.keys(service);\r\n                                                 if (CollectionUtils.isNotEmpty(keys)) {\r", "fixed": "                                     jedis = jedisPool.getResource();\r\n                                     try {\r\n                                         if (service.endsWith(Constants.ANY_VALUE)) {\r\n                                            if (first) {\r\n                                                 first = false;\r\n                                                 Set<String> keys = jedis.keys(service);\r\n                                                 if (CollectionUtils.isNotEmpty(keys)) {\r", "sourceBeforeFix": "!first", "sourceAfterFix": "first"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {", "fixed": " \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "        (!destToClusterby.isEmpty()))\n       return false;\n    Iterator<Map.Entry<String, HashMap<String, ASTNode>>> aggrIter = destToAggregationExprs.entrySet().iterator();\n     while (aggrIter.hasNext()) {\n       HashMap<String, ASTNode> h = aggrIter.next().getValue();\n       if ((h != null) && (!h.isEmpty()))", "fixed": "        (!destToClusterby.isEmpty()))\n       return false;\n    Iterator<Map.Entry<String, LinkedHashMap<String, ASTNode>>> aggrIter = destToAggregationExprs.entrySet().iterator();\n     while (aggrIter.hasNext()) {\n       HashMap<String, ASTNode> h = aggrIter.next().getValue();\n       if ((h != null) && (!h.isEmpty()))", "sourceBeforeFix": "HashMap<String,ASTNode>", "sourceAfterFix": "LinkedHashMap<String,ASTNode>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "16e4cd4291c51fa1a2a9e3a189c8c57cd09d6901", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "                                 timeStart, new String[][]{}\n                             ),\n                             new IncrementalIndex.TimeAndDims(\n                                Math.min(actualInterval.getEndMillis(), gran.next(timeStart)), new String[][]{}\n                             )\n                         );\n                         time = gran.toDateTime(input);", "fixed": "                                 timeStart, new String[][]{}\n                             ),\n                             new IncrementalIndex.TimeAndDims(\n                                Math.min(actualInterval.getEndMillis(), gran.next(input)), new String[][]{}\n                             )\n                         );\n                         time = gran.toDateTime(input);", "sourceBeforeFix": "gran.next(timeStart)", "sourceAfterFix": "gran.next(input)"}
{"fixCommitSHA1": "f18d4ef8d7698f6940c72c8c64a923fd9faac418", "projectName": "neo4j.neo4j", "bugType": "Same Function More Args", "problem": "     private String config( TargetDirectory target, int id, int port )\n     {\n         File config = target.file( \"zookeeper\" + id + \".cfg\" );\n        File dataDir = target.directory( \"zk\" + id + \"data\" );\n         try\n         {\n             PrintWriter conf = new PrintWriter( config );", "fixed": "     private String config( TargetDirectory target, int id, int port )\n     {\n         File config = target.file( \"zookeeper\" + id + \".cfg\" );\n        File dataDir = target.directory( \"zk\" + id + \"data\", true );\n         try\n         {\n             PrintWriter conf = new PrintWriter( config );", "sourceBeforeFix": "target.directory(\"zk\" + id + \"data\")", "sourceAfterFix": "target.directory(\"zk\" + id + \"data\",true)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SpringBatchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringBatchEndpointBuilder advanced() {", "fixed": "     \n    public interface SpringBatchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringBatchEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tNSString value = (NSString)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "fixed": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tObject value = nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "sourceBeforeFix": "NSNumber.numberWithLong(val)", "sourceAfterFix": "NSNumber.numberWithLongLong(val)"}
{"fixCommitSHA1": "3b0e5ccc430c5ae4187e6139535c32cc17bb2a2b", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                     formatDataRate(globalExecutionStats.getOutputDataSize(), elapsedTime, false),\n                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),\n                    max(0, globalExecutionStats.getSplits() - globalExecutionStats.getCompletedSplits()),\n                     globalExecutionStats.getCompletedSplits());\n             reprintLine(querySummary);\n         }", "fixed": "                     formatDataRate(globalExecutionStats.getOutputDataSize(), elapsedTime, false),\n                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),\n                    max(0, globalExecutionStats.getStartedSplits() - globalExecutionStats.getCompletedSplits()),\n                     globalExecutionStats.getCompletedSplits());\n             reprintLine(querySummary);\n         }", "sourceBeforeFix": "executionStats.getSplits()", "sourceAfterFix": "executionStats.getStartedSplits()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f1a7ba261addf3aa2610546d76cdea5ddfd14574", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \tpublic void validate_shouldFailValidationIfBirthdateMakesPatient120YearsOldOrOlder() throws Exception {\r\n \t\tPatient p = ps.getPatient(2);\r\n \t\tCalendar c = Calendar.getInstance();\r\n\t\tc.roll(Calendar.YEAR, -120);\r\n \t\tp.setBirthdate(c.getTime());\r\n \t\tShortPatientModel model = new ShortPatientModel(p);\r\n \t\tErrors errors = new BindException(model, \"patientModel\");\r", "fixed": " \tpublic void validate_shouldFailValidationIfBirthdateMakesPatient120YearsOldOrOlder() throws Exception {\r\n \t\tPatient p = ps.getPatient(2);\r\n \t\tCalendar c = Calendar.getInstance();\r\n\t\tc.roll(Calendar.YEAR, -121);\r\n \t\tp.setBirthdate(c.getTime());\r\n \t\tShortPatientModel model = new ShortPatientModel(p);\r\n \t\tErrors errors = new BindException(model, \"patientModel\");\r", "sourceBeforeFix": "-120", "sourceAfterFix": "-121"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleSheetsEndpointBuilder\n             extends\n                 GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleSheetsEndpointBuilder\n             extends\n                 GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EhcacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEhcacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface EhcacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEhcacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSalesforceEndpointBuilder\n             extends\n                 AdvancedSalesforceEndpointConsumerBuilder, AdvancedSalesforceEndpointProducerBuilder {\n         default SalesforceEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSalesforceEndpointBuilder\n             extends\n                 AdvancedSalesforceEndpointConsumerBuilder, AdvancedSalesforceEndpointProducerBuilder {\n         default SalesforceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e3c87cba0bbed00c739e01599e29a5621c9ef3b3", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \t}", "fixed": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.responder());\n \t\t}\n \t}", "sourceBeforeFix": "rSocketMessageHandler.serverResponder()", "sourceAfterFix": "rSocketMessageHandler.responder()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKinesisFirehoseEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KinesisFirehoseEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKinesisFirehoseEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KinesisFirehoseEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWebhookEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default WebhookEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWebhookEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default WebhookEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e6c1586717135f4d22f0a03177a1b7b994d5da95", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n\t\t\treturn Outcome.match(\"missing database driver \" + driverClassName);\n \t\t}\n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {", "fixed": " \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n\t\t\treturn Outcome.noMatch(\"missing database driver \" + driverClassName);\n \t\t}\n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {", "sourceBeforeFix": "Outcome.match(\"missing database driver \" + driverClassName)", "sourceAfterFix": "Outcome.noMatch(\"missing database driver \" + driverClassName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic void copyTo(T from, T to);", "fixed": " \t * @param from The element to be copied.\n \t * @param to The target element.\n \t */\n\tpublic abstract void copyTo(T from, T to);", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "376e6647bb5cb36b5dd37d303a5ad7fb1460daa0", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tcollisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);\n \t\tcollisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);\n\t\tcollisionCenter.set(collisionPoints.get(2)).scl(0.5f).add(collisionPoints.get(0));\n \t\tvelocity.scl( (float) Math.pow(0.97f, delta * 30.f));\n \t\tposition.add(velocity.x * delta, velocity.y * delta);", "fixed": " \t\tcollisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);\n \t\tcollisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);\n\t\tcollisionCenter.set(collisionPoints.get(0)).add(collisionPoints.get(2)).scl(0.5f);\n \t\tvelocity.scl( (float) Math.pow(0.97f, delta * 30.f));\n \t\tposition.add(velocity.x * delta, velocity.y * delta);", "sourceBeforeFix": "collisionPoints.get(2)", "sourceAfterFix": "collisionPoints.get(0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f6aca222e49ea1564ecb123485fdd75037028cb", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t\tprivate final DataSource dataSource;\n\t\tpublic LocationResolver(DataSource dataSource) {\n \t\t\tthis.dataSource = dataSource;\n \t\t}", "fixed": " \t\tprivate final DataSource dataSource;\n\t\tLocationResolver(DataSource dataSource) {\n \t\t\tthis.dataSource = dataSource;\n \t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "     }\n     public static String getJavadocTokenText(int[] tokens, int... subtractions) {\n        final StringBuilder result = new StringBuilder();\n         boolean first = true;\n         for (int token : tokens) {", "fixed": "     }\n     public static String getJavadocTokenText(int[] tokens, int... subtractions) {\n        final StringBuilder result = new StringBuilder(50);\n         boolean first = true;\n         for (int token : tokens) {", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(50)"}
{"fixCommitSHA1": "8777c0882b68f70d662d21b862b0db35cf50826d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "      * @param entryValues The number of entries in the array.\n      * @return The entry object.\n      */\n    private Entry decodeEntry(int[] vals, int entryValues) {\n       Entry entry;\n       switch (entryValues) {", "fixed": "      * @param entryValues The number of entries in the array.\n      * @return The entry object.\n      */\n    private Entry decodeEntry(int[] vals, int entryValues) throws SourceMapParseException {\n       Entry entry;\n       switch (entryValues) {", "sourceBeforeFix": "new IllegalStateException(\"Unexpected number of values for entry:\" + entryValues)", "sourceAfterFix": "new SourceMapParseException(\"Unexpected number of values for entry:\" + entryValues)"}
{"fixCommitSHA1": "0a5f26324cfe4eb39eb48947f11364ec39221fa6", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     CallRunner task = createMockTask();\n     task.setStatus(new MonitoredRPCHandlerImpl());\n     scheduler.dispatch(task);\n    verify(task, timeout(1000)).run();\n     scheduler.stop();\n   }", "fixed": "     CallRunner task = createMockTask();\n     task.setStatus(new MonitoredRPCHandlerImpl());\n     scheduler.dispatch(task);\n    verify(task, timeout(10000)).run();\n     scheduler.stop();\n   }", "sourceBeforeFix": "timeout(1000)", "sourceAfterFix": "timeout(10000)"}
{"fixCommitSHA1": "098119281bf9b903d71a333a0d2bcf087282bbf8", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "    * TODO: pass this in rather than create it here if we wind up using\n    * this in more place.  Right now it's only used in testOnTreebank.\n    */\n  protected Function<List<? extends HasWord>, ArrayList<TaggedWord>> tagger;\n   public EvaluateTreebank(LexicalizedParser parser) {\n     this(parser.getOp(), parser.lex, parser);", "fixed": "    * TODO: pass this in rather than create it here if we wind up using\n    * this in more place.  Right now it's only used in testOnTreebank.\n    */\n  protected Function<List<? extends HasWord>, List<TaggedWord>> tagger;\n   public EvaluateTreebank(LexicalizedParser parser) {\n     this(parser.getOp(), parser.lex, parser);", "sourceBeforeFix": "ArrayList<TaggedWord>", "sourceAfterFix": "List<TaggedWord>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": "  *\n  * <p>The stream is bounded and will complete after about a minute.\n  * The result is always constant.\n * The job is killed on the first attemped and restarted.\n  *\n  * <p>Parameters:\n  * -outputPath Sets the path to where the result data is written.", "fixed": "  *\n  * <p>The stream is bounded and will complete after about a minute.\n  * The result is always constant.\n * The job is killed on the first attempt and restarted.\n  *\n  * <p>Parameters:\n  * -outputPath Sets the path to where the result data is written.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SshEndpointBuilder\n             extends\n                 SshEndpointConsumerBuilder, SshEndpointProducerBuilder {\n         default AdvancedSshEndpointBuilder advanced() {", "fixed": "     \n    public interface SshEndpointBuilder\n             extends\n                 SshEndpointConsumerBuilder, SshEndpointProducerBuilder {\n         default AdvancedSshEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6e44c2ab7f925356eebe85a007e5d89d2880fef2", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n      DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");", "fixed": "       DiagnosticType.disabled(\"JSC_JSDOC_MISSING_TYPE_WARNING\", \"{0}\");\n   static final DiagnosticType TOO_MANY_TEMPLATE_PARAMS =\n      DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\", \"{0}\");", "sourceBeforeFix": "DiagnosticType.disabled(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")", "sourceAfterFix": "DiagnosticType.error(\"JSC_TOO_MANY_TEMPLATE_PARAMS\",\"{0}\")"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "     return list;\n   }\n  protected void setProperties(Properties props) {\n     super.setProperties(props);\n   }", "fixed": "     return list;\n   }\n  @InterfaceAudience.Private\n  public void setProperties(Properties props) {\n     super.setProperties(props);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesPodsEndpointBuilder\n             extends\n                 KubernetesPodsEndpointConsumerBuilder, KubernetesPodsEndpointProducerBuilder {\n         default AdvancedKubernetesPodsEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesPodsEndpointBuilder\n             extends\n                 KubernetesPodsEndpointConsumerBuilder, KubernetesPodsEndpointProducerBuilder {\n         default AdvancedKubernetesPodsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\trpcEndpoint.shutDown();\n\t\tCompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\ttry {\n \t\t\tterminationFuture.get();", "fixed": " \t\trpcEndpoint.shutDown();\n\t\tCompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\ttry {\n \t\t\tterminationFuture.get();", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "378e87f1e3bf8b2451ca511668954b707680b843", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\nclass LocalizedMessage\n     implements Comparable\n {\n     ", "fixed": "  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\npublic class LocalizedMessage\n     implements Comparable\n {\n     ", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e4ce636e7fd9b892e3a696366c1981d3fae46ab4", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint mock = context.getEndpoint(\"mock:result\", MockEndpoint.class);\n        mock.expectedMessageCount(2);", "fixed": "         MockEndpoint mock = context.getEndpoint(\"mock:result\", MockEndpoint.class);\n        mock.expectedMinimumMessageCount(2);", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "a7ea864d23e4b47cef8056a446ea4e7344c62ee7", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         DatagramSocket socket = new DatagramSocket();\n         try {\n            InetAddress address = InetAddress.getByName(\"127.0.0.1\");\n             for (int i = 0; i < messageCount; i++) {\n                 byte[] data = message.getBytes();", "fixed": "         DatagramSocket socket = new DatagramSocket();\n         try {\n            InetAddress address = InetAddress.getByName(\"localhost\");\n             for (int i = 0; i < messageCount; i++) {\n                 byte[] data = message.getBytes();", "sourceBeforeFix": "AvailablePortFinder.getNextAvailable()", "sourceAfterFix": "AvailablePortFinder.getNextAvailable(4000)"}
{"fixCommitSHA1": "9338e13c38d7b70e1a919c650ebea63f6f42beff", "projectName": "code4craft.webmagic", "bugType": "Change Identifier Used", "problem": "     public String select(String text) {\n         Document doc = Jsoup.parse(text);\n         Elements elements = doc.select(selectorText);\n        if (CollectionUtils.isNotEmpty(elements)) {\n             return null;\n         }\n         return elements.get(0).outerHtml();", "fixed": "     public String select(String text) {\n         Document doc = Jsoup.parse(text);\n         Elements elements = doc.select(selectorText);\n        if (CollectionUtils.isEmpty(elements)) {\n             return null;\n         }\n         return elements.get(0).outerHtml();", "sourceBeforeFix": "CollectionUtils.isNotEmpty(elements)", "sourceAfterFix": "CollectionUtils.isEmpty(elements)"}
{"fixCommitSHA1": "bf0147af96c7a48511e897e106c1d5885194c1d7", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE1\");\n        assertTrue(timeoutLatch.await(1200, TimeUnit.MILLISECONDS));\n         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE2\");\n         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE3\");\n        assertTrue(completionLatch.await(1200, TimeUnit.MILLISECONDS));\n         getMockEndpoint(\"mock:result.timeoutAndCompletionAware\").getReceivedExchanges();\n         assertMockEndpointsSatisfied();", "fixed": "         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE1\");\n        assertTrue(timeoutLatch.await(2500, TimeUnit.MILLISECONDS));\n         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE2\");\n         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE3\");\n        assertTrue(completionLatch.await(2500, TimeUnit.MILLISECONDS));\n         getMockEndpoint(\"mock:result.timeoutAndCompletionAware\").getReceivedExchanges();\n         assertMockEndpointsSatisfied();", "sourceBeforeFix": "timeoutLatch.await(1200,TimeUnit.MILLISECONDS)", "sourceAfterFix": "timeoutLatch.await(2500,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BeanstalkEndpointBuilder\n             extends\n                 BeanstalkEndpointConsumerBuilder, BeanstalkEndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointBuilder advanced() {", "fixed": "     \n    public interface BeanstalkEndpointBuilder\n             extends\n                 BeanstalkEndpointConsumerBuilder, BeanstalkEndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "fixed": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "sourceBeforeFix": "id=15806", "sourceAfterFix": "id=10806"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bf50ea13662770de9f2a6546fa2cd40e83ba1aee", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "         config.processOpts();\n         config.preprocessSwagger(swagger);\n         config.additionalProperties().put(\"generatedDate\", DateTime.now().toString());\n        config.additionalProperties().put(\"generatorClass\", config.getClass().toString());\n         config.additionalProperties().put(\"inputSpec\", config.getInputSpec());\n         if (swagger.getVendorExtensions() != null) {\n             config.vendorExtensions().putAll(swagger.getVendorExtensions());", "fixed": "         config.processOpts();\n         config.preprocessSwagger(swagger);\n         config.additionalProperties().put(\"generatedDate\", DateTime.now().toString());\n        config.additionalProperties().put(\"generatorClass\", config.getClass().getName());\n         config.additionalProperties().put(\"inputSpec\", config.getInputSpec());\n         if (swagger.getVendorExtensions() != null) {\n             config.vendorExtensions().putAll(swagger.getVendorExtensions());", "sourceBeforeFix": "config.getClass().toString()", "sourceAfterFix": "config.getClass().getName()"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     CLIENT.user_deleteById(fileId);\n   }\n  public ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "fixed": "     CLIENT.user_deleteById(fileId);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "fixed": "             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7012976421d9e593d8b276697b2fbbc9328b6fa5", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> prefSize (float width, float height) {\n\t\tprefSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> prefSize (float width, float height) {\n\t\tprefSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "prefSize(new Fixed(width))", "sourceAfterFix": "prefSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     public static JavadocTagInfo fromText(final String text)\n     {\n         if (text == null) {\n            throw new NullPointerException(\"the text is null\");\n         }\n         final JavadocTagInfo tag = TEXT_TO_TAG.get(text);", "fixed": "     public static JavadocTagInfo fromText(final String text)\n     {\n         if (text == null) {\n            throw new IllegalArgumentException(\"the text is null\");\n         }\n         final JavadocTagInfo tag = TEXT_TO_TAG.get(text);", "sourceBeforeFix": "new NullPointerException(\"the text is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the text is null\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "022423e200ae95a00393c3e4551a1985705795d8", "projectName": "druid-io.druid", "bugType": "Change Caller in Function Call", "problem": "               for (ComplexColumn complexColumn : complexColumnCache.values()) {\n                 Closeables.closeQuietly(complexColumn);\n               }\n              for (Object column : complexColumnCache.values()) {\n                 if (column instanceof Closeable) {\n                   Closeables.closeQuietly((Closeable) column);\n                 }", "fixed": "               for (ComplexColumn complexColumn : complexColumnCache.values()) {\n                 Closeables.closeQuietly(complexColumn);\n               }\n              for (Object column : objectColumnCache.values()) {\n                 if (column instanceof Closeable) {\n                   Closeables.closeQuietly((Closeable) column);\n                 }", "sourceBeforeFix": "complexColumnCache.values()", "sourceAfterFix": "objectColumnCache.values()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMyBatisBeanEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MyBatisBeanEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMyBatisBeanEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MyBatisBeanEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "7012976421d9e593d8b276697b2fbbc9328b6fa5", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> minSize (float width, float height) {\n\t\tminSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> minSize (float width, float height) {\n\t\tminSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "maxSize(new Fixed(width))", "sourceAfterFix": "maxSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "88ab3f29c17cb38e01cfa655876b7627558c6de1", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "         Node rhsValue = ref.getNext();\n         Node newName = IR.name(moduleName).srcref(ref);\n        newName.putProp(Node.ORIGINALNAME_PROP, rhsValue);\n         Node parent = ref.getParent();\n         parent.replaceChild(ref, newName);", "fixed": "         Node rhsValue = ref.getNext();\n         Node newName = IR.name(moduleName).srcref(ref);\n        newName.putProp(Node.ORIGINALNAME_PROP, qName);\n         Node parent = ref.getParent();\n         parent.replaceChild(ref, newName);", "sourceBeforeFix": "newName.putProp(Node.ORIGINALNAME_PROP,rhsValue)", "sourceAfterFix": "newName.putProp(Node.ORIGINALNAME_PROP,qName)"}
{"fixCommitSHA1": "69b950bf50cc482a7bac2631a0d4d5afae964a94", "projectName": "swagger-api.swagger-core", "bugType": "Same Function More Args", "problem": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "fixed": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\", \"java.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\", \"java.time.LocalDateTime\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "sourceBeforeFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\")", "sourceAfterFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\",\"java.time.LocalDate\")"}
{"fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\tif (conceptToValidate.getConceptId() != null\r\n\t\t\t\t\t\t\t\t        && conceptToValidate.getConceptId().equals(concept.getConceptId()))\r\n \t\t\t\t\t\t\t\t\tcontinue;\r", "fixed": " \t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\tif (conceptToValidate.getUuid() != null\r\n\t\t\t\t\t\t\t\t        && conceptToValidate.getUuid().equals(concept.getUuid()))\r\n \t\t\t\t\t\t\t\t\tcontinue;\r", "sourceBeforeFix": "conceptToValidate.getConceptId()", "sourceAfterFix": "conceptToValidate.getUuid()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: failed\");\n   }\n }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: failed\")"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "3dc118f61cd547d7679d562fc8038c59372795af", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                     if (oldObject == null) {\n                         return Boolean.FALSE;\n                     } else {\n                        if (expectedValue.equals(oldValue)) {\n                             txn.attachPutOp(name, key, toData(newValue), false);\n                             return Boolean.TRUE;\n                         } else {", "fixed": "                     if (oldObject == null) {\n                         return Boolean.FALSE;\n                     } else {\n                        if (expectedValue.equals(oldObject)) {\n                             txn.attachPutOp(name, key, toData(newValue), false);\n                             return Boolean.TRUE;\n                         } else {", "sourceBeforeFix": "expectedValue.equals(oldValue)", "sourceAfterFix": "expectedValue.equals(oldObject)"}
{"fixCommitSHA1": "2ead92b6588f9d07196630db46d350636fe40efd", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t@Override\n \t\tpublic void run() {\n\t\t\tlogger.debug(getName() + \" has been started\");\n \t\t\twhile (!shutdown) {\n \t\t\t\ttry {", "fixed": " \t\t@Override\n \t\tpublic void run() {\n\t\t\tlogger.info(getName() + \" has been started\");\n \t\t\twhile (!shutdown) {\n \t\t\t\ttry {", "sourceBeforeFix": "logger.debug(getName() + \" has been started\")", "sourceAfterFix": "logger.info(getName() + \" has been started\")"}
{"fixCommitSHA1": "b366b2fb1840d4df542a69a8021a2e5498f7eec2", "projectName": "google.guava", "bugType": "Same Function Swap Args", "problem": "     assertEquals(service.runException, service.failureCause());\n    assertEquals(service.state(), Service.State.FAILED);\n   }\n   public void testFailOnExceptionFromStartUp() {", "fixed": "     assertEquals(service.runException, service.failureCause());\n    assertEquals(Service.State.FAILED, service.state());\n   }\n   public void testFailOnExceptionFromStartUp() {", "sourceBeforeFix": "assertEquals(service.state(),Service.State.FAILED)", "sourceAfterFix": "assertEquals(Service.State.FAILED,service.state())"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CaffeineCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCaffeineCacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CaffeineCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCaffeineCacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9bcf32ab62047ea4913d9cde9f9e73e7acbfcda6", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         assertEquals(usedTimestamp, (Double) lm.getField(\"timestamp\"), 1e-8);\n         assertEquals(\"\u00fc\", lm.getField(\"_lol_utf8\"));\n         assertEquals(\"bar\", lm.getField(\"_foo\"));\n        assertEquals(13, lm.getFields().size());\n     }\n     @Test", "fixed": "         assertEquals(usedTimestamp, (Double) lm.getField(\"timestamp\"), 1e-8);\n         assertEquals(\"\u00fc\", lm.getField(\"_lol_utf8\"));\n         assertEquals(\"bar\", lm.getField(\"_foo\"));\n        assertEquals(11, lm.getFields().size());\n     }\n     @Test", "sourceBeforeFix": "assertEquals(13,lm.getFields().size())", "sourceAfterFix": "assertEquals(11,lm.getFields().size())"}
{"fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "fixed": "         }\n         \n        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "fixed": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "f678fbc96b5c2efeb7c4b93a4d5cfd62b053029b", "projectName": "alibaba.druid", "bugType": "Change Numeric Literal", "problem": "         assertEquals(5, visitor.getTables().size());\n         assertEquals(24, visitor.getColumns().size());\n        assertEquals(11, visitor.getConditions().size());\n         assertEquals(4, visitor.getRelationships().size());\n         assertEquals(1, visitor.getOrderByColumns().size());\n     }", "fixed": "         assertEquals(5, visitor.getTables().size());\n         assertEquals(24, visitor.getColumns().size());\n        assertEquals(12, visitor.getConditions().size());\n         assertEquals(4, visitor.getRelationships().size());\n         assertEquals(1, visitor.getOrderByColumns().size());\n     }", "sourceBeforeFix": "assertEquals(11,visitor.getConditions().size())", "sourceAfterFix": "assertEquals(12,visitor.getConditions().size())"}
{"fixCommitSHA1": "fc80cf0f323b8f45dd7e80f5a4cc814ae6d691a7", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mover.move(\n         sourceSegment,", "fixed": "   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mover.move(\n         sourceSegment,", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SshEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSshEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SshEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSshEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6569d3735d3e5bc95a0bbe3302a8471d98bd4b11", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         if (data == null) {\n             return false;\n         }\n        final String[] strList = bytesToString(data).split(\"&\");\n         return authenticate(command, strList[0], strList.length > 1 ? strList[1] : null);\n     }", "fixed": "         if (data == null) {\n             return false;\n         }\n        final String[] strList = bytesToString(data).split(\"&\", -1);\n         return authenticate(command, strList[0], strList.length > 1 ? strList[1] : null);\n     }", "sourceBeforeFix": "bytesToString(data).split(\"&\")", "sourceAfterFix": "bytesToString(data).split(\"&\",-1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4ef7f28d367d8f2066871575ab6d2d985f8f8928", "projectName": "alibaba.dubbo", "bugType": "Change Modifier", "problem": "     public List<Invoker<T>> getInvokers(TreeNode<T> node, URL url, Invocation invocation) {\n        if (node.getChildren() == null || node.getChildren().size() == 0) {\n             return node.getInvokers();\n         }", "fixed": "     public List<Invoker<T>> getInvokers(TreeNode<T> node, URL url, Invocation invocation) {\n        if (node.isLeaf()) {\n             return node.getInvokers();\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "89eb2aff5a0094a018c4535d17caaaa1fb77c24e", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "       );\n       if (workerQueue.isEmpty()) {\n        log.info(\"Worker nodes %s do not have capacity to run any more tasks!\", zkWorkers.values());\n         return null;\n       }", "fixed": "       );\n       if (workerQueue.isEmpty()) {\n        log.debug(\"Worker nodes %s do not have capacity to run any more tasks!\", zkWorkers.values());\n         return null;\n       }", "sourceBeforeFix": "log.info(\"Worker nodes %s do not have capacity to run any more tasks!\",zkWorkers.values())", "sourceAfterFix": "log.debug(\"Worker nodes %s do not have capacity to run any more tasks!\",zkWorkers.values())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\telse\nmod.getActivator().shutdown();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}", "fixed": " \t\t\t\telse\nmod.getActivator().shutdown();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeInEdge(Object edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "fixed": "   }\n   @Override\n  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "addd22c9cfa473eecf99779227f1952d52ad7af5", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "fixed": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient)\n        .mount(alluxioPath, ufsPath, mountOptions);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "sourceBeforeFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath)", "sourceAfterFix": "Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "270185aba54cef1d8ce59ec347b5623f2e502afe", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = s.count();\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).doubleValue();", "fixed": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = RT.count(s);\n \t\tdouble[] ret = new double[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).doubleValue();", "sourceBeforeFix": "s.count()", "sourceAfterFix": "RT.count(s)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "72f919246228950fb80eee5c119292bed331633e", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "         try {\n             if (!isResumed.getAndSet(true) && isInScope.get()) {\n                 suspended.set(false);\n                logger.debug(\"AtmosphereResource {} is resuming\", uuid());\n                 action.type(Action.TYPE.RESUME);", "fixed": "         try {\n             if (!isResumed.getAndSet(true) && isInScope.get()) {\n                 suspended.set(false);\n                logger.trace(\"AtmosphereResource {} is resuming\", uuid());\n                 action.type(Action.TYPE.RESUME);", "sourceBeforeFix": "logger.debug(\"AtmosphereResource {} is resuming\",uuid())", "sourceAfterFix": "logger.trace(\"AtmosphereResource {} is resuming\",uuid())"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "fixed": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asJavaIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "sourceBeforeFix": "JavaConversions.asIterable(logManager.allLogs())", "sourceAfterFix": "JavaConversions.asJavaIterable(logManager.allLogs())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "02d326b888b3ce431468700ce32602c1b247bd91", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "       log.debug(\"Optimistic locking exception : \" + exception);\n     } else {\n      log.debug(\"Error while closing command context\", exception);\n     }\n   }", "fixed": "       log.debug(\"Optimistic locking exception : \" + exception);\n     } else {\n      log.error(\"Error while closing command context\", exception);\n     }\n   }", "sourceBeforeFix": "log.debug(\"Error while closing command context\",exception)", "sourceAfterFix": "log.error(\"Error while closing command context\",exception)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesHPAEndpointBuilder\n             extends\n                 AdvancedKubernetesHPAEndpointConsumerBuilder, AdvancedKubernetesHPAEndpointProducerBuilder {\n         default KubernetesHPAEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesHPAEndpointBuilder\n             extends\n                 AdvancedKubernetesHPAEndpointConsumerBuilder, AdvancedKubernetesHPAEndpointProducerBuilder {\n         default KubernetesHPAEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "4a6e698536006e6ea9b0680756d9390b96ba278b", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD) {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();\n                 if (streamTokenizer.ttype == '=') {", "fixed": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"') {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();\n                 if (streamTokenizer.ttype == '=') {", "sourceBeforeFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD", "sourceAfterFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"'"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "20d8ac67dc04e9e0c4484af769b156bcd75ef00b", "projectName": "alibaba.canal", "bugType": "Missing Throws Exception", "problem": "     private SocketChannel       channel;\r\n    public MysqlUpdateExecutor(MysqlConnector connector){\r\n         if (!connector.isConnected()) {\r\n            throw new RuntimeException(\"should execute connector.connect() first\");\r\n         }\r\n         this.channel = connector.getChannel();\r", "fixed": "     private SocketChannel       channel;\r\n    public MysqlUpdateExecutor(MysqlConnector connector) throws IOException{\r\n         if (!connector.isConnected()) {\r\n            throw new IOException(\"should execute connector.connect() first\");\r\n         }\r\n         this.channel = connector.getChannel();\r", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "dbcdd1231cf705bdb20e8296d53b52186eb8baed", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author Lars K\u00fchne\n  * @noinspection ThisEscapedInObjectConstruction\n  */\npublic class TreeTable extends JTable {\n     private static final long serialVersionUID = -8493693409423365387L;\n     ", "fixed": "  * @author Lars K\u00fchne\n  * @noinspection ThisEscapedInObjectConstruction\n  */\npublic final class TreeTable extends JTable {\n     private static final long serialVersionUID = -8493693409423365387L;\n     ", "sourceBeforeFix": "17", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bafb1f877934f826d5f74f9f33e824dd1aa30432", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return getOutputFactory().createXMLStreamWriter(result);\n     }\n    @Converter\n     public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLStreamReader(in);\n     }", "fixed": "         return getOutputFactory().createXMLStreamWriter(result);\n     }\n    @Deprecated\n     public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLStreamReader(in);\n     }", "sourceBeforeFix": "@Converter", "sourceAfterFix": "@Deprecated"}
{"fixCommitSHA1": "0a7300b42629c2eb700d2c4b5e39caa76f4d5305", "projectName": "Atmosphere.atmosphere", "bugType": "Change Boolean Literal", "problem": "             releaseExternalResources();\n             if (notifierFuture != null) {\n                notifierFuture.cancel(true);\n             }\n             if (asyncWriteFuture != null) {\n                asyncWriteFuture.cancel(true);\n             }\n             if (bc != null) {", "fixed": "             releaseExternalResources();\n             if (notifierFuture != null) {\n                notifierFuture.cancel(false);\n             }\n             if (asyncWriteFuture != null) {\n                asyncWriteFuture.cancel(false);\n             }\n             if (bc != null) {", "sourceBeforeFix": "notifierFuture.cancel(true)", "sourceAfterFix": "notifierFuture.cancel(false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.debug(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "fixed": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "   public Set<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "   public Set<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\t\tthis.jobManager.updateTaskExecutionState(new TaskExecutionState(jobID, id, newExecutionState,\n \t\t\t\t\toptionalDescription));\n \t\t\t} catch (IOException e) {\n\t\t\t\tLOG.error(StringUtils.stringifyException(e));\n \t\t\t}\n \t\t}\n \t}", "fixed": " \t\t\t\tthis.jobManager.updateTaskExecutionState(new TaskExecutionState(jobID, id, newExecutionState,\n \t\t\t\t\toptionalDescription));\n \t\t\t} catch (IOException e) {\n\t\t\t\tLOG.error(e);\n \t\t\t}\n \t\t}\n \t}", "sourceBeforeFix": "LOG.error(result.getDescription())", "sourceAfterFix": "LOG.error(result.getDescription(),t)"}
{"fixCommitSHA1": "5ac0dcd1b04e38a3dbe11a94897cc0a34ef2d5ec", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void log (String tag, String message);\r\n \t\r\n\tpublic void log (String tag, String message, Exception exception);\r\n \t\r\n \tpublic void error (String tag, String message);\r", "fixed": " \tpublic void log (String tag, String message);\r\n \t\r\n\tpublic void log (String tag, String message, Throwable exception);\r\n \t\r\n \tpublic void error (String tag, String message);\r", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocTypeWithBraces(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "fixed": "             for (CodegenProperty var : cm.vars) {\n                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n                 if (Boolean.TRUE.equals(var.required)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)", "sourceAfterFix": "getJSDocType(cm,var)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fbfd5fd9bb171b1ab5533822c1a201f6d12c6523", "projectName": "aws.aws-sdk-java", "bugType": "Change Identifier Used", "problem": "     public Item withJSON(String attrName, String json) {\n         checkInvalidAttribute(attrName, json);\n         attributes.put(attrName,\n            valueConformer.transform(Jackson.fromJsonString(json, Map.class)));\n         return this;\n     }", "fixed": "     public Item withJSON(String attrName, String json) {\n         checkInvalidAttribute(attrName, json);\n         attributes.put(attrName,\n            valueConformer.transform(Jackson.fromJsonString(json, Object.class)));\n         return this;\n     }", "sourceBeforeFix": "Map.class", "sourceAfterFix": "Object.class"}
{"fixCommitSHA1": "eeaea8a5dad98864dd80eab1ed34ddf7875c9ccb", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\r\n \tpublic float[] getWorldVertices () {\r\n\t\tif (!dirty) return localVertices;\r\n \t\tdirty = false;\r\n \t\tfinal float[] localVertices = this.localVertices;\r", "fixed": " \t\r\n \tpublic float[] getWorldVertices () {\r\n\t\tif (!dirty) return worldVertices;\r\n \t\tdirty = false;\r\n \t\tfinal float[] localVertices = this.localVertices;\r", "sourceBeforeFix": "return localVertices; ", "sourceAfterFix": "return worldVertices; "}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "3847d03a4ac7e7f4e52bca451ddb5089a7402072", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             Expression rewritten = subPlan.rewrite(windowFunction);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(windowFunction));\n             boolean needCoercion = rewritten instanceof Cast;", "fixed": "             Expression rewritten = subPlan.rewrite(windowFunction);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(windowFunction));\n             boolean needCoercion = rewritten instanceof Cast;", "sourceBeforeFix": "analysis.getTypeWithCoercions(aggregate)", "sourceAfterFix": "analysis.getType(aggregate)"}
{"fixCommitSHA1": "bafb1f877934f826d5f74f9f33e824dd1aa30432", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return getOutputFactory().createXMLEventWriter(out, IOConverter.getCharsetName(exchange));\n     }\n    @Converter\n     public XMLEventWriter createXMLEventWriter(OutputStream out) throws XMLStreamException {\n         return getOutputFactory().createXMLEventWriter(out);\n     }", "fixed": "         return getOutputFactory().createXMLEventWriter(out, IOConverter.getCharsetName(exchange));\n     }\n    @Deprecated\n     public XMLEventWriter createXMLEventWriter(OutputStream out) throws XMLStreamException {\n         return getOutputFactory().createXMLEventWriter(out);\n     }", "sourceBeforeFix": "@Converter", "sourceAfterFix": "@Deprecated"}
{"fixCommitSHA1": "5221c15e183cb7029a305766d137d909f77e8941", "projectName": "google.guice", "bugType": "Change Identifier Used", "problem": "       ProvisionListener[] listeners) {\n     this.source = source;\n     this.keyMatcher = typeMatcher;\n    this.listeners = ImmutableList.of(listeners);\n   }\n   ", "fixed": "       ProvisionListener[] listeners) {\n     this.source = source;\n     this.keyMatcher = typeMatcher;\n    this.listeners = ImmutableList.copyOf(listeners);\n   }\n   ", "sourceBeforeFix": "ImmutableList.of(listeners)", "sourceAfterFix": "ImmutableList.copyOf(listeners)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "febea8d12b9e1df1e9239101d23fa0f8c5dd6dfd", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "   @Deployment\n   public void testParallelSubProcessCompletionCondition() {\n     String procId = runtimeService.startProcessInstanceByKey(\"miParallelSubprocessCompletionCondition\").getId();\n    List<Task> tasks = taskService.createTaskQuery().orderByTaskId().asc().list();\n     assertEquals(4, tasks.size());\n     for (int i=0; i<2; i++) {", "fixed": "   @Deployment\n   public void testParallelSubProcessCompletionCondition() {\n     String procId = runtimeService.startProcessInstanceByKey(\"miParallelSubprocessCompletionCondition\").getId();\n    List<Task> tasks = taskService.createTaskQuery().orderByExecutionId().asc().list();\n     assertEquals(4, tasks.size());\n     for (int i=0; i<2; i++) {", "sourceBeforeFix": "taskService.createTaskQuery().orderByTaskId()", "sourceAfterFix": "taskService.createTaskQuery().orderByExecutionId()"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    * @return The lookup, or null key cannot have the lookup applied to it and should be treated as missing.\n    */\n   @Nullable\n  abstract String apply(@NotNull String key);\n   /**\n    * @param keys set of keys to apply lookup for each element", "fixed": "    * @return The lookup, or null key cannot have the lookup applied to it and should be treated as missing.\n    */\n   @Nullable\n  public abstract String apply(@NotNull String key);\n   /**\n    * @param keys set of keys to apply lookup for each element", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "40514e7f4f12edaaa009b529a2280d9a442989b1", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    * Subclass so can get at protected methods (none at moment).\n    */\n   public static class MiniHBaseClusterRegionServer extends HRegionServer {\n    public MiniHBaseClusterRegionServer(HBaseConfiguration conf)\n         throws IOException {\n       super(conf);\n     }", "fixed": "    * Subclass so can get at protected methods (none at moment).\n    */\n   public static class MiniHBaseClusterRegionServer extends HRegionServer {\n    public MiniHBaseClusterRegionServer(Configuration conf)\n         throws IOException {\n       super(conf);\n     }", "sourceBeforeFix": "HBaseConfiguration conf", "sourceAfterFix": "Configuration conf"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZooKeeperEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ZooKeeperEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": "       logger\n           .error(\n              \"database connection error may be wrong password, username or dbname: {}\",\n               e.getMessage());\n     }\n   }", "fixed": "       logger\n           .error(\n              \"database error: {}\",\n               e.getMessage());\n     }\n   }", "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")", "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n        boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }", "fixed": "          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n        private boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    * User can override this method if there is a better way to perform bulk lookup\n    */\n  Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();", "fixed": "    * User can override this method if there is a better way to perform bulk lookup\n    */\n  public Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "0682e8dd41045e3375b61d3d76f6e6991e98c869", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "fixed": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "sourceBeforeFix": "simple.getFromSentDate()", "sourceAfterFix": "simple.getToSentDate()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5f66fbd181273bff71207c060123a197664c23e1", "projectName": "thinkaurelius.titan", "bugType": "Change Modifier", "problem": " \t}\n \t@Override\n\tpublic void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tentity.remove();\n \t}", "fixed": " \t}\n \t@Override\n\tpublic synchronized void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tentity.remove();\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FlinkEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedFlinkEndpointBuilder advanced() {\n             return (AdvancedFlinkEndpointBuilder) this;\n         }", "fixed": "     \n    public interface FlinkEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedFlinkEndpointBuilder advanced() {\n             return (AdvancedFlinkEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "projectName": "Atmosphere.atmosphere", "bugType": "Change Operand ", "problem": "                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n                     return message + END;\n                  }\n                  @Override", "fixed": "                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n                     return message + end;\n                  }\n                  @Override", "sourceBeforeFix": "data + END", "sourceAfterFix": "data + end"}
{"fixCommitSHA1": "e05cd99b38abbe3bbeb21355f87ca992e4abe92a", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 }\n                 try {\n                     initializeConnection(remoteAddress, authenticator);\n                } catch (IOException e) {\n                     LOGGER.finest(e);\n                 } finally {\n                     connectionsInProgress.remove(target);", "fixed": "                 }\n                 try {\n                     initializeConnection(remoteAddress, authenticator);\n                } catch (Exception e) {\n                     LOGGER.finest(e);\n                 } finally {\n                     connectionsInProgress.remove(target);", "sourceBeforeFix": "IOException e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "78b9af812f2a993001c2e9f9c391b00716af2244", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "             \"localhost\",\n             \"graylog2test\",\n             Integer.valueOf(27017),\n            \"false\"\n         );\n         Mongo connection = instance.getConnection();", "fixed": "             \"localhost\",\n             \"graylog2test\",\n             Integer.valueOf(27017),\n            \"false\",\n            null\n         );\n         Mongo connection = instance.getConnection();", "sourceBeforeFix": "instance.connect(null,null,\"localhost\",\"graylog2test\",Integer.valueOf(27017),\"false\")", "sourceAfterFix": "instance.connect(null,null,\"localhost\",\"graylog2test\",Integer.valueOf(27017),\"false\",null)"}
{"fixCommitSHA1": "f2338bb71559d99dd76563b5cca93b8bd518b4d7", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "    *\n    * @param subject the parent subject, set to null if not present\n    */\n  private FileSystemContext(Subject subject) {\n     mParentSubject = subject;\n     init();\n   }", "fixed": "    *\n    * @param subject the parent subject, set to null if not present\n    */\n  public FileSystemContext(Subject subject) {\n     mParentSubject = subject;\n     init();\n   }", "sourceBeforeFix": "33", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "4e1cc538aaa75a9d0e9514effa6e3f3beeab3985", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\tfor (int i = 0, n = handles.length; i < n; i++) {\r\n \t\t\t\t\tString path = relativePaths[i];\r\n \t\t\t\t\tif (!path.endsWith(suffix)) continue;\r\n\t\t\t\t\thandles[i] = new AndroidFileHandle(assets, new File(file, path), type);\r\n \t\t\t\t\tcount++;\r\n \t\t\t\t}\r\n \t\t\t\tif (count < relativePaths.length) {\r", "fixed": " \t\t\t\tfor (int i = 0, n = handles.length; i < n; i++) {\r\n \t\t\t\t\tString path = relativePaths[i];\r\n \t\t\t\t\tif (!path.endsWith(suffix)) continue;\r\n\t\t\t\t\thandles[count] = new AndroidFileHandle(assets, new File(file, path), type);\r\n \t\t\t\t\tcount++;\r\n \t\t\t\t}\r\n \t\t\t\tif (count < relativePaths.length) {\r", "sourceBeforeFix": "handles[i]", "sourceAfterFix": "handles[count]"}
{"fixCommitSHA1": "3a43345ad0a599659d462cfc14dba9d8c0553bbf", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", closingConfig);\n         }\n        if (deletionRetentionStrategy == null) {\n             final DeletionRetentionStrategyConfig deletionConfig = DeletionRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());\n             clusterConfigService.write(deletionConfig);\n             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", deletionConfig);", "fixed": "             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", closingConfig);\n         }\n        if (deletionRetentionStrategyConfig == null) {\n             final DeletionRetentionStrategyConfig deletionConfig = DeletionRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());\n             clusterConfigService.write(deletionConfig);\n             LOG.info(\"Migrated \\\"{}\\\" setting: {}\", \"elasticsearch_max_number_of_indices\", deletionConfig);", "sourceBeforeFix": "deletionRetentionStrategy == null", "sourceAfterFix": "deletionRetentionStrategyConfig == null"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n \t/**\n \t * Save the given global property to the database", "fixed": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t/**\n \t * Save the given global property to the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "8018d1af58330b6d21c858fa5ebfee6a66cd10b3", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "         }\n       } catch (IOException e) {\n         out.println(\"Cannot list keys for KeyProvider: \" + provider\n            + \": \" + e.getMessage());\n         throw e;\n       }\n     }", "fixed": "         }\n       } catch (IOException e) {\n         out.println(\"Cannot list keys for KeyProvider: \" + provider\n            + \": \" + e.toString());\n         throw e;\n       }\n     }", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "ebcd6ae1a64d94fe5e4ce3d72eab588c48a2518d", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         final InjectionTarget targetDescription = new MethodInjectionTarget(methodInfo.declaringClass().name().toString(), methodName, injectionType);\n         final String localContextName = isEmpty(annotation.name()) ? methodInfo.declaringClass().name().toString() + \"/\" + methodName.substring(3, 4).toLowerCase() + methodName.substring(4) : annotation.name();\n        process(eeModuleDescription, targetDescription.getClassName(), annotation.beanName(), annotation.lookup(), methodInfo.declaringClass(), targetDescription, localContextName);\n     }\n     private void processClass(final EEModuleDescription eeModuleDescription, final EJBResourceWrapper annotation, final ClassInfo classInfo) throws DeploymentUnitProcessingException {", "fixed": "         final InjectionTarget targetDescription = new MethodInjectionTarget(methodInfo.declaringClass().name().toString(), methodName, injectionType);\n         final String localContextName = isEmpty(annotation.name()) ? methodInfo.declaringClass().name().toString() + \"/\" + methodName.substring(3, 4).toLowerCase() + methodName.substring(4) : annotation.name();\n        process(eeModuleDescription, targetDescription.getDeclaredValueClassName(), annotation.beanName(), annotation.lookup(), methodInfo.declaringClass(), targetDescription, localContextName);\n     }\n     private void processClass(final EEModuleDescription eeModuleDescription, final EJBResourceWrapper annotation, final ClassInfo classInfo) throws DeploymentUnitProcessingException {", "sourceBeforeFix": "targetDescription.getClassName()", "sourceAfterFix": "targetDescription.getDeclaredValueClassName()"}
{"fixCommitSHA1": "f6b33ebf179c7d5c0ddf16449374dcfb2c55d7df", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         checkDir(new File(\"src/test/resources/com/puppycrawl/tools/checkstyle\"));\n     }\n    private void checkDir(File dir) throws Exception {\n         File[] files = dir.listFiles(new FileFilter() {\n                 @Override\n                 public boolean accept(File file) {", "fixed": "         checkDir(new File(\"src/test/resources/com/puppycrawl/tools/checkstyle\"));\n     }\n    private static void checkDir(File dir) throws Exception {\n         File[] files = dir.listFiles(new FileFilter() {\n                 @Override\n                 public boolean accept(File file) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         return Objects.equals(filePattern, suppressElement.filePattern)\n                 && Objects.equals(checkPattern, suppressElement.checkPattern)\n                 && Objects.equals(moduleId, suppressElement.moduleId)\n                && Objects.equals(linesCSV, suppressElement.linesCSV)\n                && Objects.equals(columnsCSV, suppressElement.columnsCSV);\n     }\n }", "fixed": "         return Objects.equals(filePattern, suppressElement.filePattern)\n                 && Objects.equals(checkPattern, suppressElement.checkPattern)\n                 && Objects.equals(moduleId, suppressElement.moduleId)\n                && Objects.equals(linesCsv, suppressElement.linesCsv)\n                && Objects.equals(columnsCsv, suppressElement.columnsCsv);\n     }\n }", "sourceBeforeFix": "new CSVFilter(columns)", "sourceAfterFix": "new CsvFilter(columns)"}
{"fixCommitSHA1": "3c8d3e908b01f47c69600a235fb7e5173f4f0d7b", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   \n  public final Iterable<ObjectType> getOwnImplementedInterfaces() {\n     return implementedInterfaces;\n   }", "fixed": "   }\n   \n  public final ImmutableList<ObjectType> getOwnImplementedInterfaces() {\n     return implementedInterfaces;\n   }", "sourceBeforeFix": "Iterable<ObjectType>", "sourceAfterFix": "ImmutableList<ObjectType>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "7bd1426548ed403be685f65b57179394d17cadcc", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 }\n                 if (plan.isMaterializedExchangeSource()) {\n                    writtenOutputPhysicalDataSize += stageStats.getPhysicalWrittenDataSize().toBytes();\n                 }\n                 else {\n                     writtenOutputPositions += stageInfo.getStageStats().getOperatorSummaries().stream()", "fixed": "                 }\n                 if (plan.isMaterializedExchangeSource()) {\n                    writtenIntermediatePhysicalDataSize += stageStats.getPhysicalWrittenDataSize().toBytes();\n                 }\n                 else {\n                     writtenOutputPositions += stageInfo.getStageStats().getOperatorSummaries().stream()", "sourceBeforeFix": "writtenOutputPhysicalDataSize+=stageStats.getPhysicalWrittenDataSize().toBytes()", "sourceAfterFix": "writtenIntermediatePhysicalDataSize+=stageStats.getPhysicalWrittenDataSize().toBytes()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "dad70872c09aa162f4567263f677a49b0455be76", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 .outputRowsCountUnknown();\n        assertThat(computeSemiJoin(inputStatistics, inputStatistics, x, unknown))\n                 .symbolStats(x, stats -> stats\n                         .nullsFraction(0)\n                         .lowValue(xStats.getLowValue())", "fixed": "                 .outputRowsCountUnknown();\n        assertThat(computeAntiJoin(inputStatistics, inputStatistics, x, unknown))\n                 .symbolStats(x, stats -> stats\n                         .nullsFraction(0)\n                         .lowValue(xStats.getLowValue())", "sourceBeforeFix": "computeSemiJoin(inputStatistics,inputStatistics,unknown,u)", "sourceAfterFix": "computeAntiJoin(inputStatistics,inputStatistics,unknown,u)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "fixed": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "sourceBeforeFix": "assertThat(page3.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page3.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "998cca82220175171f60cd096ee26f600eabd8dc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         return getNode(random.nextInt(cluster.size()));\n     }\n    public void terminateRandomNode(){\n         HazelcastInstance node = getRandomNode();\n        node.getLifecycleService().terminate();\n         cluster.remove(node);\n     }", "fixed": "         return getNode(random.nextInt(cluster.size()));\n     }\n    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }", "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t\tColor color = getColor();\r\n \t\tfloat oldAlpha = color.a;\r\n \t\tcolor.a *= alphaModulation;\r\n\t\tsetColor(color);\r\n \t\tdraw(spriteBatch);\r\n \t\tcolor.a = oldAlpha;\r\n\t\tsetColor(color);\r\n \t}\r\n \t\r", "fixed": " \t\tColor color = getColor();\r\n \t\tfloat oldAlpha = color.a;\r\n \t\tcolor.a *= alphaModulation;\r\n\t\tsetColors(color);\r\n \t\tdraw(spriteBatch);\r\n \t\tcolor.a = oldAlpha;\r\n\t\tsetColors(color);\r\n \t}\r\n \t\r", "sourceBeforeFix": "setColor(color)", "sourceAfterFix": "setColors(color)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SpringIntegrationEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringIntegrationEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SpringIntegrationEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringIntegrationEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "544edb296479cbd05f35381b20a651e9d022e197", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 1000; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "fixed": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(200);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 200; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "sourceBeforeFix": "getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000)", "sourceAfterFix": "getMockEndpoint(\"mock:\" + i).expectedMessageCount(200)"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "9a1ba2926a59ce9fd80e6355fabdeccdec6ad19f", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "       setupServer();\n       tserver.serve();\n     } catch (Exception e) {\n      LOG.fatal(\"Cannot run ThriftServer\");\n       System.exit(-1);\n     }", "fixed": "       setupServer();\n       tserver.serve();\n     } catch (Exception e) {\n      LOG.fatal(\"Cannot run ThriftServer\", e);\n       System.exit(-1);\n     }", "sourceBeforeFix": "LOG.fatal(\"Cannot run ThriftServer\")", "sourceAfterFix": "LOG.fatal(\"Cannot run ThriftServer\",e)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "0ffdc3246d1bd202e6cef4b486ffb4e9257b0311", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTask(task);\n         }\n     }", "fixed": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTaskAndWakeup(task);\n         }\n     }", "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(regionname)", "sourceAfterFix": "Bytes.toBytes(regionname)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJdbcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JdbcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJdbcEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JdbcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZendeskEndpointBuilder\n             extends\n                 ZendeskEndpointConsumerBuilder, ZendeskEndpointProducerBuilder {\n         default AdvancedZendeskEndpointBuilder advanced() {", "fixed": "     \n    public interface ZendeskEndpointBuilder\n             extends\n                 ZendeskEndpointConsumerBuilder, ZendeskEndpointProducerBuilder {\n         default AdvancedZendeskEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "   public Set<Tuple> zrevrangeByScoreWithScores(final byte[] key, final double max, final double min) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "   public Set<Tuple> zrevrangeByScoreWithScores(final byte[] key, final double max, final double min) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "de4cd039b300659a2c4d6b8451615fc64f114cf1", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": " import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.google.inject.Provider;\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = SingleServerInventoryProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = FilteredSingleServerViewProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = FilteredBatchServerViewProvider.class)", "fixed": " import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.google.inject.Provider;\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = FilteredBatchServerViewProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = FilteredSingleServerViewProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = FilteredBatchServerViewProvider.class)", "sourceBeforeFix": "SingleServerInventoryProvider.class", "sourceAfterFix": "FilteredBatchServerViewProvider.class"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WordpressEndpointBuilder\n             extends\n                 WordpressEndpointConsumerBuilder, WordpressEndpointProducerBuilder {\n         default AdvancedWordpressEndpointBuilder advanced() {", "fixed": "     \n    public interface WordpressEndpointBuilder\n             extends\n                 WordpressEndpointConsumerBuilder, WordpressEndpointProducerBuilder {\n         default AdvancedWordpressEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ff7d97dc1a7222e6c207a95f429aa5bfde5155ee", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     private char[] buffer;\n     private int bpos;\n    public XMLStreamReaderReader(XMLStreamReader reader, XMLOutputFactory outfactory) {\n         this.reader = reader;\n         this.buffer = new char[BUFFER_SIZE];\n         this.chunk = new TrimmableCharArrayWriter();", "fixed": "     private char[] buffer;\n     private int bpos;\n    XMLStreamReaderReader(XMLStreamReader reader, XMLOutputFactory outfactory) {\n         this.reader = reader;\n         this.buffer = new char[BUFFER_SIZE];\n         this.chunk = new TrimmableCharArrayWriter();", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "d4a1a1cdac176e1f13c04cbbee22b690c8c7b5fe", "projectName": "wildfly.wildfly", "bugType": "Change Operand ", "problem": "                 final String ref = include.asString();\n                 if (processed.add(ref)) {\n                     final ModelNode includedGroup = groups.get(ref);\n                    if (group == null) {\n                         throw MESSAGES.undefinedSocketBindingGroup(ref);\n                     }\n                     mergeBindingGroups(updates, groups, groupName, includedGroup, processed);", "fixed": "                 final String ref = include.asString();\n                 if (processed.add(ref)) {\n                     final ModelNode includedGroup = groups.get(ref);\n                    if (includedGroup == null) {\n                         throw MESSAGES.undefinedSocketBindingGroup(ref);\n                     }\n                     mergeBindingGroups(updates, groups, groupName, includedGroup, processed);", "sourceBeforeFix": "group == null", "sourceAfterFix": "includedGroup == null"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.valueOf(value.toString());\n     }\n }", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.parseDouble(value.toString());\n     }\n }", "sourceBeforeFix": "Short.valueOf(value.toString())", "sourceAfterFix": "Short.parseShort(value.toString())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "67685860541cf7f66d048f314e1b6084591974c3", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         long start = System.currentTimeMillis();\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\n        result.expectedBodiesReceived(\"A+C+E+G+I\", \"B+D+F+H+J\");\n         assertMockEndpointsSatisfied();", "fixed": "         long start = System.currentTimeMillis();\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\n        result.expectedBodiesReceivedInAnyOrder(\"A+C+E+G+I\", \"B+D+F+H+J\");\n         assertMockEndpointsSatisfied();", "sourceBeforeFix": "result.expectedBodiesReceived(\"A+C+E+G+I\",\"B+D+F+H+J\")", "sourceAfterFix": "result.expectedBodiesReceivedInAnyOrder(\"A+C+E+G+I\",\"B+D+F+H+J\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "b78919c729be298474c00bd8a3504160408dcfc2", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "     final QueryRunnerFactory factory = TimeseriesQueryRunnerFactory.create();\n     final QueryRunner<Result<TimeseriesResultValue>> runner = makeQueryRunner(\n         factory,\n        new IncrementalIndexSegment(index)\n     );\n     TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()", "fixed": "     final QueryRunnerFactory factory = TimeseriesQueryRunnerFactory.create();\n     final QueryRunner<Result<TimeseriesResultValue>> runner = makeQueryRunner(\n         factory,\n        new IncrementalIndexSegment(index, null)\n     );\n     TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()", "sourceBeforeFix": "new IncrementalIndexSegment(index)", "sourceAfterFix": "new IncrementalIndexSegment(index,null)"}
{"fixCommitSHA1": "daef17d4bb38e7a7961121288f1ef4ae3c56ec71", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "     Node caught = n.getFirstChild();\n     if (caught.isName()) {\n       validateName(caught);\n    } else if (n.isArrayPattern()) {\n       validateArrayPattern(Token.CATCH, caught);\n     } else {\n       validateObjectPattern(Token.CATCH, caught);", "fixed": "     Node caught = n.getFirstChild();\n     if (caught.isName()) {\n       validateName(caught);\n    } else if (caught.isArrayPattern()) {\n       validateArrayPattern(Token.CATCH, caught);\n     } else {\n       validateObjectPattern(Token.CATCH, caught);", "sourceBeforeFix": "n.isArrayPattern()", "sourceAfterFix": "caught.isArrayPattern()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "fixed": "                 + \") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name\";\n         gen.get().addSnippet( \"query-get-groups\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Users\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-groups\",", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "f3c01ca3b39c23758a34d711579a567a5f841944", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 30_000);\n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 30_000);\n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();", "fixed": "       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 60_000);\n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 60_000);\n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();", "sourceBeforeFix": "waitUntil(() -> clusterManager.getNodes().size() == 2,30_000)", "sourceAfterFix": "waitUntil(() -> clusterManager.getNodes().size() == 2,60_000)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "117c698c59a011648c50e261ff5b555e3ee236f8", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "             break;\n         }\n       } else {\n        log.error(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n       }\n     }\n   }", "fixed": "             break;\n         }\n       } else {\n        log.debug(\"Metric=[%s] has no StatsD type mapping\", statsDMetric);\n       }\n     }\n   }", "sourceBeforeFix": "log.error(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)", "sourceAfterFix": "log.debug(\"Metric=[%s] has no StatsD type mapping\",statsDMetric)"}
{"fixCommitSHA1": "4a6e698536006e6ea9b0680756d9390b96ba278b", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD) {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();", "fixed": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"') {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();", "sourceBeforeFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD", "sourceAfterFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"'"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EhcacheEndpointBuilder\n             extends\n                 EhcacheEndpointConsumerBuilder, EhcacheEndpointProducerBuilder {\n         default AdvancedEhcacheEndpointBuilder advanced() {", "fixed": "     \n    public interface EhcacheEndpointBuilder\n             extends\n                 EhcacheEndpointConsumerBuilder, EhcacheEndpointProducerBuilder {\n         default AdvancedEhcacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3015afd91cf3ab469e8c343cb201a1dec3679aea", "projectName": "neo4j.neo4j", "bugType": "Same Function Less Args", "problem": "         InstanceId instanceId = new InstanceId( 1 );\n         HeartbeatState heartbeat= HeartbeatState.heartbeat;\n        ClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", StringLogger.DEV_NULL,\n\"cluster:\nconfiguration.joined( instanceId, URI.create(\"cluster:\nconfiguration.joined( new InstanceId( 2 ), URI.create(\"cluster:", "fixed": "         InstanceId instanceId = new InstanceId( 1 );\n         HeartbeatState heartbeat= HeartbeatState.heartbeat;\nClusterConfiguration configuration = new ClusterConfiguration(\"whatever\", \"cluster:\nconfiguration.joined( instanceId, URI.create(\"cluster:\nconfiguration.joined( new InstanceId( 2 ), URI.create(\"cluster:", "sourceBeforeFix": "new ClusterConfiguration(\"whatever\",StringLogger.DEV_NULL,\"cluster://1\",\"cluster://2\")", "sourceAfterFix": "new ClusterConfiguration(\"whatever\",\"cluster://1\",\"cluster://2\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Mina2EndpointBuilder\n             extends\n                 Mina2EndpointConsumerBuilder, Mina2EndpointProducerBuilder {\n         default AdvancedMina2EndpointBuilder advanced() {", "fixed": "     \n    public interface Mina2EndpointBuilder\n             extends\n                 Mina2EndpointConsumerBuilder, Mina2EndpointProducerBuilder {\n         default AdvancedMina2EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "71775a876d1b049c7dfc49ffd35eff0d3f066691", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "     static File tmpExternalFile;\n     @Override\n    public void init() {\n         try {\n             externalStaticFileLocation(System.getProperty(\"java.io.tmpdir\"));\n             staticFileLocation(\"/public\");", "fixed": "     static File tmpExternalFile;\n     @Override\n    public synchronized void init() {\n         try {\n             externalStaticFileLocation(System.getProperty(\"java.io.tmpdir\"));\n             staticFileLocation(\"/public\");", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b438f795170a7665a63b8901b75d2c079b01247e", "projectName": "nhaarman.ListViewAnimations", "bugType": "Change Identifier Used", "problem": " \t\t\tcontextualUndoView.findViewById(mUndoActionId).setOnClickListener(new UndoListener(contextualUndoView));\n \t\t}\n\t\tView contentView = super.getView(position, contextualUndoView.getContentView(), parent);\n \t\tcontextualUndoView.updateContentView(contentView);\n \t\tlong itemId = getItemId(position);", "fixed": " \t\t\tcontextualUndoView.findViewById(mUndoActionId).setOnClickListener(new UndoListener(contextualUndoView));\n \t\t}\n\t\tView contentView = super.getView(position, contextualUndoView.getContentView(), contextualUndoView);\n \t\tcontextualUndoView.updateContentView(contentView);\n \t\tlong itemId = getItemId(position);", "sourceBeforeFix": "super.getView(position,contextualUndoView.getContentView(),parent)", "sourceAfterFix": "super.getView(position,contextualUndoView.getContentView(),contextualUndoView)"}
{"fixCommitSHA1": "9cbe9bcbaa33825a866bdc8a9bf92f270723d423", "projectName": "apache.hadoop", "bugType": "Same Function More Args", "problem": "         writer.append(logKey, logValue);\n       } catch (Exception e) {\n         LOG.error(\"Couldn't upload logs for \" + containerId\n            + \". Skipping this container.\");\n         return new HashSet<Path>();\n       }\n       this.uploadedFileMeta.addAll(logValue", "fixed": "         writer.append(logKey, logValue);\n       } catch (Exception e) {\n         LOG.error(\"Couldn't upload logs for \" + containerId\n            + \". Skipping this container.\", e);\n         return new HashSet<Path>();\n       }\n       this.uploadedFileMeta.addAll(logValue", "sourceBeforeFix": "LOG.error(\"Cannot create writer for app \" + this.applicationId + \". Skip log upload this time. \")", "sourceAfterFix": "LOG.error(\"Cannot create writer for app \" + this.applicationId + \". Skip log upload this time. \",e1)"}
{"fixCommitSHA1": "353cfe61160ef9355cc5e09fa135e81cb0cf0450", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         try {\n             SimpleRegistry registry = new SimpleRegistry();\n            registry.put(\"myConf\", new XmlConfiguration(getClass().getResource(\"/ehcache/ehcache-file-config.xml\")));\n             context = new DefaultCamelContext(registry);\n             context.addRoutes(new RouteBuilder() {", "fixed": "         try {\n             SimpleRegistry registry = new SimpleRegistry();\n            registry.bind(\"myConf\", new XmlConfiguration(getClass().getResource(\"/ehcache/ehcache-file-config.xml\")));\n             context = new DefaultCamelContext(registry);\n             context.addRoutes(new RouteBuilder() {", "sourceBeforeFix": "registry.put(\"myManager\",cacheManager)", "sourceAfterFix": "registry.bind(\"myManager\",cacheManager)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "51e6c8c8b6e847e2600420252160e331c85bd46a", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic boolean matches(ClassNode classNode) {\n\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"MessageEndpoint\",\n \t\t\t\t\"EnableIntegrationPatterns\");\n \t}", "fixed": " \tpublic boolean matches(ClassNode classNode) {\n\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"MessageEndpoint\",\n \t\t\t\t\"EnableIntegrationPatterns\");\n \t}", "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")", "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5a15366e9871141aecf4408342479a07c2a24b57", "projectName": "NLPchina.ansj_seg", "bugType": "Change Modifier", "problem": " \t}\n \t@Override\n\tpublic boolean incrementToken() throws IOException {\n \t\tclearAttributes();\n \t\tint position = 0;\n \t\tTerm term = null;", "fixed": " \t}\n \t@Override\n\tpublic final boolean incrementToken() throws IOException {\n \t\tclearAttributes();\n \t\tint position = 0;\n \t\tTerm term = null;", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "48e0acb98213234b32dd4c21eb5a7d4d94e25ca2", "projectName": "brettwooldridge.HikariCP", "bugType": "Wrong Function Name", "problem": "    {\n       if (connectionTimeout != Integer.MAX_VALUE) {\n          try {\n            dataSource.setLoginTimeout((int) TimeUnit.MILLISECONDS.toSeconds(Math.min(1000L, connectionTimeout)));\n          }\n          catch (SQLException e) {\n             logger.warn(\"Unable to set DataSource login timeout\", e);", "fixed": "    {\n       if (connectionTimeout != Integer.MAX_VALUE) {\n          try {\n            dataSource.setLoginTimeout((int) TimeUnit.MILLISECONDS.toSeconds(Math.max(1000L, connectionTimeout)));\n          }\n          catch (SQLException e) {\n             logger.warn(\"Unable to set DataSource login timeout\", e);", "sourceBeforeFix": "Math.min(1000L,connectionTimeout)", "sourceAfterFix": "Math.max(1000L,connectionTimeout)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "6c0b2be41234c6593d1ca8283f1a766ecc861026", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             if (currentAttribute == null) {\n                 try {\n                     currentAttribute = factory.createAttribute(request,\n                            decodeAttribute(nameAttribute.getValue(), charset));\n                 } catch (NullPointerException e) {\n                     throw new ErrorDataDecoderException(e);\n                 } catch (IllegalArgumentException e) {", "fixed": "             if (currentAttribute == null) {\n                 try {\n                     currentAttribute = factory.createAttribute(request,\n                            cleanString(nameAttribute.getValue()));\n                 } catch (NullPointerException e) {\n                     throw new ErrorDataDecoderException(e);\n                 } catch (IllegalArgumentException e) {", "sourceBeforeFix": "decodeAttribute(nameAttribute.getValue(),charset)", "sourceAfterFix": "cleanString(nameAttribute.getValue())"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "fixed": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "f5868a8e038c7e10b1a647b2933546e2a981a638", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testGrouped() throws Exception {\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\n        result.expectedMessageCount(1);\n         template.sendBody(\"direct:start\", \"100\");", "fixed": "     public void testGrouped() throws Exception {\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\n        result.expectedMinimumMessageCount(1);\n         template.sendBody(\"direct:start\", \"100\");", "sourceBeforeFix": "result.expectedMessageCount(1)", "sourceAfterFix": "result.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeInEdge(Object edge, boolean isSelfLoop) {\n     N node = super.removeInEdge(edge, isSelfLoop);\n     Multiset<N> predecessors = getReference(predecessorsReference);\n     if (predecessors != null) {", "fixed": "   }\n   @Override\n  public N removeInEdge(E edge, boolean isSelfLoop) {\n     N node = super.removeInEdge(edge, isSelfLoop);\n     Multiset<N> predecessors = getReference(predecessorsReference);\n     if (predecessors != null) {", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DigitalSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDigitalSignatureEndpointBuilder advanced() {", "fixed": "     \n    public interface DigitalSignatureEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDigitalSignatureEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n\tprotected static Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n\tprotected static Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n\tprotected static Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n\tprotected static Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \tprivate static Map<String, Set<ModuleClassLoader>> providedPackages = new ConcurrentHashMap<String, Set<ModuleClassLoader>>();", "fixed": " \tprivate static Log log = LogFactory.getLog(ModuleFactory.class);\n\tprotected static volatile Map<String, Module> loadedModules = new WeakHashMap<String, Module>();\n\tprotected static volatile Map<String, Module> startedModules = new WeakHashMap<String, Module>();\n\tprotected static volatile Map<String, List<Extension>> extensionMap = new HashMap<String, List<Extension>>();\n\tprotected static volatile Map<Module, ModuleClassLoader> moduleClassLoaders = new WeakHashMap<Module, ModuleClassLoader>();\n \tprivate static Map<String, Set<ModuleClassLoader>> providedPackages = new ConcurrentHashMap<String, Set<ModuleClassLoader>>();", "sourceBeforeFix": "12", "sourceAfterFix": "76"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PahoEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPahoEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PahoEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPahoEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4e6b29ac8fac0d15e6be7cf921e247e534898d16", "projectName": "chrisbanes.Android-PullToRefresh", "bugType": "Change Identifier Used", "problem": " final class OverscrollHelper {\n \tstatic void overScrollBy(PullToRefreshBase<?> view, int deltaY, int scrollY, boolean isTouchEvent) {\n\t\tfinal Mode mode = view.getCurrentMode();\n \t\tif (mode != Mode.DISABLED && !isTouchEvent) {\n \t\t\tfinal int newY = (deltaY + scrollY);", "fixed": " final class OverscrollHelper {\n \tstatic void overScrollBy(PullToRefreshBase<?> view, int deltaY, int scrollY, boolean isTouchEvent) {\n\t\tfinal Mode mode = view.getMode();\n \t\tif (mode != Mode.DISABLED && !isTouchEvent) {\n \t\t\tfinal int newY = (deltaY + scrollY);", "sourceBeforeFix": "view.getCurrentMode()", "sourceAfterFix": "view.getMode()"}
{"fixCommitSHA1": "3847d03a4ac7e7f4e52bca451ddb5089a7402072", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             Expression rewritten = subPlan.rewrite(windowFunction);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(windowFunction));\n             boolean needCoercion = rewritten instanceof Cast;", "fixed": "             Expression rewritten = subPlan.rewrite(windowFunction);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(windowFunction));\n             boolean needCoercion = rewritten instanceof Cast;", "sourceBeforeFix": "analysis.getTypeWithCoercions(windowFunction)", "sourceAfterFix": "analysis.getType(windowFunction)"}
{"fixCommitSHA1": "789f4be50f7ca95f2fb824bdffd170c1731c681a", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 return false;\n             }\n            EndpointOption that = (EndpointOption) o;\n             if (!name.equals(that.name)) {\n                 return false;", "fixed": "                 return false;\n             }\n            ComponentOption that = (ComponentOption) o;\n             if (!name.equals(that.name)) {\n                 return false;", "sourceBeforeFix": "EndpointOption that=(EndpointOption)o; ", "sourceAfterFix": "ComponentOption that=(ComponentOption)o; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "24d4f1a7133defb3bf9a8726cfb864004a5876ca", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "     try {\n       Files.write(\"\", new File(reportPath), UTF_8);\n     } catch (IOException e) {\n      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n     }\n   }", "fixed": "     try {\n       Files.write(\"\", new File(reportPath), UTF_8);\n     } catch (IOException e) {\n      compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath, e.getMessage()));\n     }\n   }", "sourceBeforeFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath)", "sourceAfterFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleSheetsStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleSheetsStreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleSheetsStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleSheetsStreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IOTAEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIOTAEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface IOTAEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIOTAEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").toString()", "sourceAfterFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").getPath()"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(regionname)", "sourceAfterFix": "Bytes.toBytes(regionname)"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (String text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "fixed": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (CharSequence text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "d08bf8738680178b111ce07d9b4593464125fe3a", "projectName": "yasserg.crawler4j", "bugType": "Less Specific If", "problem": "             webURL.setDocid(-1);\n             webURL.setAnchor(curURL.getAnchor());\n             if (shouldVisit(page, webURL)) {\n              if (robotstxtServer.allows(webURL)) {\n                 webURL.setDocid(docIdServer.getNewDocID(movedToUrl));\n                 frontier.schedule(webURL);\n               } else {", "fixed": "             webURL.setDocid(-1);\n             webURL.setAnchor(curURL.getAnchor());\n             if (shouldVisit(page, webURL)) {\n              if (!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)) {\n                 webURL.setDocid(docIdServer.getNewDocID(movedToUrl));\n                 frontier.schedule(webURL);\n               } else {", "sourceBeforeFix": "robotstxtServer.allows(webURL)", "sourceAfterFix": "!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)"}
{"fixCommitSHA1": "dfce500be84e220ac42f32a09f0a4fa55fd3fbb9", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSendAccountBean() throws Exception {\n         long start = System.currentTimeMillis();\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         assertMockEndpointsSatisfied();\n         long delta = System.currentTimeMillis() - start;", "fixed": "     public void testSendAccountBean() throws Exception {\n         long start = System.currentTimeMillis();\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         assertMockEndpointsSatisfied();\n         long delta = System.currentTimeMillis() - start;", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "2979c84ee1ee2d8ee9623326bedd7d5a0d53de26", "projectName": "libgdx.libgdx", "bugType": "Less Specific If", "problem": " \t\t\tString[] tokens = paths.split(\",\");\n \t\t\tString path = null;\n \t\t\tfor(String token: tokens) {\n\t\t\t\tif(new FileWrapper(token).exists()) {\n \t\t\t\t\tpath = token;\n \t\t\t\t}\n \t\t\t}", "fixed": " \t\t\tString[] tokens = paths.split(\",\");\n \t\t\tString path = null;\n \t\t\tfor(String token: tokens) {\n\t\t\t\tif (new FileWrapper(token).exists() || new FileWrapper(token).mkdirs()) {\n \t\t\t\t\tpath = token;\n \t\t\t\t}\n \t\t\t}", "sourceBeforeFix": "new FileWrapper(token).exists()", "sourceAfterFix": "new FileWrapper(token).exists() || new FileWrapper(token).mkdirs()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2bc44fae7b27d9582212e1fdc7f830a1441b0cc4", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "         if (this.timeout == null) return false;\n         Date lastAccessedTime = this.entry.getLastAccessedTime();\n         long timeout = this.timeout.convert(TimeUnit.MILLISECONDS);\n        return (lastAccessedTime != null) && (timeout > 0) ? ((System.currentTimeMillis() - lastAccessedTime.getTime()) > timeout) : false;\n     }\n     @Override", "fixed": "         if (this.timeout == null) return false;\n         Date lastAccessedTime = this.entry.getLastAccessedTime();\n         long timeout = this.timeout.convert(TimeUnit.MILLISECONDS);\n        return (lastAccessedTime != null) && (timeout > 0) ? ((System.currentTimeMillis() - lastAccessedTime.getTime()) >= timeout) : false;\n     }\n     @Override", "sourceBeforeFix": "(System.currentTimeMillis() - lastAccessedTime.getTime()) > timeout", "sourceAfterFix": "(System.currentTimeMillis() - lastAccessedTime.getTime()) >= timeout"}
{"fixCommitSHA1": "42b44935272ecf97acca3b7c9fe90b45fd8e01d2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "          * that you do not get duplicate copies of messages already on your\n          * page.\n          */\n        private Integer newerThan = -1;\n         /**\n          * threaded=true will only return the first message in each thread. This\n          * parameter is intended for apps which display message threads", "fixed": "          * that you do not get duplicate copies of messages already on your\n          * page.\n          */\n        private Long newerThan = -1L;\n         /**\n          * threaded=true will only return the first message in each thread. This\n          * parameter is intended for apps which display message threads", "sourceBeforeFix": "public Integer getNewerThan(){   return newerThan; } ", "sourceAfterFix": "public Long getNewerThan(){   return newerThan; } "}
{"fixCommitSHA1": "27212f298ec3ee50204e5169f61ba48702346450", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "       \"Redeclared variable: {0}\");\n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n    DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(", "fixed": "       \"Redeclared variable: {0}\");\n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n    DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\n         \"Ambiguous use of a named function: {0}.\");\n   static final DiagnosticType EARLY_REFERENCE_ERROR = DiagnosticType.error(", "sourceBeforeFix": "DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")", "sourceAfterFix": "DiagnosticType.error(\"AMBIGUOUS_FUNCTION_DECL\",\"Ambiguous use of a named function: {0}.\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(10))\n             .build();\n     static final SimpleAttributeDefinition QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.QUEUE_SIZE, ModelType.INT, true)", "fixed": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(10L))\n             .build();\n     static final SimpleAttributeDefinition QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.QUEUE_SIZE, ModelType.INT, true)", "sourceBeforeFix": "new ModelNode().set(10)", "sourceAfterFix": "new ModelNode().set(10L)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PrinterEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedPrinterEndpointBuilder advanced() {\n             return (AdvancedPrinterEndpointBuilder) this;\n         }", "fixed": "     \n    public interface PrinterEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedPrinterEndpointBuilder advanced() {\n             return (AdvancedPrinterEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedPgEventEndpointBuilder\n             extends\n                 AdvancedPgEventEndpointConsumerBuilder, AdvancedPgEventEndpointProducerBuilder {\n         default PgEventEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedPgEventEndpointBuilder\n             extends\n                 AdvancedPgEventEndpointConsumerBuilder, AdvancedPgEventEndpointProducerBuilder {\n         default PgEventEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "dfb0ebdad3633308ed0016db3a6d1f9768cecb13", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     public static ModuleFiles create(@JsonProperty(\"chunks\") Map<String, ChunkDescription> chunks,\n                                      @JsonProperty(\"js\") List<String> jsFiles,\n                                      @JsonProperty(\"css\") List<String> cssFiles) {\n        return new AutoValue_PackageFiles(chunks, jsFiles, cssFiles);\n     }\n }", "fixed": "     public static ModuleFiles create(@JsonProperty(\"chunks\") Map<String, ChunkDescription> chunks,\n                                      @JsonProperty(\"js\") List<String> jsFiles,\n                                      @JsonProperty(\"css\") List<String> cssFiles) {\n        return new AutoValue_ModuleFiles(chunks, jsFiles, cssFiles);\n     }\n }", "sourceBeforeFix": "new AutoValue_PackageFiles(chunks,jsFiles,cssFiles)", "sourceAfterFix": "new AutoValue_ModuleFiles(chunks,jsFiles,cssFiles)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b186ed3519d4627f3352aa65db3d8283d1e8beda", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);\n         public void processCall(Node node, Packet packet) {\n            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getSemaphore(packet.name);\n             final Integer value = (Integer) toObject(packet.getValueData());\n             final boolean flag = (Boolean) toObject(packet.getKeyData());\n             processCall(packet, semaphoreProxy, value, flag);", "fixed": "         abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);\n         public void processCall(Node node, Packet packet) {\n            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getOrCreateProxyByName(packet.name);\n             final Integer value = (Integer) toObject(packet.getValueData());\n             final boolean flag = (Boolean) toObject(packet.getKeyData());\n             processCall(packet, semaphoreProxy, value, flag);", "sourceBeforeFix": "factory.getSemaphore(packet.name)", "sourceAfterFix": "factory.getOrCreateProxyByName(packet.name)"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": "     }\n     if (!isProperlyConfigured) {\n      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.error(\"InfluxDB is not yet connected\");\n       return;\n     }", "fixed": "     }\n     if (!isProperlyConfigured) {\n      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }", "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")", "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"}
{"fixCommitSHA1": "040343b917a3989fe6fba30a6deddb8974a68bb5", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "         url = url.setPath(RegistryService.class.getName())\r\n                 .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())\r\n                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);\r\n        String key = url.toServiceString();\r\n         LOCK.lock();\r\n         try {\r", "fixed": "         url = url.setPath(RegistryService.class.getName())\r\n                 .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())\r\n                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);\r\n        String key = url.toServiceStringWithoutResolving();\r\n         LOCK.lock();\r\n         try {\r", "sourceBeforeFix": "url.toServiceString()", "sourceAfterFix": "url.toServiceStringWithoutResolving()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "89ed905358dd09d005398028198cc388b9b59a94", "projectName": "square.javapoet", "bugType": "Change Identifier Used", "problem": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineCOmment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "fixed": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineComment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "sourceBeforeFix": "javaWriter.emitSingleLineCOmment(\"foo\")", "sourceAfterFix": "javaWriter.emitSingleLineComment(\"foo\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3407a44922289dc4ddb3ff87687b8766affeaad9", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\t}\n \t}\n\tprivate static class SpeedTestForwarder extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "fixed": " \t\t}\n \t}\n\t\n\tpublic static class SpeedTestForwarder extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "sourceBeforeFix": "10", "sourceAfterFix": "9"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "41bf1b7459905a8201b5d60bb6545fbbb502d59d", "projectName": "alibaba.druid", "bugType": "Wrong Function Name", "problem": "             map.put(\"ActiveCount\", this.getActiveCount());\n             map.put(\"PoolingCount\", this.getPoolingCount());\n             map.put(\"LockQueueLength\", this.getLockQueueLength());\n            map.put(\"WaitThreadCount\", this.getNotEmptyWaitThreadPeak());\n             map.put(\"InitialSize\", this.getInitialSize());", "fixed": "             map.put(\"ActiveCount\", this.getActiveCount());\n             map.put(\"PoolingCount\", this.getPoolingCount());\n             map.put(\"LockQueueLength\", this.getLockQueueLength());\n            map.put(\"WaitThreadCount\", this.getNotEmptyWaitThreadCount());\n             map.put(\"InitialSize\", this.getInitialSize());", "sourceBeforeFix": "this.getNotEmptyWaitThreadPeak()", "sourceAfterFix": "this.getNotEmptyWaitThreadCount()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a85bc005400d000cdf9efd1cf791d3e2f0ead12e", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     classes = {\n         CamelAutoConfiguration.class,\n         CamelCloudAutoConfiguration.class,\n        CamelCloudServiceCallConfiguration.class\n     },\n     properties = {\n         \"ribbon.eureka.enabled=false\",", "fixed": "     classes = {\n         CamelAutoConfiguration.class,\n         CamelCloudAutoConfiguration.class,\n        CamelCloudServiceCallRoutesAutoConfiguration.class\n     },\n     properties = {\n         \"ribbon.eureka.enabled=false\",", "sourceBeforeFix": "CamelCloudServiceCallConfiguration.class", "sourceAfterFix": "CamelCloudServiceCallRoutesAutoConfiguration.class"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "e08f74620ba29298d59c97e7327cbe51fbd5b39e", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic boolean isVisualPressed () {\r\n \t\tif (pressed) return true;\r\n \t\tif (visualPressedTime <= 0) return false;\r\n\t\tif (visualPressedTime > TimeUtils.nanoTime() && Gdx.graphics.isContinuousRendering()) return true;\r\n \t\tvisualPressedTime = 0;\r\n \t\treturn false;\r\n \t}\r", "fixed": " \tpublic boolean isVisualPressed () {\r\n \t\tif (pressed) return true;\r\n \t\tif (visualPressedTime <= 0) return false;\r\n\t\tif (visualPressedTime > TimeUtils.millis() && Gdx.graphics.isContinuousRendering()) return true;\r\n \t\tvisualPressedTime = 0;\r\n \t\treturn false;\r\n \t}\r", "sourceBeforeFix": "TimeUtils.nanoTime()", "sourceAfterFix": "TimeUtils.millis()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastTopicEndpointBuilder\n             extends\n                 HazelcastTopicEndpointConsumerBuilder, HazelcastTopicEndpointProducerBuilder {\n         default AdvancedHazelcastTopicEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastTopicEndpointBuilder\n             extends\n                 HazelcastTopicEndpointConsumerBuilder, HazelcastTopicEndpointProducerBuilder {\n         default AdvancedHazelcastTopicEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         ret = getMS().deletePartitionColumnStatistics(dbName, tableName,\n                                                       convertedPartName, partVals, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_partition: \", ret != false);\n       }\n       return ret;\n     }", "fixed": "         ret = getMS().deletePartitionColumnStatistics(dbName, tableName,\n                                                       convertedPartName, partVals, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_partition: \", ret != false, null);\n       }\n       return ret;\n     }", "sourceBeforeFix": "endFunction(\"delete_column_statistics_by_partition: \",ret != false)", "sourceAfterFix": "endFunction(\"delete_column_statistics_by_partition: \",ret != false,null)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "28012b50ce6ee39b180978ae71682657cc461eb8", "projectName": "apache.hbase", "bugType": "Less Specific If", "problem": "     if (curOps > 0) {\n       long curTime = this.getPreviousIntervalAverageTime();\n       long totalTime = curTime * curOps;\n      if (totalTime / curTime == curOps) {\n         super.inc(curOps, totalTime);\n       } else {\n         LOG.info(\"Stats for \" + this.getName() + \" overflowed! resetting\");", "fixed": "     if (curOps > 0) {\n       long curTime = this.getPreviousIntervalAverageTime();\n       long totalTime = curTime * curOps;\n      if (curTime == 0 || totalTime / curTime == curOps) {\n         super.inc(curOps, totalTime);\n       } else {\n         LOG.info(\"Stats for \" + this.getName() + \" overflowed! resetting\");", "sourceBeforeFix": "totalTime / curTime == curOps", "sourceAfterFix": "curTime == 0 || totalTime / curTime == curOps"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SoroushBotEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSoroushBotEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SoroushBotEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSoroushBotEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.info(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "fixed": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "sourceBeforeFix": "logger.info(\"Remove try/catch/finally\")", "sourceAfterFix": "logger.fine(\"Remove try/catch/finally\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "544edb296479cbd05f35381b20a651e9d022e197", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 1000; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "fixed": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(200);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 200; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "sourceBeforeFix": "getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000)", "sourceAfterFix": "getMockEndpoint(\"mock:\" + i).expectedMessageCount(200)"}
{"fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    public void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {", "fixed": "         }\n     }\n    public synchronized void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "fixed": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)", "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "5992b8ccbc9bc21d353ec3738c3f8994dfc3bbf8", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.getPath(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "fixed": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.toString(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "sourceBeforeFix": "dstPath.getPath()", "sourceAfterFix": "dstPath.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   }\n   public void normalize() {\n    logger.info(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "fixed": "   }\n   public void normalize() {\n    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "sourceBeforeFix": "logger.info(\"Normalizing\")", "sourceAfterFix": "logger.fine(\"Normalizing\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedReactiveStreamsEndpointBuilder\n             extends\n                 AdvancedReactiveStreamsEndpointConsumerBuilder, AdvancedReactiveStreamsEndpointProducerBuilder {\n         default ReactiveStreamsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedReactiveStreamsEndpointBuilder\n             extends\n                 AdvancedReactiveStreamsEndpointConsumerBuilder, AdvancedReactiveStreamsEndpointProducerBuilder {\n         default ReactiveStreamsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ef43827a7b481bc19b5d738a4c94b62294293eea", "projectName": "brettwooldridge.HikariCP", "bugType": "Wrong Function Name", "problem": "                softEvictConnections();\n                abortActiveConnections(assassinExecutor);\n             }\n            while (getTotalConnections() > 0 && elapsedTimeMs(start) < TimeUnit.SECONDS.toNanos(5));\n          } finally {\n             assassinExecutor.shutdown();\n             assassinExecutor.awaitTermination(5L, TimeUnit.SECONDS);", "fixed": "                softEvictConnections();\n                abortActiveConnections(assassinExecutor);\n             }\n            while (getTotalConnections() > 0 && elapsedTimeMs(start) < TimeUnit.SECONDS.toMillis(5));\n          } finally {\n             assassinExecutor.shutdown();\n             assassinExecutor.awaitTermination(5L, TimeUnit.SECONDS);", "sourceBeforeFix": "TimeUnit.SECONDS.toNanos(5)", "sourceAfterFix": "TimeUnit.SECONDS.toMillis(5)"}
{"fixCommitSHA1": "8c4de8abcd7ae84928b6290a51b4e680b9ee9ae2", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic PolygonSpriteBatch (int maxVertices, int maxTriangles, ShaderProgram defaultShader) {\r\n \t\tif (maxVertices > 32767)\r\n\t\t\tthrow new IllegalArgumentException(\"Can't have more than 32767 vertices per batch: \" + maxTriangles);\r\n \t\tMesh.VertexDataType vertexDataType = Mesh.VertexDataType.VertexArray;\r\n \t\tif (Gdx.gl30 != null) {\r", "fixed": " \tpublic PolygonSpriteBatch (int maxVertices, int maxTriangles, ShaderProgram defaultShader) {\r\n \t\tif (maxVertices > 32767)\r\n\t\t\tthrow new IllegalArgumentException(\"Can't have more than 32767 vertices per batch: \" + maxVertices);\r\n \t\tMesh.VertexDataType vertexDataType = Mesh.VertexDataType.VertexArray;\r\n \t\tif (Gdx.gl30 != null) {\r", "sourceBeforeFix": "\"Can't have more than 32767 vertices per batch: \" + maxTriangles", "sourceAfterFix": "\"Can't have more than 32767 vertices per batch: \" + maxVertices"}
{"fixCommitSHA1": "ee9057ad99b9cc95140ee3e56265f32b6a28d709", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 setExposeHeaders(response);\n             }\n         }\n        ctx.writeAndFlush(msg, promise);\n     }\n     private static void forbidden(final ChannelHandlerContext ctx, final HttpRequest request) {", "fixed": "                 setExposeHeaders(response);\n             }\n         }\n        ctx.write(msg, promise);\n     }\n     private static void forbidden(final ChannelHandlerContext ctx, final HttpRequest request) {", "sourceBeforeFix": "ctx.writeAndFlush(msg,promise)", "sourceAfterFix": "ctx.write(msg,promise)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cbb7f2cf26daf213a6265a99fc27980bfcf4ff89", "projectName": "apache.camel", "bugType": "Delete Throws Exception", "problem": "         return BeanInfo.createParameterMappingStrategy(context);\n     }\n    protected Object lookupBean() throws Exception {\n         return registry.lookup(name);\n     }\n }", "fixed": "         return BeanInfo.createParameterMappingStrategy(context);\n     }\n    protected Object lookupBean() {\n         return registry.lookup(name);\n     }\n }", "sourceBeforeFix": "4", "sourceAfterFix": "4"}
{"fixCommitSHA1": "e89837b42ece86ae3a0efc8ba272f550c98cd33c", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param ast DetailAST node.\n      * @return Line number if non-comment node exists, -1 otherwise.\n      */\n    private int findLineNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {", "fixed": "      * @param ast DetailAST node.\n      * @return Line number if non-comment node exists, -1 otherwise.\n      */\n    private static int findLineNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "5cc0714840bf8f7797a118e4bac5dabdd20e3f67", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  protected boolean areSomeRegionReplicasColocated(Cluster c) {\n     regionReplicaHostCostFunction.init(c);\n     if (regionReplicaHostCostFunction.cost() > 0) return true;\n     regionReplicaRackCostFunction.init(c);", "fixed": "   }\n   @Override\n  protected synchronized boolean areSomeRegionReplicasColocated(Cluster c) {\n     regionReplicaHostCostFunction.init(c);\n     if (regionReplicaHostCostFunction.cost() > 0) return true;\n     regionReplicaRackCostFunction.init(c);", "sourceBeforeFix": "4", "sourceAfterFix": "36"}
{"fixCommitSHA1": "c03521fd86fa3352841c04e9b0d4c89e4990c02c", "projectName": "apache.hadoop", "bugType": "Same Function Less Args", "problem": "       List<String> retCommand = new ArrayList<String>();\n       retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n           Integer.toString(containerSchedPriorityAdjustment)));\n      retCommand.addAll(Arrays.asList(\"bash\", \"-c\", command));\n       return retCommand.toArray(new String[retCommand.size()]);\n     }\n   }   ", "fixed": "       List<String> retCommand = new ArrayList<String>();\n       retCommand.addAll(Arrays.asList(\"nice\", \"-n\",\n           Integer.toString(containerSchedPriorityAdjustment)));\n      retCommand.addAll(Arrays.asList(\"bash\", command));\n       return retCommand.toArray(new String[retCommand.size()]);\n     }\n   }   ", "sourceBeforeFix": "Arrays.asList(\"bash\",\"-c\",command)", "sourceAfterFix": "Arrays.asList(\"bash\",command)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.debug(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "fixed": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")", "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"}
{"fixCommitSHA1": "097a6b00c39c7dee3b2d6d321a7fe5b3eb626fb0", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n    LOG.info(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);", "fixed": "       builder.setOpenUfsBlockOptions(openUfsBlockOptions);\n     }\n    LOG.debug(\"Creating netty input stream for block {} @ {} from client {}\", blockId, address,\n         NetworkAddressUtils.getClientHostName());\n     return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),\n         blockSize, options);", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "9f5dd0f7caa451c4d1620467f13be87bd9ae3f71", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     DeleteBuffer deleteBuffer = new DeleteBuffer();\n     UnderFileStatus[] pathsToDelete = listInternal(path, ListOptions.defaults().setRecursive(true));\n     if (pathsToDelete == null) {\n      LOG.error(\"Unable to delete {} because listInternal returns null\", path);\n       return false;\n     }\n     for (UnderFileStatus pathToDelete : pathsToDelete) {", "fixed": "     DeleteBuffer deleteBuffer = new DeleteBuffer();\n     UnderFileStatus[] pathsToDelete = listInternal(path, ListOptions.defaults().setRecursive(true));\n     if (pathsToDelete == null) {\n      LOG.warn(\"Unable to delete {} because listInternal returns null\", path);\n       return false;\n     }\n     for (UnderFileStatus pathToDelete : pathsToDelete) {", "sourceBeforeFix": "LOG.error(\"Unable to delete {} because listInternal returns null\",path)", "sourceAfterFix": "LOG.warn(\"Unable to delete {} because listInternal returns null\",path)"}
{"fixCommitSHA1": "2798f6edf82b64780fd846aaa5b860185c87f915", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\tkoala.stateTime += deltaTime;\r\n\t\tif ((Gdx.input.isKeyPressed(Keys.SPACE) || isTouched(0.75f, 1)) && koala.grounded) {\r\n \t\t\tkoala.velocity.y += Koala.JUMP_VELOCITY;\r\n \t\t\tkoala.state = Koala.State.Jumping;\r\n \t\t\tkoala.grounded = false;\r", "fixed": " \t\tkoala.stateTime += deltaTime;\r\n\t\tif ((Gdx.input.isKeyPressed(Keys.SPACE) || isTouched(0.5f, 1)) && koala.grounded) {\r\n \t\t\tkoala.velocity.y += Koala.JUMP_VELOCITY;\r\n \t\t\tkoala.state = Koala.State.Jumping;\r\n \t\t\tkoala.grounded = false;\r", "sourceBeforeFix": "Gdx.input.getX()", "sourceAfterFix": "Gdx.input.getX(i)"}
{"fixCommitSHA1": "7970b18a7777501be8290f7fff70e1ad1cf172ad", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\tgraphics = new AndroidGraphicsLiveWallpaper(this, config.useGL20, config.resolutionStrategy==null?new FillResolutionStrategy():config.resolutionStrategy);\r\n \t\tinput = AndroidInputFactory.newAndroidInput(this, this.getService(), null, config);\r\n \t\taudio = new AndroidAudio(this.getService(), config);\r\n\t\tfiles = new AndroidFiles(this.getService().getAssets());\r\n \t\tthis.listener = listener;\r\n \t\tGdx.app = this;\r", "fixed": " \t\tgraphics = new AndroidGraphicsLiveWallpaper(this, config.useGL20, config.resolutionStrategy==null?new FillResolutionStrategy():config.resolutionStrategy);\r\n \t\tinput = AndroidInputFactory.newAndroidInput(this, this.getService(), null, config);\r\n \t\taudio = new AndroidAudio(this.getService(), config);\r\n\t\tfiles = new AndroidFiles(this.getService().getAssets(), this.getService().getFilesDir().getAbsolutePath());\r\n \t\tthis.listener = listener;\r\n \t\tGdx.app = this;\r", "sourceBeforeFix": "new AndroidFiles(this.getService().getAssets())", "sourceAfterFix": "new AndroidFiles(this.getService().getAssets(),this.getService().getFilesDir().getAbsolutePath())"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "9a9b02c330e9e452f37335d0e59c462175bb5df7", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForRole\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRole\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRole\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRole\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Z\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Z\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "eeeb1de4d4c7595fab59b51f0c31292e6d5d7fad", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "             } catch (RejectedExecutionException e) {\n              List<CoreMap> failedSentences = wrapper.shutdownNow();\n               for (CoreMap failed : failedSentences) {\n                 doOneFailedSentence(annotation, failed);\n               }", "fixed": "             } catch (RejectedExecutionException e) {\n              List<CoreMap> failedSentences = wrapper.joinWithTimeout();\n               for (CoreMap failed : failedSentences) {\n                 doOneFailedSentence(annotation, failed);\n               }", "sourceBeforeFix": "wrapper.shutdownNow()", "sourceAfterFix": "wrapper.joinWithTimeout()"}
{"fixCommitSHA1": "bfa984ccd5ef4b7eef802f54999fc947531ef51f", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t@Bean\n \t@ConditionalOnMissingBean(PersistenceExceptionTranslationPostProcessor.class)\n \t@ConditionalOnProperty(prefix = \"spring.dao.exceptiontranslation\", name = \"enabled\", matchIfMissing = true)\n\tpublic PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor() {\n \t\tPersistenceExceptionTranslationPostProcessor postProcessor = new PersistenceExceptionTranslationPostProcessor();\n \t\tpostProcessor.setProxyTargetClass(true);\n \t\treturn postProcessor;", "fixed": " \t@Bean\n \t@ConditionalOnMissingBean(PersistenceExceptionTranslationPostProcessor.class)\n \t@ConditionalOnProperty(prefix = \"spring.dao.exceptiontranslation\", name = \"enabled\", matchIfMissing = true)\n\tpublic static PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor() {\n \t\tPersistenceExceptionTranslationPostProcessor postProcessor = new PersistenceExceptionTranslationPostProcessor();\n \t\tpostProcessor.setProxyTargetClass(true);\n \t\treturn postProcessor;", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "             public void configure() {\n                 from(\"direct:start\").beanRef(\"myBean\", \"route\").to(\"mock:result\");\n                from(\"direct:a\").delay(3000).setBody(constant(\"A\"));\n                 from(\"direct:b\").setBody(constant(\"B\"));", "fixed": "             public void configure() {\n                 from(\"direct:start\").beanRef(\"myBean\", \"route\").to(\"mock:result\");\n                from(\"direct:a\").delay(2000).setBody(constant(\"A\"));\n                 from(\"direct:b\").setBody(constant(\"B\"));", "sourceBeforeFix": "assertEquals(2000,timeout)", "sourceAfterFix": "assertEquals(1000,timeout)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": "\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": "\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     }\n     private static String getNodeText(Node node, boolean fixLinks) {\n        final StringBuffer result = new StringBuffer(20);\n         for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n             if (child.getNodeType() == Node.TEXT_NODE) {", "fixed": "     }\n     private static String getNodeText(Node node, boolean fixLinks) {\n        final StringBuilder result = new StringBuilder(20);\n         for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n             if (child.getNodeType() == Node.TEXT_NODE) {", "sourceBeforeFix": "final StringBuffer result=new StringBuffer(20); ", "sourceAfterFix": "final StringBuilder result=new StringBuilder(20); "}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0592e84a3c07b4451e81d2eecc0c51af384858d2", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "     }\n     public static void gracefulShutdown(Executor executor, int timeout) {\n        if (!(executor instanceof ExecutorService) || isShutdown(executor)) {\n             return;\n         }\n         final ExecutorService es = (ExecutorService) executor;", "fixed": "     }\n     public static void gracefulShutdown(Executor executor, int timeout) {\n        if (!(executor instanceof ExecutorService) || isTerminated(executor)) {\n             return;\n         }\n         final ExecutorService es = (ExecutorService) executor;", "sourceBeforeFix": "((ExecutorService)executor).isShutdown()", "sourceAfterFix": "((ExecutorService)executor).isTerminated()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "42b44935272ecf97acca3b7c9fe90b45fd8e01d2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "          * that you do not get duplicate copies of messages already on your\n          * page.\n          */\n        private Integer newerThan = -1;\n         /**\n          * threaded=true will only return the first message in each thread. This\n          * parameter is intended for apps which display message threads", "fixed": "          * that you do not get duplicate copies of messages already on your\n          * page.\n          */\n        private Long newerThan = -1L;\n         /**\n          * threaded=true will only return the first message in each thread. This\n          * parameter is intended for apps which display message threads", "sourceBeforeFix": "public Integer getOlderThan(){   return olderThan; } ", "sourceAfterFix": "public Long getOlderThan(){   return olderThan; } "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleMailEndpointBuilder\n             extends\n                 AdvancedGoogleMailEndpointConsumerBuilder, AdvancedGoogleMailEndpointProducerBuilder {\n         default GoogleMailEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleMailEndpointBuilder\n             extends\n                 AdvancedGoogleMailEndpointConsumerBuilder, AdvancedGoogleMailEndpointProducerBuilder {\n         default GoogleMailEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e69f5321a7a2a446599b1b8e6a7f3d45dfbfa9eb", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": " \t\tlogger.debug(\"Got RemoveFailedNode response.\");\n \t\tint nodeId = lastSentMessage.getMessagePayloadByte(0);\n\t\tswitch(incomingMessage.getMessagePayloadByte(1)) {\n \t\t\tcase FAILED_NODE_REMOVE_STARTED:\n \t\t\t\tlogger.debug(\"NODE {}: Remove failed node successfully placed on stack.\", nodeId);\n \t\t\t\tbreak;", "fixed": " \t\tlogger.debug(\"Got RemoveFailedNode response.\");\n \t\tint nodeId = lastSentMessage.getMessagePayloadByte(0);\n\t\tswitch(incomingMessage.getMessagePayloadByte(0)) {\n \t\t\tcase FAILED_NODE_REMOVE_STARTED:\n \t\t\t\tlogger.debug(\"NODE {}: Remove failed node successfully placed on stack.\", nodeId);\n \t\t\t\tbreak;", "sourceBeforeFix": "incomingMessage.getMessagePayloadByte(1)", "sourceAfterFix": "incomingMessage.getMessagePayloadByte(0)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tNSString value = (NSString)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "fixed": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tObject value = nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "sourceBeforeFix": "value.longValue()", "sourceAfterFix": "value.longLongValue()"}
{"fixCommitSHA1": "8b818e85bd284561e9541a12aa6e004847f59811", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS =\n       DiagnosticType.warning(\n           \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n          \"Shift amount out of bounds: {0}\");\n   static final DiagnosticType FRACTIONAL_BITWISE_OPERAND =\n       DiagnosticType.warning(", "fixed": "   static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS =\n       DiagnosticType.warning(\n           \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n          \"Shift amount out of bounds (see right operand): {0}\");\n   static final DiagnosticType FRACTIONAL_BITWISE_OPERAND =\n       DiagnosticType.warning(", "sourceBeforeFix": "report(SHIFT_AMOUNT_OUT_OF_BOUNDS,right)", "sourceAfterFix": "report(SHIFT_AMOUNT_OUT_OF_BOUNDS,n)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMyBatisEndpointBuilder\n             extends\n                 AdvancedMyBatisEndpointConsumerBuilder, AdvancedMyBatisEndpointProducerBuilder {\n         default MyBatisEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMyBatisEndpointBuilder\n             extends\n                 AdvancedMyBatisEndpointConsumerBuilder, AdvancedMyBatisEndpointProducerBuilder {\n         default MyBatisEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "885f7d1e71f16d5051ea7a71fb522ebf85821e97", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                             }\n                         });\n                        configuration.addClientInterceptor(method, factory, InterceptorOrder.View.COMPONENT_DISPATCHER);\n                     }\n                 }", "fixed": "                             }\n                         });\n                        configuration.addViewInterceptor(method, factory, InterceptorOrder.View.COMPONENT_DISPATCHER);\n                     }\n                 }", "sourceBeforeFix": "configuration.addClientInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)", "sourceAfterFix": "configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Kubernetes Replication Controller\n      * component.\n      */\n    public static interface AdvancedKubernetesReplicationControllersEndpointBuilder\n             extends\n                 AdvancedKubernetesReplicationControllersEndpointConsumerBuilder, AdvancedKubernetesReplicationControllersEndpointProducerBuilder {\n         default KubernetesReplicationControllersEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Kubernetes Replication Controller\n      * component.\n      */\n    public interface AdvancedKubernetesReplicationControllersEndpointBuilder\n             extends\n                 AdvancedKubernetesReplicationControllersEndpointConsumerBuilder, AdvancedKubernetesReplicationControllersEndpointProducerBuilder {\n         default KubernetesReplicationControllersEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bd1e046a1936703ac62a693a0e44fbb88398a927", "projectName": "dropwizard.dropwizard", "bugType": "Change Modifier", "problem": "     }\n     @VisibleForTesting\n    static void setLog(Logger newLog) {\n        log = newLog;\n     }\n }", "fixed": "     }\n     @VisibleForTesting\n    static synchronized void setLog(Logger newLog) {\n        log = newLog;\n     }\n }", "sourceBeforeFix": "8", "sourceAfterFix": "40"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\t\tfinal TaskSubmissionResult result = new TaskSubmissionResult(vertexID,\n \t\t\t\t\tAbstractTaskResult.ReturnCode.DEPLOYMENT_ERROR);\n \t\t\t\tresult.setDescription(StringUtils.stringifyException(t));\n\t\t\t\tLOG.error(result.getDescription());\n \t\t\t\tsubmissionResultList.add(result);\n \t\t\t\tcontinue;\n \t\t\t}", "fixed": " \t\t\t\tfinal TaskSubmissionResult result = new TaskSubmissionResult(vertexID,\n \t\t\t\t\tAbstractTaskResult.ReturnCode.DEPLOYMENT_ERROR);\n \t\t\t\tresult.setDescription(StringUtils.stringifyException(t));\n\t\t\t\tLOG.error(result.getDescription(), t);\n \t\t\t\tsubmissionResultList.add(result);\n \t\t\t\tcontinue;\n \t\t\t}", "sourceBeforeFix": "LOG.error(result.getDescription())", "sourceAfterFix": "LOG.error(result.getDescription(),e)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   }\n  private boolean isIdentifierPart(char ch) {", "fixed": "     }\n   }\n  private static boolean isIdentifierPart(char ch) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3a43345ad0a599659d462cfc14dba9d8c0553bbf", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         final ClosingRetentionStrategyConfig closingRetentionStrategyConfig = clusterConfigService.get(ClosingRetentionStrategyConfig.class);\n        final DeletionRetentionStrategy deletionRetentionStrategy = clusterConfigService.get(DeletionRetentionStrategy.class);\n         if (closingRetentionStrategyConfig == null) {\n             final ClosingRetentionStrategyConfig closingConfig = ClosingRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());", "fixed": "         final ClosingRetentionStrategyConfig closingRetentionStrategyConfig = clusterConfigService.get(ClosingRetentionStrategyConfig.class);\n        final DeletionRetentionStrategyConfig deletionRetentionStrategyConfig = clusterConfigService.get(DeletionRetentionStrategyConfig.class);\n         if (closingRetentionStrategyConfig == null) {\n             final ClosingRetentionStrategyConfig closingConfig = ClosingRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());", "sourceBeforeFix": "deletionRetentionStrategy == null", "sourceAfterFix": "deletionRetentionStrategyConfig == null"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "bf40d52edbb88d5afaa35af24837e3b72ac84eab", "projectName": "square.okhttp", "bugType": "Change Identifier Used", "problem": "* https:\n    */\n   @Test public void sameConnectionRedirectAndReuse() throws Exception {\n     urlFactory.setClient(urlFactory.client().newBuilder()\n        .dns(new DoubleInetAddressDns())\n         .build());\n     server.enqueue(new MockResponse()\n         .setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)", "fixed": "* https:\n    */\n   @Test public void sameConnectionRedirectAndReuse() throws Exception {\n     urlFactory.setClient(urlFactory.client().newBuilder()\n        .dns(new SingleInetAddressDns())\n         .build());\n     server.enqueue(new MockResponse()\n         .setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)", "sourceBeforeFix": "new DoubleInetAddressDns()", "sourceAfterFix": "new SingleInetAddressDns()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9cb9e88e6635a0eae34b6f035363da8d97b003fb", "projectName": "libgdx.libgdx", "bugType": "Change Modifier", "problem": " import com.badlogic.gdx.scenes.scene2d.Actor;\r\n public class Image extends Actor {\r\n\tpublic final TextureRegion region;\r\n \tpublic Image (String name) {\r\n \t\tsuper(name);\r", "fixed": " import com.badlogic.gdx.scenes.scene2d.Actor;\r\n public class Image extends Actor {\r\n\tpublic TextureRegion region;\r\n \tpublic Image (String name) {\r\n \t\tsuper(name);\r", "sourceBeforeFix": "17", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "28a04af5f4b957b75ba7dbf6486999b75547673c", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tfor (int i = 0; i < 2; i++) {\r\n\t\t\tfloat x = Gdx.input.getX() / (float)Gdx.graphics.getWidth();\r\n \t\t\tif (Gdx.input.isTouched(i) && (x >= startX && x <= endX)) {\r\n \t\t\t\treturn true;\r\n \t\t\t}\r", "fixed": " \t\tfor (int i = 0; i < 2; i++) {\r\n\t\t\tfloat x = Gdx.input.getX(i) / (float)Gdx.graphics.getWidth();\r\n \t\t\tif (Gdx.input.isTouched(i) && (x >= startX && x <= endX)) {\r\n \t\t\t\treturn true;\r\n \t\t\t}\r", "sourceBeforeFix": "isTouched(0.75f,1)", "sourceAfterFix": "isTouched(0.5f,1)"}
{"fixCommitSHA1": "4c5264d4b3c9fd50ffe24a43a046e1e101a08854", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "           printUsageAndExit(options, -1);\n         }\n       } else {\n        listenAddress = InetAddress.getLocalHost();\n       }\n       TServerTransport serverTransport = new TServerSocket(new InetSocketAddress(listenAddress, listenPort));", "fixed": "           printUsageAndExit(options, -1);\n         }\n       } else {\n        listenAddress = InetAddress.getByName(\"0.0.0.0\");\n       }\n       TServerTransport serverTransport = new TServerSocket(new InetSocketAddress(listenAddress, listenPort));", "sourceBeforeFix": "InetAddress.getLocalHost()", "sourceAfterFix": "InetAddress.getByName(\"0.0.0.0\")"}
{"fixCommitSHA1": "9be644847ecd6c621d8267acebc7c0aa0f13063b", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     return Arrays.<Module>asList(\n         new SimpleModule(\"KafkaEightFirehoseModule\")\n             .registerSubtypes(\n                new NamedType(KafkaEightDruidModule.class, \"kafka-0.8\")\n             )\n     );\n   }", "fixed": "     return Arrays.<Module>asList(\n         new SimpleModule(\"KafkaEightFirehoseModule\")\n             .registerSubtypes(\n                new NamedType(KafkaEightFirehoseFactory.class, \"kafka-0.8\")\n             )\n     );\n   }", "sourceBeforeFix": "KafkaEightDruidModule.class", "sourceAfterFix": "KafkaEightFirehoseFactory.class"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "46c5f900bcc46e5340101decda81c214a467ffe4", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "             @Override\n             public String apply(MaterializedTuple input)\n             {\n                assertEquals(input.getFieldCount(), 3);\n                 return (String) input.getField(0);\n             }\n         }));", "fixed": "             @Override\n             public String apply(MaterializedTuple input)\n             {\n                assertEquals(input.getFieldCount(), 4);\n                 return (String) input.getField(0);\n             }\n         }));", "sourceBeforeFix": "assertEquals(input.getFieldCount(),3)", "sourceAfterFix": "assertEquals(input.getFieldCount(),4)"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n  Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();", "fixed": "    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n  public Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ed6b93c315cebbf53ffecd330f0835a791dad92c", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         List<String> result = new ArrayList<String>();\n        Module module = Module.getModuleFromCallerModuleLoader(ModuleIdentifier.create(moduleName));\n         ModuleClassLoader mcl = module.getClassLoader();\n         Field pathsField = ModuleClassLoader.class.getDeclaredField(\"paths\");\n         Field sourceListField = null;", "fixed": "         List<String> result = new ArrayList<String>();\n        Module module = Module.getModuleFromCallerModuleLoader(ModuleIdentifier.fromString(moduleName));\n         ModuleClassLoader mcl = module.getClassLoader();\n         Field pathsField = ModuleClassLoader.class.getDeclaredField(\"paths\");\n         Field sourceListField = null;", "sourceBeforeFix": "ModuleIdentifier.create(moduleName)", "sourceAfterFix": "ModuleIdentifier.fromString(moduleName)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "590a70ac4a9bcca08c39cbf63b76756642cde1fc", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "   @Test\n   public void createFileWithTtlTest() throws Exception {\n     CreateFileOptions options =\n        CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1);\n     long fileId = mFileSystemMaster.createFile(NESTED_FILE_URI, options);\n     FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId);\n     Assert.assertEquals(fileInfo.getFileId(), fileId);", "fixed": "   @Test\n   public void createFileWithTtlTest() throws Exception {\n     CreateFileOptions options =\n        CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0);\n     long fileId = mFileSystemMaster.createFile(NESTED_FILE_URI, options);\n     FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId);\n     Assert.assertEquals(fileInfo.getFileId(), fileId);", "sourceBeforeFix": "CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1)", "sourceAfterFix": "CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0)"}
