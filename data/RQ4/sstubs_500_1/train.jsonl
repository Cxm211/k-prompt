{"fixCommitSHA1": "251bb1a73961f785ad12dbb3ae92830eca70b8cd", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "     protected final ByteBuf newDirectBuffer(Object holder, ByteBuf buf) {\n         final int readableBytes = buf.readableBytes();\n         if (readableBytes == 0) {\n            ReferenceCountUtil.safeRelease(holder);\n             return Unpooled.EMPTY_BUFFER;\n         }", "fixed": "     protected final ByteBuf newDirectBuffer(Object holder, ByteBuf buf) {\n         final int readableBytes = buf.readableBytes();\n         if (readableBytes == 0) {\n            ReferenceCountUtil.release(holder);\n             return Unpooled.EMPTY_BUFFER;\n         }", "sourceBeforeFix": "ReferenceCountUtil.safeRelease(holder)", "sourceAfterFix": "ReferenceCountUtil.release(holder)"}
{"fixCommitSHA1": "9d29b3be6a155045aa07ed40d01c9edbaef19b3d", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       FileStatus fStatus = mFileSystem.getFileStatus(new Path(path));\n       BlockLocation[] bLocations = mFileSystem.getFileBlockLocations(fStatus, offset, 1);\n       if (bLocations.length > 0) {\n        String[] names = bLocations[0].getNames();\n         Collections.addAll(ret, names);\n       }\n     } catch (IOException e) {", "fixed": "       FileStatus fStatus = mFileSystem.getFileStatus(new Path(path));\n       BlockLocation[] bLocations = mFileSystem.getFileBlockLocations(fStatus, offset, 1);\n       if (bLocations.length > 0) {\n        String[] names = bLocations[0].getHosts();\n         Collections.addAll(ret, names);\n       }\n     } catch (IOException e) {", "sourceBeforeFix": "bLocations[0].getNames()", "sourceAfterFix": "bLocations[0].getHosts()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MicrometerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMicrometerEndpointBuilder advanced() {", "fixed": "     \n    public interface MicrometerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMicrometerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n        return Byte.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n        return Byte.parseByte(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Byte.valueOf(value.toString())", "sourceAfterFix": "Byte.parseByte(value.toString())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").toString())));\n \t}\n \t@Test", "fixed": " \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").getPath())));\n \t}\n \t@Test", "sourceBeforeFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").toString()", "sourceAfterFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").getPath()"}
{"fixCommitSHA1": "ce53a6874b919d79f06e563b6edd0c7e8302e33f", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": " public class PropertyKey {\n   \n  private static Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();\n   \n  private static Map<PropertyKey, Object> DEFAULT_VALUES = new HashMap<>();\n   public static final PropertyKey CONF_DIR =\n       create(Name.CONF_DIR, String.format(\"${%s}/conf\", Name.HOME));", "fixed": " public class PropertyKey {\n   \n  private static final Map<String, PropertyKey> DEFAULT_KEYS_MAP = new HashMap<>();\n   \n  private static final Map<PropertyKey, Object> DEFAULT_VALUES = new HashMap<>();\n   public static final PropertyKey CONF_DIR =\n       create(Name.CONF_DIR, String.format(\"${%s}/conf\", Name.HOME));", "sourceBeforeFix": "10", "sourceAfterFix": "26"}
{"fixCommitSHA1": "09b35af981f85d357790a6e6a15ed8cc427aa379", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "             @Override\n             public boolean matches(Object o) {\n               ContainerRequest request = (ContainerRequest) o;\n              if (request.getRelaxLocality() == false\n                   && request.getNodes().size() == 1\n                   && request.getNodes().get(0).equals(\"localhost\")) {\n                 return true;", "fixed": "             @Override\n             public boolean matches(Object o) {\n               ContainerRequest request = (ContainerRequest) o;\n              if (request.getRelaxLocality() == true\n                   && request.getNodes().size() == 1\n                   && request.getNodes().get(0).equals(\"localhost\")) {\n                 return true;", "sourceBeforeFix": "request.getRelaxLocality() == false", "sourceAfterFix": "request.getRelaxLocality() == true"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "32f165cbc33d96609efab90bc4967278c975d0ef", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             op.run();\n             op.afterRun();\n         }\n        getOrCreateContainer().unlock(dataKey, caller, threadId);\n     }\n     protected void writeInternal(ObjectDataOutput out) throws IOException {", "fixed": "             op.run();\n             op.afterRun();\n         }\n        getOrCreateContainer().forceUnlock(dataKey);\n     }\n     protected void writeInternal(ObjectDataOutput out) throws IOException {", "sourceBeforeFix": "getOrCreateContainer().unlock(dataKey,caller,threadId)", "sourceAfterFix": "getOrCreateContainer().forceUnlock(dataKey)"}
{"fixCommitSHA1": "14ceda3b0cb8b2055a05c6c6984aa785b8864563", "projectName": "brettwooldridge.HikariCP", "bugType": "Wrong Function Name", "problem": "                connection.isValid(1);\n             }\n             catch (Throwable e) {\n               LOGGER.warn(\"{} - Failed to execute isValid() for connection, configure connection test query. ({})\", poolName, e.getMessage());\n                throw e;\n             }\n          }", "fixed": "                connection.isValid(1);\n             }\n             catch (Throwable e) {\n               LOGGER.error(\"{} - Failed to execute isValid() for connection, configure connection test query. ({})\", poolName, e.getMessage());\n                throw e;\n             }\n          }", "sourceBeforeFix": "LOGGER.warn(\"{} - Failed to execute connection test query. ({})\",poolName,e.getMessage())", "sourceAfterFix": "LOGGER.error(\"{} - Failed to execute connection test query. ({})\",poolName,e.getMessage())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "5b669bd30cef473ddf2c0c0318652a938d8d3428", "projectName": "stanfordnlp.CoreNLP", "bugType": "Wrong Function Name", "problem": "         doAnnotation(annotation, backend, serverURL, message, 0);\n       } catch (Throwable t) {\n        log.warn(\"Could not annotate via server! Trying to annotate locally...\", t);\n         StanfordCoreNLP corenlp = new StanfordCoreNLP(properties);\n         corenlp.annotate(annotation);\n       } finally {", "fixed": "         doAnnotation(annotation, backend, serverURL, message, 0);\n       } catch (Throwable t) {\n        log.err(\"Could not annotate via server! Trying to annotate locally...\", t);\n         StanfordCoreNLP corenlp = new StanfordCoreNLP(properties);\n         corenlp.annotate(annotation);\n       } finally {", "sourceBeforeFix": "log.warn(\"Could not annotate via server! Trying to annotate locally...\",t)", "sourceAfterFix": "log.err(\"Could not annotate via server! Trying to annotate locally...\",t)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoraEndpointBuilder\n             extends\n                 GoraEndpointConsumerBuilder, GoraEndpointProducerBuilder {\n         default AdvancedGoraEndpointBuilder advanced() {", "fixed": "     \n    public interface GoraEndpointBuilder\n             extends\n                 GoraEndpointConsumerBuilder, GoraEndpointProducerBuilder {\n         default AdvancedGoraEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         String annotation)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new NullPointerException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "fixed": "         String annotation)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "9704f6049c41315c3de3fa6be6faf01e62c67863", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"Region Server\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "fixed": "     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\nassertHasExpectedContent(new URL(\"http:\n      \"/index.html\"), \"regionserver\");\n   }\n   private void assertHasExpectedContent(final URL u, final String expected)", "sourceBeforeFix": "content.matches(expected)", "sourceAfterFix": "content.contains(expected)"}
{"fixCommitSHA1": "0a5f26324cfe4eb39eb48947f11364ec39221fa6", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "       scheduler.dispatch(task);\n     }\n     for (CallRunner task : tasks) {\n      verify(task, timeout(1000)).run();\n     }\n     scheduler.stop();", "fixed": "       scheduler.dispatch(task);\n     }\n     for (CallRunner task : tasks) {\n      verify(task, timeout(10000)).run();\n     }\n     scheduler.stop();", "sourceBeforeFix": "timeout(1000)", "sourceAfterFix": "timeout(10000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3c8d3e908b01f47c69600a235fb7e5173f4f0d7b", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   \n  public final Iterable<ObjectType> getImplementedInterfaces() {\n     FunctionType superCtor = isConstructor() ? getSuperClassConstructor() : null;\n     if (superCtor == null) {\n       return implementedInterfaces;", "fixed": "   }\n   \n  public final ImmutableList<ObjectType> getImplementedInterfaces() {\n     FunctionType superCtor = isConstructor() ? getSuperClassConstructor() : null;\n     if (superCtor == null) {\n       return implementedInterfaces;", "sourceBeforeFix": "Iterable<ObjectType>", "sourceAfterFix": "ImmutableList<ObjectType>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServerEndpointBuilder\n             extends\n                 ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {\n         default AdvancedServerEndpointBuilder advanced() {", "fixed": "     \n    public interface ServerEndpointBuilder\n             extends\n                 ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {\n         default AdvancedServerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       }\n     }\n    logger.info(sb.toString());\n   }", "fixed": "       }\n     }\n    logger.fine(sb.toString());\n   }", "sourceBeforeFix": "logger.info(sb.toString())", "sourceAfterFix": "logger.fine(sb.toString())"}
{"fixCommitSHA1": "09b35af981f85d357790a6e6a15ed8cc427aa379", "projectName": "Alluxio.alluxio", "bugType": "Change Unary Operator\t", "problem": "     Priority priority;\n     if (mPreferredHost != null) {\n       hosts = new String[]{mPreferredHost};\n      relaxLocality = !mPreferredHost.equals(\"localhost\");\n       priority = Priority.newInstance(100);\n     } else {\n       hosts = getPotentialWorkerHosts();", "fixed": "     Priority priority;\n     if (mPreferredHost != null) {\n       hosts = new String[]{mPreferredHost};\n      relaxLocality = mPreferredHost.equals(\"localhost\");\n       priority = Priority.newInstance(100);\n     } else {\n       hosts = getPotentialWorkerHosts();", "sourceBeforeFix": "!mPreferredHost.equals(\"localhost\")", "sourceAfterFix": "mPreferredHost.equals(\"localhost\")"}
{"fixCommitSHA1": "303eb811e0432ef3e843c20cbc282a1bf0007d2a", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public void stopTest() throws Exception {\n     mMaster.stop();\n     Mockito.verify(mRMClient).unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, \"\", \"\");\n    Mockito.verify(mRMClient).start();\n   }\n   /**", "fixed": "   public void stopTest() throws Exception {\n     mMaster.stop();\n     Mockito.verify(mRMClient).unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, \"\", \"\");\n    Mockito.verify(mRMClient).stop();\n   }\n   /**", "sourceBeforeFix": "Mockito.verify(mRMClient).start()", "sourceAfterFix": "Mockito.verify(mRMClient).stop()"}
{"fixCommitSHA1": "4cd605c0ba9ffb261eac64f17d17bf1cba8a1368", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "         for (String uri : uris) {\n             initialNodes[i++] = URI.create(uri);\n         }\n        final String timezone = app.configuration().getString(\"timezone\");\n         if (!timezone.isEmpty()) {\n             try {\n                 Tools.setApplicationTimeZone(DateTimeZone.forID(timezone));", "fixed": "         for (String uri : uris) {\n             initialNodes[i++] = URI.create(uri);\n         }\n        final String timezone = app.configuration().getString(\"timezone\", \"\");\n         if (!timezone.isEmpty()) {\n             try {\n                 Tools.setApplicationTimeZone(DateTimeZone.forID(timezone));", "sourceBeforeFix": "app.configuration().getString(\"timezone\")", "sourceAfterFix": "app.configuration().getString(\"timezone\",\"\")"}
{"fixCommitSHA1": "61572af5c51afa3897afcf177bed5f8fa8dd5b4a", "projectName": "neo4j.neo4j", "bugType": "Same Function Less Args", "problem": "     public void assertWriteLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n        final RagManager ragManager = new RagManager( tm );\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );", "fixed": "     public void assertWriteLockDoesNotLeakMemory() throws InterruptedException\n     {\n         final TransactionManager tm = mock( TransactionManager.class );\n        final RagManager ragManager = new RagManager();\n         final Object resource = new Object();\n         final RWLock lock = new RWLock( resource, ragManager );\n         final Transaction tx1 = mock( Transaction.class );", "sourceBeforeFix": "new RagManager(tm)", "sourceAfterFix": "new RagManager()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "     return methodDescriptors;\n   }\n  ImmutableSet<ImplemetationMethodDescriptor> implementationMethodDescriptors() {\n     return implementationMethodDescriptors;\n   }", "fixed": "     return methodDescriptors;\n   }\n  ImmutableSet<ImplementationMethodDescriptor> implementationMethodDescriptors() {\n     return implementationMethodDescriptors;\n   }", "sourceBeforeFix": "ImmutableSet<ImplemetationMethodDescriptor>", "sourceAfterFix": "ImmutableSet<ImplementationMethodDescriptor>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "79f0eb86f6a56f04c139af05ae1e74f04af856cc", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "         }\n     }\n    private List<StyleParameter> styles = new ArrayList<StyleParameter>();\n     public final StyleParameter[] styles( StyleParameter... params )\n     {", "fixed": "         }\n     }\n    private final List<StyleParameter> styles = new ArrayList<StyleParameter>();\n     public final StyleParameter[] styles( StyleParameter... params )\n     {", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "db4fc68a550a2a6c42ddc91e7302eca985e9a468", "projectName": "alibaba.canal", "bugType": "More Specific If", "problem": "     protected void stopHeartBeat() {\n         TimerTask heartBeatTimerTask = this.heartBeatTimerTask;\n         super.stopHeartBeat();\n        if (heartBeatTimerTask != null) {\n             MysqlConnection mysqlConnection = ((MysqlDetectingTimeTask) heartBeatTimerTask).getMysqlConnection();\n             try {\n                 mysqlConnection.disconnect();", "fixed": "     protected void stopHeartBeat() {\n         TimerTask heartBeatTimerTask = this.heartBeatTimerTask;\n         super.stopHeartBeat();\n        if (heartBeatTimerTask != null && heartBeatTimerTask instanceof MysqlDetectingTimeTask) {\n             MysqlConnection mysqlConnection = ((MysqlDetectingTimeTask) heartBeatTimerTask).getMysqlConnection();\n             try {\n                 mysqlConnection.disconnect();", "sourceBeforeFix": "heartBeatTimerTask != null", "sourceAfterFix": "heartBeatTimerTask != null && heartBeatTimerTask instanceof MysqlDetectingTimeTask"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZooKeeperEndpointBuilder\n             extends\n                 ZooKeeperEndpointConsumerBuilder, ZooKeeperEndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointBuilder advanced() {", "fixed": "     \n    public interface ZooKeeperEndpointBuilder\n             extends\n                 ZooKeeperEndpointConsumerBuilder, ZooKeeperEndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Failed to get files from \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to get files from \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "61cfdd767197dafcc4f201c5ec7577601b20ce25", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "     private int getStreamId(HttpHeaders httpHeaders) {\n         return httpHeaders.getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),\n            connection.remote().nextStreamId());\n     }\n     @Override", "fixed": "     private int getStreamId(HttpHeaders httpHeaders) {\n         return httpHeaders.getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),\n                                  connection.remote().incrementAndGetNextStreamId());\n     }\n     @Override", "sourceBeforeFix": "connection.remote().nextStreamId()", "sourceAfterFix": "connection.remote().incrementAndGetNextStreamId()"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "499d9d3f89368592549f1ec3701f5a7616113a4c", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"  : r=a ;\\n\");\n \t\tgrammarBuilder.append(\"a : 'x' { \\n\");\n\t\tgrammarBuilder.append(\"fmt.Println(p.GetRuleInvocationStack(nil))\\n\");\n \t\tgrammarBuilder.append(\"} ;\");\n \t\tString grammar = grammarBuilder.toString();\n \t\tString input =\"x\";", "fixed": " \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"  : r=a ;\\n\");\n \t\tgrammarBuilder.append(\"a : 'x' { \\n\");\n\t\tgrammarBuilder.append(\"fmt.Println(antlr.PrintArrayJavaStyle(p.GetRuleInvocationStack(nil)))\\n\");\n \t\tgrammarBuilder.append(\"} ;\");\n \t\tString grammar = grammarBuilder.toString();\n \t\tString input =\"x\";", "sourceBeforeFix": "new StringBuilder(167)", "sourceAfterFix": "new StringBuilder(194)"}
{"fixCommitSHA1": "cad7c1f1b0e23a4a1320d967b17aafcaa0119ace", "projectName": "netty.netty", "bugType": "Same Function More Args", "problem": "         if (byteBuf != null) {\n             byteBuf.release();\n         }\n        byteBuf = wrappedBuffer(byteBuffer);\n         size = newsize;\n         completed = true;\n     }", "fixed": "         if (byteBuf != null) {\n             byteBuf.release();\n         }\n        byteBuf = wrappedBuffer(Integer.MAX_VALUE, byteBuffer);\n         size = newsize;\n         completed = true;\n     }", "sourceBeforeFix": "compositeBuffer()", "sourceAfterFix": "compositeBuffer(Integer.MAX_VALUE)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "89b6af6a05d3c7820afac94137ae105cf800c457", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Less Args", "problem": "                         && typeMods.branchContains(TokenTypes.LITERAL_STATIC);\n         final FieldFrame frame =\n            new FieldFrame(currentFrame, isStaticInnerType, type,\n                 type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF\n                     ? ast.findFirstToken(TokenTypes.IDENT).getText()\n                     : null", "fixed": "                         && typeMods.branchContains(TokenTypes.LITERAL_STATIC);\n         final FieldFrame frame =\n            new FieldFrame(currentFrame, isStaticInnerType,\n                 type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF\n                     ? ast.findFirstToken(TokenTypes.IDENT).getText()\n                     : null", "sourceBeforeFix": "new FieldFrame(null,true,null,null)", "sourceAfterFix": "new FieldFrame(null,true,null)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "852c8b720dd810c699d6303d0470efa246c84d26", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForRoles\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"hello\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DirectEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "d5db9f7ce7f4b2c3bfeed3e421213d03b19a8fdd", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": " \t\t\tif (bulb < 6) {\r\n \t\t\t\tif (command.compareTo(oldPercent) > 0) {\r\n \t\t\t\t\tint repeatCount = (command.intValue() - oldPercent.intValue()) / 10;\r\n\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendIncrease(bulb, rgbwSteps, bridgeId);\r", "fixed": " \t\t\tif (bulb < 6) {\r\n \t\t\t\tif (command.compareTo(oldPercent) > 0) {\r\n \t\t\t\t\tint repeatCount = (command.intValue() - oldPercent.intValue()) / 10;\r\n\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendIncrease(bulb, rgbwSteps, bridgeId);\r", "sourceBeforeFix": "i <= repeatCount", "sourceAfterFix": "i < repeatCount"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectEndpointBuilder\n             extends\n                 DirectEndpointConsumerBuilder, DirectEndpointProducerBuilder {\n         default AdvancedDirectEndpointBuilder advanced() {", "fixed": "     \n    public interface DirectEndpointBuilder\n             extends\n                 DirectEndpointConsumerBuilder, DirectEndpointProducerBuilder {\n         default AdvancedDirectEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "44c2d71195e5c4a3ded0ef2b2e593cabdeeec08b", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * @throws MissingProvideException if an entry point was not provided\n    *     by any of the inputs.\n    */\n  List<CompilerInput> manageDependencies(\n       List<String> entryPoints,\n       List<CompilerInput> inputs)\n       throws CircularDependencyException, MissingProvideException {", "fixed": "    * @throws MissingProvideException if an entry point was not provided\n    *     by any of the inputs.\n    */\n  public List<CompilerInput> manageDependencies(\n       List<String> entryPoints,\n       List<CompilerInput> inputs)\n       throws CircularDependencyException, MissingProvideException {", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0a8470b78e9a173775de0f3ab10fba81e3da106f", "projectName": "google.auto", "bugType": "Same Function Swap Args", "problem": "       for (int j = 0; j < versions.length; j++) {\n         int actual = Integer.signum(versions[i].compareTo(versions[j]));\n         int expected = Integer.signum(i - j);\n        assertEquals(actual, expected);\n       }\n     }\n   }", "fixed": "       for (int j = 0; j < versions.length; j++) {\n         int actual = Integer.signum(versions[i].compareTo(versions[j]));\n         int expected = Integer.signum(i - j);\n        assertEquals(expected, actual);\n       }\n     }\n   }", "sourceBeforeFix": "assertEquals(actual,expected)", "sourceAfterFix": "assertEquals(expected,actual)"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f4d9e1c650ee6988bcd1807aaf02b74e3779358b", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void whenWhenValueNotMatchesShouldSupportChainedCalls() {\n \t\tthis.map.from(\"123\").when(\"456\"::equals).when(\"123\"::equals).toCall(Assertions::fail);\n \t}\n \t@Test\n\tpublic void whenWhenValueMatchesShouldSupportChainedCalls() {\n \t\tString result = this.map.from(\"123\").when((s) -> s.contains(\"2\")).when(\"123\"::equals).toInstance(String::new);\n \t\tassertThat(result).isEqualTo(\"123\");\n \t}", "fixed": " \t}\n \t@Test\n\tvoid whenWhenValueNotMatchesShouldSupportChainedCalls() {\n \t\tthis.map.from(\"123\").when(\"456\"::equals).when(\"123\"::equals).toCall(Assertions::fail);\n \t}\n \t@Test\n\tvoid whenWhenValueMatchesShouldSupportChainedCalls() {\n \t\tString result = this.map.from(\"123\").when((s) -> s.contains(\"2\")).when(\"123\"::equals).toInstance(String::new);\n \t\tassertThat(result).isEqualTo(\"123\");\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "23efcad891c91fc131ed4729c734ff6b122197df", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "fixed": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskTestProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "sourceBeforeFix": "deployOneTaskProcess()", "sourceAfterFix": "deployOneTaskTestProcess()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "65abbcb6ca47abb54a1bae09a8cbc4415954ebbe", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         for (Class clazz : unwrapClasses(interceptors)) {\n             try {\n                 Interceptor interceptor = Interceptor.class.cast(clazz.newInstance());\n                serverService.getIncomingInterceptors().add(interceptor);\n             } catch (Exception e) {\n                 throw new OperationFailedException(e);\n             }", "fixed": "         for (Class clazz : unwrapClasses(interceptors)) {\n             try {\n                 Interceptor interceptor = Interceptor.class.cast(clazz.newInstance());\n                serverService.getOutgoingInterceptors().add(interceptor);\n             } catch (Exception e) {\n                 throw new OperationFailedException(e);\n             }", "sourceBeforeFix": "serverService.getIncomingInterceptors()", "sourceAfterFix": "serverService.getOutgoingInterceptors()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "83546b1062b34cc2431812517a1e3723a5e4b508", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     \n    static final boolean UNSAFE_AVAILABLE;\n     \n    static final Unsafe UNSAFE;\n     private static final ILogger LOGGER = Logger.getLogger(UnsafeUtil.class);", "fixed": "     \n    public static final boolean UNSAFE_AVAILABLE;\n     \n    public static final Unsafe UNSAFE;\n     private static final ILogger LOGGER = Logger.getLogger(UnsafeUtil.class);", "sourceBeforeFix": "24", "sourceAfterFix": "25"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000L * FILES_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());", "fixed": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000.0 * FILES_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());", "sourceBeforeFix": "FILES_BYTES * 1000L", "sourceAfterFix": "FILES_BYTES * 1000.0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n        boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }", "fixed": "          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n        private boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "3b936881f7e3fa84b26a1e67830d95dd87416dea", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tstatic public final PowIn slowFast = pow2In;\r\n \t\r\n \tstatic public final PowOut pow2Out = new PowOut(2);\r\n\tstatic public final PowIn fastSlow = pow2In;\r\n \tstatic public final Interpolation pow2InInverse = new Interpolation() {\r\n \t\tpublic float apply (float a) {\r\n \t\t\treturn (float)Math.sqrt(a);\r", "fixed": " \tstatic public final PowIn slowFast = pow2In;\r\n \t\r\n \tstatic public final PowOut pow2Out = new PowOut(2);\r\n\tstatic public final PowOut fastSlow = pow2Out;\r\n \tstatic public final Interpolation pow2InInverse = new Interpolation() {\r\n \t\tpublic float apply (float a) {\r\n \t\t\treturn (float)Math.sqrt(a);\r", "sourceBeforeFix": "static public final PowIn fastSlow=pow2In; ", "sourceAfterFix": "static public final PowOut fastSlow=pow2Out; "}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "fixed": "                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "313f93c8c4ec073158317473dfbfb2aff29b1d65", "projectName": "google.guava", "bugType": "Wrong Function Name", "problem": "     for (int i = 0; i < reps; i++) {\n       Stopwatch s = new Stopwatch().start();\n      total += s.elapsedTime(TimeUnit.NANOSECONDS);\n     }\n     return total;\n   }", "fixed": "     for (int i = 0; i < reps; i++) {\n       Stopwatch s = new Stopwatch().start();\n      total += s.elapsed(TimeUnit.NANOSECONDS);\n     }\n     return total;\n   }", "sourceBeforeFix": "s.elapsedTime(TimeUnit.NANOSECONDS)", "sourceAfterFix": "s.elapsed(TimeUnit.NANOSECONDS)"}
{"fixCommitSHA1": "88bf7f435fd294dc60ea6bcc2a1ee19e9aada3d4", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "       if (tempBackupCheckpointExists) {\n        UnderFileSystemUtils.deleteFileIfExists(mUfs, mCheckpointPath);\n         mUfs.rename(mTempBackupCheckpointPath, mCheckpointPath);\n       }\n       if (backupCheckpointExists) {", "fixed": "       if (tempBackupCheckpointExists) {\n        UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath);\n         mUfs.rename(mTempBackupCheckpointPath, mCheckpointPath);\n       }\n       if (backupCheckpointExists) {", "sourceBeforeFix": "UnderFileSystemUtils.deleteFileIfExists(mUfs,mCheckpointPath)", "sourceAfterFix": "UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "7dbefbb69705e60542031bf5c402d0f0f1bd7955", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     sClientMetrics = new ClientMetrics();\n     if (sExecutorService != null) {\n      sExecutorService.shutdown();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),", "fixed": "     sClientMetrics = new ClientMetrics();\n     if (sExecutorService != null) {\n      sExecutorService.shutdownNow();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),", "sourceBeforeFix": "sExecutorService.shutdown()", "sourceAfterFix": "sExecutorService.shutdownNow()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedPulsarEndpointBuilder\n             extends\n                 AdvancedPulsarEndpointConsumerBuilder, AdvancedPulsarEndpointProducerBuilder {\n         default PulsarEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedPulsarEndpointBuilder\n             extends\n                 AdvancedPulsarEndpointConsumerBuilder, AdvancedPulsarEndpointProducerBuilder {\n         default PulsarEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "ee6198b11329c1da02e8086184b79d355a282ae5", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         assertMockEndpointsSatisfied();\n        Thread.sleep(200);\n         assertEquals(3, counter);", "fixed": "         assertMockEndpointsSatisfied();\n        Thread.sleep(500);\n         assertEquals(3, counter);", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "fixed": "     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}
{"fixCommitSHA1": "af39d558ff5ca71fad662cc1fc7bb2927640751c", "projectName": "spring-projects.spring-boot", "bugType": "Change Caller in Function Call", "problem": " \t\t\t\t\tclusterProperties.getNodes());\n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\t\tconfig.setMaxRedirects(config.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}", "fixed": " \t\t\t\t\tclusterProperties.getNodes());\n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}", "sourceBeforeFix": "config.getMaxRedirects()", "sourceAfterFix": "clusterProperties.getMaxRedirects()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "00d52565fc7047090c947eb7d34ca0392cf47002", "projectName": "openmrs.openmrs-core", "bugType": "Change Unary Operator\t", "problem": "\t\tmodel.put(\"showDisclaimer\", Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()));\r\n \t}\r\n }\r", "fixed": "\t\tmodel.put(\"showDisclaimer\", !Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()));\r\n \t}\r\n }\r", "sourceBeforeFix": "Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())", "sourceAfterFix": "!Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())"}
{"fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + data.limit());\n         }\n         dst.put(tmpBuf);\n     }", "fixed": "             tmpBuf.clear().position(index).limit(index + bytesToCopy);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + bytesToCopy) + \", maximum is \" + buffer.limit());\n         }\n         dst.put(tmpBuf);\n     }", "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b47d226858ebcd6e4f6368a3c7132897456dfdb0", "projectName": "apache.camel", "bugType": "Change Binary Operator", "problem": "         return new BinaryPredicateSupport<E>(left, right) {\n             protected boolean matches(E exchange, Object leftValue, Object rightValue) {\n                return compare(leftValue, rightValue) < 0;\n             }\n             protected String getOperationText() {", "fixed": "         return new BinaryPredicateSupport<E>(left, right) {\n             protected boolean matches(E exchange, Object leftValue, Object rightValue) {\n                return compare(leftValue, rightValue) >= 0;\n             }\n             protected String getOperationText() {", "sourceBeforeFix": "compare(leftValue,rightValue) < 0", "sourceAfterFix": "compare(leftValue,rightValue) >= 0"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n }", "fixed": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param line int\n          * @param col int\n          */\n        public StringInfo(int line, int col) {\n             this.line = line;\n             this.col = col;\n         }", "fixed": "          * @param line int\n          * @param col int\n          */\n        StringInfo(int line, int col) {\n             this.line = line;\n             this.col = col;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "e8d7cdcc372e14f8a0a664911b5ae6934201e30b", "projectName": "apache.hive", "bugType": "Same Function Less Args", "problem": "     }\n     if (writeIdString != null && !ObjectStore.isCurrentStatsValidForTheQuery(\n        conf, db, tbl, params, statsWriteId, writeIdString, false)) {\n       return allCols;\n     }\n     List<String> colsToUpdate = new ArrayList<>();", "fixed": "     }\n     if (writeIdString != null && !ObjectStore.isCurrentStatsValidForTheQuery(\n        conf, params, statsWriteId, writeIdString, false)) {\n       return allCols;\n     }\n     List<String> colsToUpdate = new ArrayList<>();", "sourceBeforeFix": "ObjectStore.isCurrentStatsValidForTheQuery(conf,db,tbl,params,statsWriteId,writeIdString,false)", "sourceAfterFix": "ObjectStore.isCurrentStatsValidForTheQuery(conf,params,statsWriteId,writeIdString,false)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "08665fecde2010f1d4663b7988282bdd978841e8", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " import org.infinispan.context.Flag;\n import org.infinispan.manager.EmbeddedCacheManager;\npublic class InfinispanUtil {\n     private InfinispanUtil() {\n     }", "fixed": " import org.infinispan.context.Flag;\n import org.infinispan.manager.EmbeddedCacheManager;\npublic final class InfinispanUtil {\n     private InfinispanUtil() {\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSqlEndpointBuilder\n             extends\n                 AdvancedSqlEndpointConsumerBuilder, AdvancedSqlEndpointProducerBuilder {\n         default SqlEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSqlEndpointBuilder\n             extends\n                 AdvancedSqlEndpointConsumerBuilder, AdvancedSqlEndpointProducerBuilder {\n         default SqlEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "         }\n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n         recentChange.reset();", "fixed": "         }\n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n         recentChange.reset();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface InfinispanEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedInfinispanEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface InfinispanEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedInfinispanEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffsetEXT(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "fixed": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffset(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LumberjackEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedLumberjackEndpointBuilder advanced() {", "fixed": "     \n    public interface LumberjackEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedLumberjackEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface YammerEndpointBuilder\n             extends\n                 YammerEndpointConsumerBuilder, YammerEndpointProducerBuilder {\n         default AdvancedYammerEndpointBuilder advanced() {", "fixed": "     \n    public interface YammerEndpointBuilder\n             extends\n                 YammerEndpointConsumerBuilder, YammerEndpointProducerBuilder {\n         default AdvancedYammerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedRssEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default RssEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedRssEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default RssEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "204c2156da54922cb0bfc9d944036e3503056a2f", "projectName": "pardom.ActiveAndroid", "bugType": "Wrong Function Name", "problem": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getClass(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "fixed": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "sourceBeforeFix": "typeSerializer.getClass()", "sourceAfterFix": "typeSerializer.getDeserializedType()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "05ff546482a53f3f7f145a9d9058e84c50e5187b", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "     }\n   }\n  private synchronized boolean isRMActive() {\n     return HAServiceState.ACTIVE == rmContext.getHAServiceState();\n   }", "fixed": "     }\n   }\n  private boolean isRMActive() {\n     return HAServiceState.ACTIVE == rmContext.getHAServiceState();\n   }", "sourceBeforeFix": "34", "sourceAfterFix": "2"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "ad687b722b4d0c3461fdb7c45206257145484d8a", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.getPath(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "fixed": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.toString(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "sourceBeforeFix": "dstPath.getPath()", "sourceAfterFix": "dstPath.toString()"}
{"fixCommitSHA1": "634910c11ff38d87dfdd72865742528820a37aa9", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     newNode.useSourceInfoFromForTree(node);\n     newNode.setOriginalName(name);\n    newNode.makeNonIndexable();\n     node.getGrandparent().addChildToBack(IR.exprResult(newNode));\n   }", "fixed": "     newNode.useSourceInfoFromForTree(node);\n     newNode.setOriginalName(name);\n    newNode.makeNonIndexableRecursive();\n     node.getGrandparent().addChildToBack(IR.exprResult(newNode));\n   }", "sourceBeforeFix": "newNode.makeNonIndexable()", "sourceAfterFix": "newNode.makeNonIndexableRecursive()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "123e2eb64c4d5a57a8841576ffae66c0dcd2afa1", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         childRexNodeLst = rewriteFloorDateChildren(calciteOp, childRexNodeLst);\n       }\n      expr = cluster.getRexBuilder().makeCall(calciteOp, childRexNodeLst);\n     } else {\n       retType = expr.getType();\n     }", "fixed": "         childRexNodeLst = rewriteFloorDateChildren(calciteOp, childRexNodeLst);\n       }\n      expr = cluster.getRexBuilder().makeCall(retType, calciteOp, childRexNodeLst);\n     } else {\n       retType = expr.getType();\n     }", "sourceBeforeFix": "cluster.getRexBuilder().makeCall(calciteOp,childRexNodeLst)", "sourceAfterFix": "cluster.getRexBuilder().makeCall(retType,calciteOp,childRexNodeLst)"}
{"fixCommitSHA1": "0b52fefcc898f6f82c627bba9fcdd38a62583b22", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         try {\n             final InputStream stream = new FileInputStream(file);\n             stream.close();\n            throw new Exception(\"File \" + file.getPath() + \" should not exist\");\n         }\n         catch (FileNotFoundException ex) {\n             return ex.getLocalizedMessage();", "fixed": "         try {\n             final InputStream stream = new FileInputStream(file);\n             stream.close();\n            throw new IllegalStateException(\"File \" + file.getPath() + \" should not exist\");\n         }\n         catch (FileNotFoundException ex) {\n             return ex.getLocalizedMessage();", "sourceBeforeFix": "new Exception(\"File \" + file.getPath() + \" should not exist\")", "sourceAfterFix": "new IllegalStateException(\"File \" + file.getPath() + \" should not exist\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "fixed": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "d9c700e9fed0ea964eeabc46809aeb76425c2a5f", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "     }\n     public long getCloseNotifyTimeoutMillis() {\n        return handshakeTimeoutMillis;\n     }\n     public void setCloseNotifyTimeout(long closeNotifyTimeout, TimeUnit unit) {", "fixed": "     }\n     public long getCloseNotifyTimeoutMillis() {\n        return closeNotifyTimeoutMillis;\n     }\n     public void setCloseNotifyTimeout(long closeNotifyTimeout, TimeUnit unit) {", "sourceBeforeFix": "return handshakeTimeoutMillis; ", "sourceAfterFix": "return closeNotifyTimeoutMillis; "}
{"fixCommitSHA1": "377e56534d9879079209b2ca99a28506f55d52e8", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     assertTrue(\"\" + compressedProto.length, compressedProto.length < 392000);\n    assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 2550000);\n   }\n   @Test", "fixed": "     assertTrue(\"\" + compressedProto.length, compressedProto.length < 392000);\n    assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 2560000);\n   }\n   @Test", "sourceBeforeFix": "uncompressedProto.length < 2550000", "sourceAfterFix": "uncompressedProto.length < 2560000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     private final Condition delegate;\n     @SuppressWarnings(\"unused\")\n    private final Object strongReference;\n    WeakSafeCondition(Condition delegate, Object strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "fixed": "     private final Condition delegate;\n     @SuppressWarnings(\"unused\")\n    private final WeakSafeReadWriteLock strongReference;\n    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "sourceBeforeFix": "Object strongReference", "sourceAfterFix": "WeakSafeReadWriteLock strongReference"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JiraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJiraEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JiraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJiraEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "427bea8bae3af37769a58f579767d54cb7af415a", "projectName": "alibaba.druid", "bugType": "Change Identifier Used", "problem": "                 if (LOG == null) {\n                     LOG = LogFactory.getLog(DruidDriver.class);\n                 }\n                LOG.error(\"register druid-driver mbean error\", ex);\n             }\n             return true;", "fixed": "                 if (LOG == null) {\n                     LOG = LogFactory.getLog(DruidDriver.class);\n                 }\n                LOG.warn(\"register druid-driver mbean error\", ex);\n             }\n             return true;", "sourceBeforeFix": "LOG.error(\"register druid-driver mbean error\",ex)", "sourceAfterFix": "LOG.warn(\"register druid-driver mbean error\",ex)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StubEndpointBuilder\n             extends\n                 StubEndpointConsumerBuilder, StubEndpointProducerBuilder {\n         default AdvancedStubEndpointBuilder advanced() {", "fixed": "     \n    public interface StubEndpointBuilder\n             extends\n                 StubEndpointConsumerBuilder, StubEndpointProducerBuilder {\n         default AdvancedStubEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "6ee201465a3287e5700c5cba712852a8f4de4bca", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     }\n     protected String[] parseUri(DynamicAwareEntry entry) {\n        String u = entry.getOriginalUri();\n         boolean httpComponent = \"http\".equals(scheme) || \"https\".equals(scheme) || \"http4\".equals(scheme) || \"https4\".equals(scheme);", "fixed": "     }\n     protected String[] parseUri(DynamicAwareEntry entry) {\n        String u = entry.getUri();\n         boolean httpComponent = \"http\".equals(scheme) || \"https\".equals(scheme) || \"http4\".equals(scheme) || \"https4\".equals(scheme);", "sourceBeforeFix": "entry.getOriginalUri()", "sourceAfterFix": "entry.getUri()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "c818c799fcc7a2a922892754dfd62611bea1123a", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "             int minute = time.getMinutes();\n             int second = time.getSeconds();\n            cal.set(1900, 1, 1, hour, minute, second);\n         }\n         return cal;", "fixed": "             int minute = time.getMinutes();\n             int second = time.getSeconds();\n            cal.set(1900, 0, 1, hour, minute, second);\n         }\n         return cal;", "sourceBeforeFix": "cal.set(1900,1,1,hour,minute,second)", "sourceAfterFix": "cal.set(1900,0,1,hour,minute,second)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "       return delegate.getTopScope();\n     }\n    @Override State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n    @Override void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }", "fixed": "       return delegate.getTopScope();\n     }\n    @Override protected State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n    @Override protected void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n                    Thread.sleep(50);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r", "fixed": "             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "780a95c41d5d9ddafe1a237628183020746825a8", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\r\n \tpublic ObjectIntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic ObjectIntMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "0682e8dd41045e3375b61d3d76f6e6991e98c869", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (simple.getToReceivedDate() != null) {\n            String s = simple.getFromSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), false, offset));", "fixed": "             }\n         }\n         if (simple.getToReceivedDate() != null) {\n            String s = simple.getToReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), false, offset));", "sourceBeforeFix": "simple.getFromSentDate()", "sourceAfterFix": "simple.getFromReceivedDate()"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "             cfg.setThreadModel(ThreadModel.MANUAL);\n             cfg.getSessionConfig().setTcpNoDelay(true);\n             cfg.getSessionConfig().setKeepAlive(true);\n            int timeout = getTimeout();\n             cfg.setConnectTimeout(timeout < 1000 ? 1 : timeout / 1000);\n             connector.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new MinaCodecAdapter(getCodec(), getUrl(), this)));", "fixed": "             cfg.setThreadModel(ThreadModel.MANUAL);\n             cfg.getSessionConfig().setTcpNoDelay(true);\n             cfg.getSessionConfig().setKeepAlive(true);\n            int timeout = getConnectTimeout();\n             cfg.setConnectTimeout(timeout < 1000 ? 1 : timeout / 1000);\n             connector.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new MinaCodecAdapter(getCodec(), getUrl(), this)));", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param format a <code>String</code> value\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public void setOnCommentFormat(String format) {\n         onRegexp = Utils.createPattern(format);\n     }", "fixed": "      * @param format a <code>String</code> value\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public final void setOnCommentFormat(String format) {\n         onRegexp = Utils.createPattern(format);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "dd6dbd5cf29795ac5bd8f76b76c562d4737917b8", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n    mCheckpointPath = checkpointPath.getPath();\n     mOpTimeMs = opTimeMs;\n   }", "fixed": "     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n    mCheckpointPath = checkpointPath.toString();\n     mOpTimeMs = opTimeMs;\n   }", "sourceBeforeFix": "checkpointPath.getPath()", "sourceAfterFix": "checkpointPath.toString()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "27e39646c2e19bba26c29f6ddb1df925e036471f", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "         String jobId = getConfiguration().getJobId();\n         for (Address address : addresses) {\n             try {\n                CancelJobSupervisorOperation operation = new CancelJobSupervisorOperation(name, jobId, jobOwner);\n                 mapReduceService.processRequest(address, operation, name);\n             } catch (Exception ignore) {", "fixed": "         String jobId = getConfiguration().getJobId();\n         for (Address address : addresses) {\n             try {\n                CancelJobSupervisorOperation operation = new CancelJobSupervisorOperation(name, jobId);\n                 mapReduceService.processRequest(address, operation, name);\n             } catch (Exception ignore) {", "sourceBeforeFix": "new CancelJobSupervisorOperation(name,jobId,jobOwner)", "sourceAfterFix": "new CancelJobSupervisorOperation(name,jobId)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n    List<List<Pet>> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status);\n     @GET\n     @Path(\"/findByTags\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n    List<Pet> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status) throws Exception;\n     @GET\n     @Path(\"/findByTags\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "c136490318387755a73ef7061050010b0ffe6125", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n                AtmosphereResponse.create(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);", "fixed": "         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n                AtmosphereResponse.newInstance(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);", "sourceBeforeFix": "AtmosphereResponse.create()", "sourceAfterFix": "AtmosphereResponse.newInstance()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "540a344557f0e7819dbddaff77b36df823b356bd", "projectName": "mybatis.mybatis-3", "bugType": "Change Modifier", "problem": " /**\n *    Copyright 2009-2016 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.", "fixed": " /**\n *    Copyright 2009-2017 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGuavaEventBusEndpointBuilder\n             extends\n                 AdvancedGuavaEventBusEndpointConsumerBuilder, AdvancedGuavaEventBusEndpointProducerBuilder {\n         default GuavaEventBusEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGuavaEventBusEndpointBuilder\n             extends\n                 AdvancedGuavaEventBusEndpointConsumerBuilder, AdvancedGuavaEventBusEndpointProducerBuilder {\n         default GuavaEventBusEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "96b353d98f6b6d441ebedf69ec12cfa333a1d7c9", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tAssert.assertTrue(ec.getRegisteredKryoTypes().contains(BigInt.class));\n\t\tAssert.assertTrue(ec.getRegisteredKryoTypes().contains(java.sql.Date.class));\n \t\tString expected = null;", "fixed": " \t\tAssert.assertTrue(ec.getRegisteredKryoTypes().contains(BigInt.class));\n\t\tAssert.assertFalse(ec.getRegisteredKryoTypes().contains(java.sql.Date.class));\n \t\tString expected = null;", "sourceBeforeFix": "Assert.assertTrue(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))", "sourceAfterFix": "Assert.assertFalse(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate String text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "fixed": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate CharSequence text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GooglePubsubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGooglePubsubEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GooglePubsubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGooglePubsubEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "313f93c8c4ec073158317473dfbfb2aff29b1d65", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     for (int i = 0; i < reps; i++) {\n       Stopwatch s = new Stopwatch().start();\n      total += s.elapsedTime(TimeUnit.NANOSECONDS);\n     }\n     return total;\n   }", "fixed": "     for (int i = 0; i < reps; i++) {\n       Stopwatch s = new Stopwatch().start();\n      total += s.elapsed(TimeUnit.NANOSECONDS);\n     }\n     return total;\n   }", "sourceBeforeFix": "s.elapsedTime(TimeUnit.NANOSECONDS)", "sourceAfterFix": "s.elapsed(TimeUnit.NANOSECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "0592e84a3c07b4451e81d2eecc0c51af384858d2", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "     }\n     public static void gracefulShutdown(Executor executor, int timeout) {\n        if (!(executor instanceof ExecutorService) || isShutdown(executor)) {\n             return;\n         }\n         final ExecutorService es = (ExecutorService) executor;", "fixed": "     }\n     public static void gracefulShutdown(Executor executor, int timeout) {\n        if (!(executor instanceof ExecutorService) || isTerminated(executor)) {\n             return;\n         }\n         final ExecutorService es = (ExecutorService) executor;", "sourceBeforeFix": "((ExecutorService)executor).isShutdown()", "sourceAfterFix": "((ExecutorService)executor).isTerminated()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3258782752763d360d3beecca15e583934c62e09", "projectName": "springside.springside4", "bugType": "Wrong Function Name", "problem": " \tpublic List<User> getAllUser() {\n \t\tif (applicationStatistics != null) {\n\t\t\tapplicationStatistics.incrUpdateUserTimes();\n \t\t}\n \t\treturn (List<User>) userJpaDao.findAll();\n \t}", "fixed": " \tpublic List<User> getAllUser() {\n \t\tif (applicationStatistics != null) {\n\t\t\tapplicationStatistics.incrListUserTimes();\n \t\t}\n \t\treturn (List<User>) userJpaDao.findAll();\n \t}", "sourceBeforeFix": "applicationStatistics.incrUpdateUserTimes()", "sourceAfterFix": "applicationStatistics.incrListUserTimes()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "95aa9c0ad64a2feccfc97ccb2c1194e9ac83872d", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "         configuration.getCreateDependencies().add(new DependencyConfigurator<StatelessSessionComponentCreateService>() {\n             @Override\n             public void configureDependency(ServiceBuilder<?> builder, StatelessSessionComponentCreateService service) {\n                builder.addDependency(RegistryInstallerService.SERVICE_NAME);\n                 builder.addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"clustering\", \"group\", \"ejb\", \"default\"), Group.class, service.getGroupInjector());\n                 builder.addDependency(DependencyType.OPTIONAL, EJBRemoteConnectorService.SERVICE_NAME);\n             }", "fixed": "         configuration.getCreateDependencies().add(new DependencyConfigurator<StatelessSessionComponentCreateService>() {\n             @Override\n             public void configureDependency(ServiceBuilder<?> builder, StatelessSessionComponentCreateService service) {\n                builder.addDependency(DependencyType.OPTIONAL, RegistryInstallerService.SERVICE_NAME);\n                 builder.addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"clustering\", \"group\", \"ejb\", \"default\"), Group.class, service.getGroupInjector());\n                 builder.addDependency(DependencyType.OPTIONAL, EJBRemoteConnectorService.SERVICE_NAME);\n             }", "sourceBeforeFix": "builder.addDependency(RegistryInstallerService.SERVICE_NAME)", "sourceAfterFix": "builder.addDependency(DependencyType.OPTIONAL,RegistryInstallerService.SERVICE_NAME)"}
{"fixCommitSHA1": "3f3bab10b9ca68eb31a7ef5a31e49145b51006fd", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.read(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "fixed": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.readFully(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "sourceBeforeFix": "dis.read(serializedData,0,length)", "sourceAfterFix": "dis.readFully(serializedData,0,length)"}
{"fixCommitSHA1": "0c04572d3c4dfd164456a085aaa9782541c8d718", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t */\n \tstatic public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "fixed": " \t */\n \tstatic public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "sourceBeforeFix": "historicState(item,timestamp)", "sourceAfterFix": "historicState(item,timestamp,serviceName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5a58a4ac4be0bee7c3ab573f6bf325f68cb3df85", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n\tpublic CustomDatatypeHandler<?, ?> getHandler(CustomDatatype<?> datatype, String handlerConfig) {\r\n \t\tif (prioritizedHandlerClasses == null) {\r\n \t\t\tprioritizeHandlers();\r\n \t\t}\r", "fixed": " \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n\tpublic synchronized CustomDatatypeHandler<?, ?> getHandler(CustomDatatype<?> datatype, String handlerConfig) {\r\n \t\tif (prioritizedHandlerClasses == null) {\r\n \t\t\tprioritizeHandlers();\r\n \t\t}\r", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "f7f180830156c75d419b946268840d79d2a0b747", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         }\n         Map<String, Object> params = new HashMap<String, Object>();\n        IntrospectionSupport.getProperties(configuration, params, null);\n         setProperties(clientConfig, params);\n     }\n }", "fixed": "         }\n         Map<String, Object> params = new HashMap<String, Object>();\n        IntrospectionSupport.getProperties(configuration, params, null, false);\n         setProperties(clientConfig, params);\n     }\n }", "sourceBeforeFix": "IntrospectionSupport.getProperties(configuration,params,null)", "sourceAfterFix": "IntrospectionSupport.getProperties(configuration,params,null,false)"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     new StaticFieldGetterSetterInliner(root).run();\n    GatherGettersAndSetterProperties.update(compiler, externs, root);\n   }\n   class StaticFieldGetterSetterInliner {", "fixed": "     new StaticFieldGetterSetterInliner(root).run();\n    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n   class StaticFieldGetterSetterInliner {", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedOpenshiftBuildsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default OpenshiftBuildsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedOpenshiftBuildsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default OpenshiftBuildsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1bb9207c9bf3079bf64050aadd21ab4735511db3", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "      * @return true if act as Restful index method, false otherwise\n      */\n     public boolean isRestfulIndex() {\n        return \"GET\".equals(httpMethod) && \"\".equals(pathWithoutBaseName());\n     }\n     /**", "fixed": "      * @return true if act as Restful index method, false otherwise\n      */\n     public boolean isRestfulIndex() {\n        return \"GET\".equalsIgnoreCase(httpMethod) && \"\".equals(pathWithoutBaseName());\n     }\n     /**", "sourceBeforeFix": "\"GET\".equals(httpMethod)", "sourceAfterFix": "\"GET\".equalsIgnoreCase(httpMethod)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15803, value = \"Caught exception awaiting final response from server %s on host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10803, value = \"Caught exception awaiting final response from server %s on host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15805", "sourceAfterFix": "id=10805"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      * @throws NullPointerException if the lines array is null\n      */\n     public FileText(File file, List<String> lines) {\n        final StringBuilder buf = new StringBuilder();\n         for (final String line : lines) {\n             buf.append(line).append('\\n');\n         }", "fixed": "      * @throws NullPointerException if the lines array is null\n      */\n     public FileText(File file, List<String> lines) {\n        final StringBuilder buf = new StringBuilder(1024);\n         for (final String line : lines) {\n             buf.append(line).append('\\n');\n         }", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "e8a74c8ad07bbf497026a6b8bde532cd61f79f17", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getPath() == null && c.getPath() != null) {\n             return -1;\n        } else if (c.getPath() == null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());", "fixed": "         if (getPath() == null && c.getPath() != null) {\n             return -1;\n        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());", "sourceBeforeFix": "c.getDomain() == null", "sourceAfterFix": "c.getDomain() == null && getDomain() != null"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param schedulingInfo\n    */\n  protected void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "fixed": "    * \n    * @param schedulingInfo\n    */\n  @InterfaceAudience.Private\n  public void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ef8206551c0ec51f70ec25e7371333dc5c8d99b1", "projectName": "junit-team.junit", "bugType": "Same Function Less Args", "problem": "         }\n         Method suiteMethod = null;\n         try {\n            suiteMethod = testClass.getMethod(SUITE_METHODNAME, new Class[0]);\n         } catch (Exception e) {\n             clearStatus();", "fixed": "         }\n         Method suiteMethod = null;\n         try {\n            suiteMethod = testClass.getMethod(SUITE_METHODNAME);\n         } catch (Exception e) {\n             clearStatus();", "sourceBeforeFix": "suiteMethod.invoke(null,(Object[])new Class[0])", "sourceAfterFix": "suiteMethod.invoke(null)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "595fada2ff221b76c33da09b327973ed6a17ad2d", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Test\n \tpublic void unknownFile() throws Exception {\n\t\tthis.thrown.equals(IllegalStateException.class);\n \t\tthis.thrown.expectMessage(\"Unable to deduce layout for 'test.txt'\");\n \t\tLayouts.forFile(new File(\"test.txt\"));\n \t}", "fixed": " \t@Test\n \tpublic void unknownFile() throws Exception {\n\t\tthis.thrown.expect(IllegalStateException.class);\n \t\tthis.thrown.expectMessage(\"Unable to deduce layout for 'test.txt'\");\n \t\tLayouts.forFile(new File(\"test.txt\"));\n \t}", "sourceBeforeFix": "this.thrown.equals(IllegalStateException.class)", "sourceAfterFix": "this.thrown.expect(IllegalStateException.class)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSpringBatchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SpringBatchEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSpringBatchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SpringBatchEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Olingo2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOlingo2EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Olingo2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOlingo2EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "72510eeab69456ab24afbf86dcd5db46e09aa2ab", "projectName": "gephi.gephi", "bugType": "Change Caller in Function Call", "problem": "                 Element reportE = document.createElement(\"report\");\n                 reportE.setAttribute(\"class\", entry.getKey().getName());\n                 reportE.setAttribute(\"value\", entry.getValue());\n                resultsE.appendChild(reportE);\n             }\n         }\n         modelE.appendChild(reportsE);", "fixed": "                 Element reportE = document.createElement(\"report\");\n                 reportE.setAttribute(\"class\", entry.getKey().getName());\n                 reportE.setAttribute(\"value\", entry.getValue());\n                reportsE.appendChild(reportE);\n             }\n         }\n         modelE.appendChild(reportsE);", "sourceBeforeFix": "resultsE.appendChild(reportE)", "sourceAfterFix": "reportsE.appendChild(reportE)"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "        */\n       public static _Fields findByThriftId(int fieldId) {\n         switch(fieldId) {\ncase -1:\n             return RQST;\n           default:\n             return null;", "fixed": "        */\n       public static _Fields findByThriftId(int fieldId) {\n         switch(fieldId) {\ncase 1:\n             return RQST;\n           default:\n             return null;", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5a58a4ac4be0bee7c3ab573f6bf325f68cb3df85", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n\tpublic CustomDatatypeHandler<?, ?> getHandler(CustomDatatype<?> datatype, String handlerConfig) {\r\n \t\tif (prioritizedHandlerClasses == null) {\r\n \t\t\tprioritizeHandlers();\r\n \t\t}\r", "fixed": " \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n\tpublic synchronized CustomDatatypeHandler<?, ?> getHandler(CustomDatatype<?> datatype, String handlerConfig) {\r\n \t\tif (prioritizedHandlerClasses == null) {\r\n \t\t\tprioritizeHandlers();\r\n \t\t}\r", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XQueryEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXQueryEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface XQueryEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXQueryEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   }\n   private void externExports() {\n    logger.info(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "fixed": "   }\n   private void externExports() {\n    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "sourceBeforeFix": "logger.info(\"Recording function information\")", "sourceAfterFix": "logger.fine(\"Recording function information\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b9c0d31c3c2d6d6e91791308db92fd6a1cb5db43", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n             Assert.assertEquals(2, Integer.parseInt(response.getFirstHeader(\"value\").getValue()));\n            Assert.assertFalse(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()));\n             response.getEntity().getContent().close();\n         } finally {\n             client.getConnectionManager().shutdown();", "fixed": "             Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n             Assert.assertEquals(2, Integer.parseInt(response.getFirstHeader(\"value\").getValue()));\n            Assert.assertTrue(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()));\n             response.getEntity().getContent().close();\n         } finally {\n             client.getConnectionManager().shutdown();", "sourceBeforeFix": "Assert.assertFalse(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()))", "sourceAfterFix": "Assert.assertTrue(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2b27f6006b63686c9e8f1ff03b411ab2a6d1c791", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisifed();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "fixed": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisfied();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "sourceBeforeFix": "assertMockEndpointsSatisifed()", "sourceAfterFix": "assertMockEndpointsSatisfied()"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "fixed": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "bd2e348b7cb07ad4e855dac912c550e9799370e4", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         };\n     }\n    public static interface Echo {\n         Future<String> asText(int number);\n     }", "fixed": "         };\n     }\n    public interface Echo {\n         Future<String> asText(int number);\n     }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "80fa3080b958523cf754f0523150acbf09e4bb78", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "         if (config.isSupportSession()\n                 && req.getSession(false) != null\n                 && req.getSession().getMaxInactiveInterval() >= 0\n                && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {\n             throw new IllegalStateException(\"Cannot suspend a \" +\n                     \"response longer than the session timeout. Increase the value of session-timeout in web.xml\");\n         }", "fixed": "         if (config.isSupportSession()\n                 && req.getSession(false) != null\n                 && req.getSession().getMaxInactiveInterval() >= 0\n                && req.getSession().getMaxInactiveInterval() * 1000L < timeout) {\n             throw new IllegalStateException(\"Cannot suspend a \" +\n                     \"response longer than the session timeout. Increase the value of session-timeout in web.xml\");\n         }", "sourceBeforeFix": "req.getSession().getMaxInactiveInterval() * 1000", "sourceAfterFix": "req.getSession().getMaxInactiveInterval() * 1000L"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "25c95d8dd9ec2d4e712aaeccedec306be41a3c8a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       try {\n         regionLocation = reverseDNS(regionAddress);\n       } catch (NamingException e) {\n        LOG.error(\"Cannot resolve the host name for \" + regionAddress + \" because of \" + e);\n         regionLocation = location.getHostname();\n       }", "fixed": "       try {\n         regionLocation = reverseDNS(regionAddress);\n       } catch (NamingException e) {\n        LOG.warn(\"Cannot resolve the host name for \" + regionAddress + \" because of \" + e);\n         regionLocation = location.getHostname();\n       }", "sourceBeforeFix": "LOG.error(\"Cannot resolve the host name for \" + regionAddress + \" because of \"+ e)", "sourceAfterFix": "LOG.warn(\"Cannot resolve the host name for \" + regionAddress + \" because of \"+ e)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "  * Created by Per Wendel on 2014-05-10.\n  */\n @FunctionalInterface\npublic interface ExceptionHandler {\n     /**\n      * Invoked when an exception that is mapped to this handler occurs during routing", "fixed": "  * Created by Per Wendel on 2014-05-10.\n  */\n @FunctionalInterface\npublic interface ExceptionHandler<T extends Exception> {\n     /**\n      * Invoked when an exception that is mapped to this handler occurs during routing", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "T exception"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "752be931ebf139e3a74ab3e477e1434875a7ab95", "projectName": "libgdx.libgdx", "bugType": "Change Caller in Function Call", "problem": " \t}\n \tpublic Vector2 getLocalAnchorB () {\n\t\treturn localAnchorA.set(joint.getLocalAnchorB().x, joint.getLocalAnchorB().y);\n \t}\n \t", "fixed": " \t}\n \tpublic Vector2 getLocalAnchorB () {\n\t\treturn localAnchorB.set(joint.getLocalAnchorB().x, joint.getLocalAnchorB().y);\n \t}\n \t", "sourceBeforeFix": "localAnchorA.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)", "sourceAfterFix": "localAnchorB.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "18563f01c5a013657dbde3b245f0e735d1e86cec", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testMapConfig() {\n         assertNotNull(config);\n        assertEquals(8, config.getMapConfigs().size());\n         MapConfig testMapConfig = config.getMapConfig(\"testMap\");\n         assertNotNull(testMapConfig);\n         assertEquals(\"testMap\", testMapConfig.getName());", "fixed": "     @Test\n     public void testMapConfig() {\n         assertNotNull(config);\n        assertEquals(6, config.getMapConfigs().size());\n         MapConfig testMapConfig = config.getMapConfig(\"testMap\");\n         assertNotNull(testMapConfig);\n         assertEquals(\"testMap\", testMapConfig.getName());", "sourceBeforeFix": "assertEquals(8,config.getMapConfigs().size())", "sourceAfterFix": "assertEquals(6,config.getMapConfigs().size())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Jt400EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJt400EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Jt400EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJt400EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "48e0acb98213234b32dd4c21eb5a7d4d94e25ca2", "projectName": "brettwooldridge.HikariCP", "bugType": "Wrong Function Name", "problem": "    {\n       if (connectionTimeout != Integer.MAX_VALUE) {\n          try {\n            dataSource.setLoginTimeout((int) TimeUnit.MILLISECONDS.toSeconds(Math.min(1000L, connectionTimeout)));\n          }\n          catch (SQLException e) {\n             logger.warn(\"Unable to set DataSource login timeout\", e);", "fixed": "    {\n       if (connectionTimeout != Integer.MAX_VALUE) {\n          try {\n            dataSource.setLoginTimeout((int) TimeUnit.MILLISECONDS.toSeconds(Math.max(1000L, connectionTimeout)));\n          }\n          catch (SQLException e) {\n             logger.warn(\"Unable to set DataSource login timeout\", e);", "sourceBeforeFix": "Math.min(1000L,connectionTimeout)", "sourceAfterFix": "Math.max(1000L,connectionTimeout)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "fixed": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dfb39dfaeaafc913d827d42aff17a56fe3f9c535", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n        for (String address : getClientConfig().getAddressList()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);", "fixed": "     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n        for (String address : getClientConfig().getAddresses()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);", "sourceBeforeFix": "getClientConfig().getAddressList()", "sourceAfterFix": "getClientConfig().getAddresses()"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "0d35621b5c32f5d64ba2056c143d4bc351615c81", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    */\n   private transient Predicate<JSType> validator;\n  \n  private List<PropertyContinuation> propertyContinuations = null;\n   /**\n    * Template types defined on a named, not yet resolved type, or {@code null} if none. These are", "fixed": "    */\n   private transient Predicate<JSType> validator;\n  \n  private transient List<PropertyContinuation> propertyContinuations = null;\n   /**\n    * Template types defined on a named, not yet resolved type, or {@code null} if none. These are", "sourceBeforeFix": "2", "sourceAfterFix": "130"}
{"fixCommitSHA1": "ceba943bbe1ea3e841dd91fd86a40069a4f288b4", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     }\n     protected boolean matches(E exchange, Object scriptValue) {\n        return ObjectConverter.toBoolean(scriptValue);\n     }\n     protected ScriptEngine createScriptEngine() {", "fixed": "     }\n     protected boolean matches(E exchange, Object scriptValue) {\n        return ObjectConverter.toBool(scriptValue);\n     }\n     protected ScriptEngine createScriptEngine() {", "sourceBeforeFix": "ObjectConverter.toBoolean(scriptValue)", "sourceAfterFix": "ObjectConverter.toBool(scriptValue)"}
{"fixCommitSHA1": "68cd97ff6b0a506c2a2688c966c2a55870d6f466", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final HttpConnectionFactory http1 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2 = new HTTP2ServerConnectionFactory(httpConfig);\n         http2.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2.setInitialStreamSendWindow(initialStreamSendWindow);\n         final NegotiatingServerConnectionFactory alpn = new ALPNServerConnectionFactory(H2, H2_17);\nalpn.setDefaultProtocol(HTTP_1_1);", "fixed": "         final HttpConnectionFactory http1 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2 = new HTTP2ServerConnectionFactory(httpConfig);\n         http2.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2.setInitialStreamRecvWindow(initialStreamSendWindow);\n         final NegotiatingServerConnectionFactory alpn = new ALPNServerConnectionFactory(H2, H2_17);\nalpn.setDefaultProtocol(HTTP_1_1);", "sourceBeforeFix": "http2.setInitialStreamSendWindow(initialStreamSendWindow)", "sourceAfterFix": "http2.setInitialStreamRecvWindow(initialStreamSendWindow)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "0a8ecf949080ed5b2886657b2c6a9694b5952493", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     }\n    public static interface ParameterSetter {\n         <T> void set(EndpointConfiguration config, String name, T value);\n     }", "fixed": "     }\n    public interface ParameterSetter {\n         <T> void set(EndpointConfiguration config, String name, T value);\n     }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e89837b42ece86ae3a0efc8ba272f550c98cd33c", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param ast DetailAST node.\n      * @return Line number if non-comment node exists, -1 otherwise.\n      */\n    private int findLineNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {", "fixed": "      * @param ast DetailAST node.\n      * @return Line number if non-comment node exists, -1 otherwise.\n      */\n    private static int findLineNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "59116c60b91cc0bd2d7a52a3a6ff7cf8674527d7", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "             for(int i=0; i<keys.size(); i++) {\n                 List<Object> key = keys.get(i);\n                 if(_cached.containsKey(key)) {\n                    ret.set(i, (T) _cached.get(key));\n                 }\n             }\n         }", "fixed": "             for(int i=0; i<keys.size(); i++) {\n                 List<Object> key = keys.get(i);\n                 if(_cached.containsKey(key)) {\n                    ret.set(i, _cached.get(key));\n                 }\n             }\n         }", "sourceBeforeFix": "Map<List<Object>,Object>", "sourceAfterFix": "Map<List<Object>,T>"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "fixed": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic abstract boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "1d558cc635e458d5a50e3548a1e810f3d6944864", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         }\n         @Override\n        public OperatorFactory createOutputOperator(int operatorId, List<Type> sourceType)\n         {\n            checkNotNull(sourceType, \"sourceType is null\");\n             return new OperatorFactory()\n             {", "fixed": "         }\n         @Override\n        public OperatorFactory createOutputOperator(int operatorId, List<Type> sourceTypes)\n         {\n            checkNotNull(sourceTypes, \"sourceType is null\");\n             return new OperatorFactory()\n             {", "sourceBeforeFix": "new MaterializingOperator(operatorContext,sourceType)", "sourceAfterFix": "new MaterializingOperator(operatorContext,sourceTypes)"}
{"fixCommitSHA1": "72d409c6065de1209ad00289f147b0f65accef16", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "                 Integer workerCount = distribution.get(executorCount);\n                 if (workerCount != null && workerCount > 0) {\n                     slots.add(entry.getKey());\n                    executorCount--;\n                     distribution.put(executorCount, workerCount);\n                 }\n             }", "fixed": "                 Integer workerCount = distribution.get(executorCount);\n                 if (workerCount != null && workerCount > 0) {\n                     slots.add(entry.getKey());\n                    workerCount--;\n                     distribution.put(executorCount, workerCount);\n                 }\n             }", "sourceBeforeFix": "executorCount--", "sourceAfterFix": "workerCount--"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         };\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         };\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8038c106a246401ddf7690a004d6daa3ee098299", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t\t\tm_address, -dt);\nreturn (timeNow + 2000L);\n \t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\"gave up waiting for query reply from device {}\", m_address);\n \t\t\t\t}\n \t\t\t}\nQEntry qe = m_requestQueue.poll();", "fixed": " \t\t\t\t\t\t\tm_address, -dt);\nreturn (timeNow + 2000L);\n \t\t\t\t} else {\n\t\t\t\t\tlogger.debug(\"gave up waiting for query reply from device {}\", m_address);\n \t\t\t\t}\n \t\t\t}\nQEntry qe = m_requestQueue.poll();", "sourceBeforeFix": "logger.warn(\"gave up waiting for query reply from device {}\",m_address)", "sourceAfterFix": "logger.debug(\"gave up waiting for query reply from device {}\",m_address)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNano(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;", "fixed": "             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "08c13211146864ab9cbc8a79fef118eb3aa3e0e4", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }\n     }\n    private class TestSplitRemote\n             implements ConnectorSplit\n     {\n         @Override", "fixed": "         }\n     }\n    private static class TestSplitRemote\n             implements ConnectorSplit\n     {\n         @Override", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSmppEndpointBuilder\n             extends\n                 AdvancedSmppEndpointConsumerBuilder, AdvancedSmppEndpointProducerBuilder {\n         default SmppEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSmppEndpointBuilder\n             extends\n                 AdvancedSmppEndpointConsumerBuilder, AdvancedSmppEndpointProducerBuilder {\n         default SmppEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "fixed": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asJavaIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "sourceBeforeFix": "JavaConversions.asMap(logManager.logsByTopicPartition())", "sourceAfterFix": "JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StringTemplateEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStringTemplateEndpointBuilder advanced() {", "fixed": "     \n    public interface StringTemplateEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStringTemplateEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "     return methodDescriptors;\n   }\n  ImmutableSet<ImplemetationMethodDescriptor> implementationMethodDescriptors() {\n     return implementationMethodDescriptors;\n   }", "fixed": "     return methodDescriptors;\n   }\n  ImmutableSet<ImplementationMethodDescriptor> implementationMethodDescriptors() {\n     return implementationMethodDescriptors;\n   }", "sourceBeforeFix": "ImmutableSet<ImplemetationMethodDescriptor>", "sourceAfterFix": "ImmutableSet<ImplementationMethodDescriptor>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "cee3b890b7c9a95936a50951d503adf0de74c452", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": "* @see org.openmrs.api.db.ConceptDAO\n \t */\r\n \t@Override\r\n\tpublic Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n\t\treturn (Integer) criteria.uniqueResult();\r\n \t}\r\n \t/**\r", "fixed": "* @see org.openmrs.api.db.ConceptDAO\n \t */\r\n \t@Override\r\n\tpublic Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n\t\treturn (Long) criteria.uniqueResult();\r\n \t}\r\n \t/**\r", "sourceBeforeFix": "(Integer)criteria.uniqueResult()", "sourceAfterFix": "(Long)criteria.uniqueResult()"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                }\r\n                if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "fixed": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "2b0752b688e6f27129f344050787e9546adc004a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n        ICompletableFuture f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);", "fixed": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n        ICompletableFuture f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see\n \t */\n\tpublic int compareToReference(TypeComparator<T> referencedComparator);\n \t/**\n \t * Compares two records in serialized from. The return value indicates the order of the two in the same way", "fixed": " \t * \n* @see\n \t */\n\tpublic abstract int compareToReference(TypeComparator<T> referencedComparator);\n \t/**\n \t * Compares two records in serialized from. The return value indicates the order of the two in the same way", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "d4e7640fe2f77e350582a12f86b5e46a0e02bb08", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tparent().mkdirs();\r\n \t\ttry {\r\n \t\t\treturn new FileOutputStream(file(), append);\r\n\t\t} catch (FileNotFoundException ex) {\r\n \t\t\tif (file().isDirectory())\r\n \t\t\t\tthrow new GdxRuntimeException(\"Cannot open a stream to a directory: \" + file + \" (\" + type + \")\", ex);\r\n \t\t\tthrow new GdxRuntimeException(\"Error writing file: \" + file + \" (\" + type + \")\", ex);\r", "fixed": " \t\tparent().mkdirs();\r\n \t\ttry {\r\n \t\t\treturn new FileOutputStream(file(), append);\r\n\t\t} catch (Exception ex) {\r\n \t\t\tif (file().isDirectory())\r\n \t\t\t\tthrow new GdxRuntimeException(\"Cannot open a stream to a directory: \" + file + \" (\" + type + \")\", ex);\r\n \t\t\tthrow new GdxRuntimeException(\"Error writing file: \" + file + \" (\" + type + \")\", ex);\r", "sourceBeforeFix": "FileNotFoundException ex", "sourceAfterFix": "Exception ex"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "e78398ed32106c1c71bc47a1d5058fe3c8e5b9dd", "projectName": "pxb1988.dex2jar", "bugType": "Wrong Function Name", "problem": "         Type t2 = LocalType.type(e2.op1.value);\r\n         if (t2 == null && e2.op1.value.vt == VT.ARRAY) {\r\n             Type t3 = detectArray((E2Expr) e2.op1.value);\r\n            if (t3 != null && t3.getSize() == Type.ARRAY) {\r\n                 Type t4 = Type.getType(t3.getDescriptor().substring(1));\r\n                 LocalType.type(e2, t4);\r\n                 return t4;\r", "fixed": "         Type t2 = LocalType.type(e2.op1.value);\r\n         if (t2 == null && e2.op1.value.vt == VT.ARRAY) {\r\n             Type t3 = detectArray((E2Expr) e2.op1.value);\r\n            if (t3 != null && t3.getSort() == Type.ARRAY) {\r\n                 Type t4 = Type.getType(t3.getDescriptor().substring(1));\r\n                 LocalType.type(e2, t4);\r\n                 return t4;\r", "sourceBeforeFix": "t3.getSize()", "sourceAfterFix": "t3.getSort()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "    */\n   public static class Factory implements PacketReader.Factory {\n     private static final long READ_TIMEOUT_MS =\n        Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n     private final FileSystemContext mContext;\n     private final WorkerNetAddress mAddress;", "fixed": "    */\n   public static class Factory implements PacketReader.Factory {\n     private static final long READ_TIMEOUT_MS =\n        Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n     private final FileSystemContext mContext;\n     private final WorkerNetAddress mAddress;", "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "fixed": "     }\n     @Override\n    public synchronized boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "01ef614e77ec45d2b1abbe97e28d3fb6fe11bd13", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "             case UNKNOWN:\n                 break;\n         }\n        if (port < 0 && port >= 65535) {\n             throw new IllegalArgumentException(port + \" is not in bounds 0 < x < 65536\");\n         }\n         this.cmdType = cmdType;", "fixed": "             case UNKNOWN:\n                 break;\n         }\n        if (port < 0 && port >= 65536) {\n             throw new IllegalArgumentException(port + \" is not in bounds 0 < x < 65536\");\n         }\n         this.cmdType = cmdType;", "sourceBeforeFix": "port >= 65535", "sourceAfterFix": "port >= 65536"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cadd7cc57026a1f9991d2d90270a7aacbd0a7aa2", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }, executor);\n     }\n    private void sendDelete()\n     {\n         HttpResponseFuture<StatusResponse> resultFuture = httpClient.executeAsync(prepareDelete().setUri(location).build(), createStatusResponseHandler());\n         future = resultFuture;", "fixed": "         }, executor);\n     }\n    private synchronized void sendDelete()\n     {\n         HttpResponseFuture<StatusResponse> resultFuture = httpClient.executeAsync(prepareDelete().setUri(location).build(), createStatusResponseHandler());\n         future = resultFuture;", "sourceBeforeFix": "16", "sourceAfterFix": "0"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Header_Response_NoSerializationFlag() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Header_Response_NoSerializationFlag() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "739189d54feb7523a33917dbb1b0d6cf996e554c", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     NoObjectType noObjectType = new NoObjectType(this);\n     registerNativeType(JSTypeNative.NO_OBJECT_TYPE, noObjectType);\n    NoObjectType noResolvedType = new NoResolvedType(this);\n     registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, noResolvedType);", "fixed": "     NoObjectType noObjectType = new NoObjectType(this);\n     registerNativeType(JSTypeNative.NO_OBJECT_TYPE, noObjectType);\n    NoResolvedType noResolvedType = new NoResolvedType(this);\n     registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, noResolvedType);", "sourceBeforeFix": "NoObjectType noResolvedType=new NoResolvedType(this); ", "sourceAfterFix": "NoResolvedType noResolvedType=new NoResolvedType(this); "}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "fixed": "                 .retInt();\n     }\n    private static void generateHashRowMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes)\n     {\n         Parameter position = arg(\"position\", int.class);\n         Parameter blocks = arg(\"blocks\", Block[].class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9031a4c20455ba16a63233f10783a55915afcd9b", "projectName": "alibaba.dubbo", "bugType": "Change Unary Operator\t", "problem": "                                             }\r\njedis.psubscribe(new NotifySub(jedisPool), service);\n                                         } else {\r\n                                            if (!first) {\r\n                                                 first = false;\r\n                                                 doNotify(jedis, service);\r\n                                                 resetSkip();\r", "fixed": "                                             }\r\njedis.psubscribe(new NotifySub(jedisPool), service);\n                                         } else {\r\n                                            if (first) {\r\n                                                 first = false;\r\n                                                 doNotify(jedis, service);\r\n                                                 resetSkip();\r", "sourceBeforeFix": "!first", "sourceAfterFix": "first"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGitEndpointBuilder\n             extends\n                 AdvancedGitEndpointConsumerBuilder, AdvancedGitEndpointProducerBuilder {\n         default GitEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGitEndpointBuilder\n             extends\n                 AdvancedGitEndpointConsumerBuilder, AdvancedGitEndpointProducerBuilder {\n         default GitEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f47d4f07970a09a1aaf5b0e94eb5fe53c2e4b14f", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     }\n     public Map<String, String> getInputTypes() throws IOException, APIException {\n        return api.path(routes.InputsResource().types(), InputTypesResponse.class).node(this).execute().types;\n     }\n     public InputTypeSummaryResponse getInputTypeInformation(String type) throws IOException, APIException {\n        return api.path(routes.InputsResource().info(type), InputTypeSummaryResponse.class).node(this).execute();\n     }\n     public Map<String, InputTypeSummaryResponse> getAllInputTypeInformation() throws IOException, APIException {", "fixed": "     }\n     public Map<String, String> getInputTypes() throws IOException, APIException {\n        return api.path(routes.InputTypesResource().types(), InputTypesResponse.class).node(this).execute().types;\n     }\n     public InputTypeSummaryResponse getInputTypeInformation(String type) throws IOException, APIException {\n        return api.path(routes.InputTypesResource().info(type), InputTypeSummaryResponse.class).node(this).execute();\n     }\n     public Map<String, InputTypeSummaryResponse> getAllInputTypeInformation() throws IOException, APIException {", "sourceBeforeFix": "routes.InputsResource()", "sourceAfterFix": "routes.InputTypesResource()"}
{"fixCommitSHA1": "9a9b02c330e9e452f37335d0e59c462175bb5df7", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForRoles\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRoles\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "284988f0cd9275e98b31a72440965fb4ce60c1c8", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " @EnableConfigurationProperties\n @ConditionalOnClass({ AbstractSecurityWebApplicationInitializer.class,\n \t\tSessionCreationPolicy.class })\n@AutoConfigureAfter(SpringBootWebSecurityConfiguration.class)\n public class SecurityFilterAutoConfiguration {\n \tprivate static final String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;", "fixed": " @EnableConfigurationProperties\n @ConditionalOnClass({ AbstractSecurityWebApplicationInitializer.class,\n \t\tSessionCreationPolicy.class })\n@AutoConfigureAfter(SecurityAutoConfiguration.class)\n public class SecurityFilterAutoConfiguration {\n \tprivate static final String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;", "sourceBeforeFix": "SpringBootWebSecurityConfiguration.class", "sourceAfterFix": "SecurityAutoConfiguration.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\telse\nmod.getActivator().shutdown();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}", "fixed": " \t\t\t\telse\nmod.getActivator().shutdown();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.shutdown() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n  Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();", "fixed": "    * User can override this method if there is a better way to perform bulk reverse lookup\n    */\n  public Map<String, List<String>> unapplyAll(Iterable<String> values)\n   {\n     if (values == null) {\n       return Collections.emptyMap();", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ae95d478d3a59cdfd39d7621309f9a00b4b1bfc8", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "         } else if (config.getUserAgent() != null) {\n             method.setRequestHeader(\"User-Agent\", config.getUserAgent());\n         } else {\n            method.setRequestHeader(\"User-Agent\", AsyncHttpProviderUtils.constructUserAgent(NettyAsyncHttpProvider.class));\n         }\n         if (config.isCompressionEnabled()) {", "fixed": "         } else if (config.getUserAgent() != null) {\n             method.setRequestHeader(\"User-Agent\", config.getUserAgent());\n         } else {\n            method.setRequestHeader(\"User-Agent\", AsyncHttpProviderUtils.constructUserAgent(ApacheAsyncHttpProvider.class));\n         }\n         if (config.isCompressionEnabled()) {", "sourceBeforeFix": "NettyAsyncHttpProvider.class", "sourceAfterFix": "ApacheAsyncHttpProvider.class"}
{"fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "  * Tests {@link BlockStoreContext}.\n  */\n @RunWith(PowerMockRunner.class)\n@PrepareForTest({BlockMasterClient.class, BlockMasterClientPool.class, BlockStoreContext.class,\n    DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n public final class BlockStoreContextTest {\n   /**", "fixed": "  * Tests {@link BlockStoreContext}.\n  */\n @RunWith(PowerMockRunner.class)\n@PrepareForTest({RetryHandlingBlockMasterClient.class, BlockMasterClientPool.class,\n    BlockStoreContext.class, DefaultBlockWorkerClient.class, BlockWorkerClientPool.class})\n public final class BlockStoreContextTest {\n   /**", "sourceBeforeFix": "BlockMasterClient.class", "sourceAfterFix": "RetryHandlingBlockMasterClient.class"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \tpublic void addAll (char[] array, int offset, int length) {\r\n \t\tchar[] items = this.items;\r\n \t\tint sizeNeeded = size + length ;\r\n\t\tif (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "fixed": " \tpublic void addAll (char[] array, int offset, int length) {\r\n \t\tchar[] items = this.items;\r\n \t\tint sizeNeeded = size + length ;\r\n\t\tif (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "2082d923ff4d3015eefa06e2e383dbe9fa3de2c5", "projectName": "openmrs.openmrs-core", "bugType": "Change Boolean Literal", "problem": " \t@ModelAttribute(\"visitTypes\")\r\n \tpublic List<VisitType> getVisitTypes() throws Exception {\r\n\t\treturn Context.getVisitService().getAllVisitTypes(false);\r\n \t}\r\n \t@ModelAttribute(\"attributeTypes\")\r", "fixed": " \t@ModelAttribute(\"visitTypes\")\r\n \tpublic List<VisitType> getVisitTypes() throws Exception {\r\n\t\treturn Context.getVisitService().getAllVisitTypes(true);\r\n \t}\r\n \t@ModelAttribute(\"attributeTypes\")\r", "sourceBeforeFix": "Context.getVisitService().getAllVisitTypes(false)", "sourceAfterFix": "Context.getVisitService().getAllVisitTypes(true)"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "         )\n     );\n    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "fixed": "         )\n     );\n    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "sourceBeforeFix": "waitLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "waitLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(littleEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "fixed": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param nameToFind the name we're looking for\n          * @return whether it was found\n          */\n        LexicalFrame getIfContains(String nameToFind) {\n             LexicalFrame frame = null;\n             if (contains(nameToFind)) {", "fixed": "          * @param nameToFind the name we're looking for\n          * @return whether it was found\n          */\n        private LexicalFrame getIfContains(String nameToFind) {\n             LexicalFrame frame = null;\n             if (contains(nameToFind)) {", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "c4cdb163930b5890aa5c15f3161baa607545a129", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   @Override\n   public void removeBlock(long sessionId, long blockId) throws InvalidStateException,\n       NotFoundException, IOException {\n    removeBlockInternal(sessionId, blockId, BlockStoreLocation.anyTier());\n   }\n   @Override", "fixed": "   @Override\n   public void removeBlock(long sessionId, long blockId) throws InvalidStateException,\n       NotFoundException, IOException {\n    removeBlock(sessionId, blockId, BlockStoreLocation.anyTier());\n   }\n   @Override", "sourceBeforeFix": "removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())", "sourceAfterFix": "removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterDirectMessageEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwitterDirectMessageEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "7b8a3aa5bba1323a7bbb85b6dbd86835215a48fc", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         final int errs = aC.process(theFiles);\n        final ByteArrayInputStream bais =\n             new ByteArrayInputStream(stream.toByteArray());\n         final LineNumberReader lnr =\n            new LineNumberReader(new InputStreamReader(bais, StandardCharsets.UTF_8));\n         for (int i = 0; i < aExpected.length; i++) {\n             final String expected = aMessageFileName + \":\" + aExpected[i];", "fixed": "         final int errs = aC.process(theFiles);\n        final ByteArrayInputStream localStream =\n             new ByteArrayInputStream(stream.toByteArray());\n         final LineNumberReader lnr =\n            new LineNumberReader(new InputStreamReader(localStream, StandardCharsets.UTF_8));\n         for (int i = 0; i < aExpected.length; i++) {\n             final String expected = aMessageFileName + \":\" + aExpected[i];", "sourceBeforeFix": "new InputStreamReader(bais,StandardCharsets.UTF_8)", "sourceAfterFix": "new InputStreamReader(localStream,StandardCharsets.UTF_8)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedStompEndpointBuilder\n             extends\n                 AdvancedStompEndpointConsumerBuilder, AdvancedStompEndpointProducerBuilder {\n         default StompEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedStompEndpointBuilder\n             extends\n                 AdvancedStompEndpointConsumerBuilder, AdvancedStompEndpointProducerBuilder {\n         default StompEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FopEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedFopEndpointBuilder advanced() {\n             return (AdvancedFopEndpointBuilder) this;\n         }", "fixed": "     \n    public interface FopEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedFopEndpointBuilder advanced() {\n             return (AdvancedFopEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "ea36259d22c518ae70f5eb951123c74351be48b6", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         final String key = \"key\";\n         final String value = \"value\";\n        map.lock(key, 4, TimeUnit.SECONDS);\n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n                map.tryPut(key, value, 8, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();", "fixed": "         final String key = \"key\";\n         final String value = \"value\";\n        map.lock(key, 1, TimeUnit.SECONDS);\n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n                map.tryPut(key, value, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();", "sourceBeforeFix": "map.tryPut(key,value,8,TimeUnit.SECONDS)", "sourceAfterFix": "map.tryPut(key,value,60,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "780a95c41d5d9ddafe1a237628183020746825a8", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\r\n \tpublic ObjectMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic ObjectMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBeanstalkEndpointBuilder\n             extends\n                 AdvancedBeanstalkEndpointConsumerBuilder, AdvancedBeanstalkEndpointProducerBuilder {\n         default BeanstalkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBeanstalkEndpointBuilder\n             extends\n                 AdvancedBeanstalkEndpointConsumerBuilder, AdvancedBeanstalkEndpointProducerBuilder {\n         default BeanstalkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId() throws APIException;\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "fixed": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId();\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "0682e8dd41045e3375b61d3d76f6e6991e98c869", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "fixed": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "sourceBeforeFix": "simple.getFromSentDate()", "sourceAfterFix": "simple.getFromReceivedDate()"}
{"fixCommitSHA1": "14a2aa36d5a5636320eae56b8b52738ea0f17a45", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * Get the token kind\n    * @return the kind of the token\n    */\n  public Text getKind() {\n     return kind;\n   }", "fixed": "    * Get the token kind\n    * @return the kind of the token\n    */\n  public synchronized Text getKind() {\n     return kind;\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "         void delta() {}\n         void epsilon() {}\n     }\n    private static class Super {\n         void testOne() {}\n     }\n    private static class Sub extends Super {\n         void testTwo() {}\n     }", "fixed": "         void delta() {}\n         void epsilon() {}\n     }\n    static class Super {\n         void testOne() {}\n     }\n    static class Sub extends Super {\n         void testTwo() {}\n     }", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     int left;\n     short padding;\n    public ContinuationSource(BufferedSource source) {\n       this.source = source;\n     }", "fixed": "     int left;\n     short padding;\n    ContinuationSource(BufferedSource source) {\n       this.source = source;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "47c6a38b50e58d16475615f81af0f343f1401d3b", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "         request.setOperation(operation);\n         request.setKey(key);\n         request.setValue(value);\n        if (ttl > 0 && timeunit != null) {\n             request.setTimeout(timeunit.toMillis(ttl));\n         }\n         return request;", "fixed": "         request.setOperation(operation);\n         request.setKey(key);\n         request.setValue(value);\n        if (ttl >= 0 && timeunit != null) {\n             request.setTimeout(timeunit.toMillis(ttl));\n         }\n         return request;", "sourceBeforeFix": "ttl > 0", "sourceAfterFix": "ttl >= 0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                         flags.add(Flag.CANCELLED);\n                         response.get(OUTCOME).set(CANCELLED);\n                         response.get(FAILURE_DESCRIPTION).set(\"Operation cancelled\");\n                        response.set(ROLLED_BACK).set(true);\n                         return ResultAction.ROLLBACK;\n                     }\n                 }", "fixed": "                         flags.add(Flag.CANCELLED);\n                         response.get(OUTCOME).set(CANCELLED);\n                         response.get(FAILURE_DESCRIPTION).set(\"Operation cancelled\");\n                        response.get(ROLLED_BACK).set(true);\n                         return ResultAction.ROLLBACK;\n                     }\n                 }", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "83eb1a48e70080edffc14ed38362ad1f582f0e8b", "projectName": "b3log.solo", "bugType": "Change Modifier", "problem": "     \n    private boolean sent = false;\n     /**\n      * Language service.", "fixed": "     \n    private static boolean sent = false;\n     /**\n      * Language service.", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "3d3aad91880410164be0372875fe702af44fa279", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     try {\n       info = ShellUtils.getUnixMountInfo();\n     } catch (IOException e) {\n      LOG.warn(\"Failed to get mount information: {}\", e.getMessage());\n       return;\n     }\n     for (UnixMountInfo mountInfo : info) {", "fixed": "     try {\n       info = ShellUtils.getUnixMountInfo();\n     } catch (IOException e) {\n      LOG.debug(\"Failed to get mount information: {}\", e.getMessage());\n       return;\n     }\n     for (UnixMountInfo mountInfo : info) {", "sourceBeforeFix": "LOG.warn(\"Failed to get mount information: {}\",e.getMessage())", "sourceAfterFix": "LOG.debug(\"Failed to get mount information: {}\",e.getMessage())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "23efcad891c91fc131ed4729c734ff6b122197df", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnTask() throws Exception {\n\t\tString processDefinitionId = deployOneTaskProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();", "fixed": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnTask() throws Exception {\n\t\tString processDefinitionId = deployOneTaskTestProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();", "sourceBeforeFix": "deployOneTaskProcess()", "sourceAfterFix": "deployOneTaskTestProcess()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JpaEndpointBuilder\n             extends\n                 JpaEndpointConsumerBuilder, JpaEndpointProducerBuilder {\n         default AdvancedJpaEndpointBuilder advanced() {", "fixed": "     \n    public interface JpaEndpointBuilder\n             extends\n                 JpaEndpointConsumerBuilder, JpaEndpointProducerBuilder {\n         default AdvancedJpaEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedThriftEndpointBuilder\n             extends\n                 AdvancedThriftEndpointConsumerBuilder, AdvancedThriftEndpointProducerBuilder {\n         default ThriftEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedThriftEndpointBuilder\n             extends\n                 AdvancedThriftEndpointConsumerBuilder, AdvancedThriftEndpointProducerBuilder {\n         default ThriftEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cca814afdb1449e3bfc309dc892c0185c783622c", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         int queueSize = -1;\n         if (maxQueueSize != null) {\n            queueSize = CamelContextHelper.parseInteger(getCamelContext(), keepAliveTime);\n         }\n         ExecutorService answer = getCamelContext().getExecutorServiceStrategy().newThreadPool(getId(), getThreadName(),", "fixed": "         int queueSize = -1;\n         if (maxQueueSize != null) {\n            queueSize = CamelContextHelper.parseInteger(getCamelContext(), maxQueueSize);\n         }\n         ExecutorService answer = getCamelContext().getExecutorServiceStrategy().newThreadPool(getId(), getThreadName(),", "sourceBeforeFix": "CamelContextHelper.parseInteger(getCamelContext(),keepAliveTime)", "sourceAfterFix": "CamelContextHelper.parseInteger(getCamelContext(),maxQueueSize)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RabbitMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRabbitMQEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RabbitMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRabbitMQEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "781f153ed21f62ab877ebb9e75cdff7330370cc4", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         }).start();\n         clientRunnable.run();\n         assertTrue(counter.get() > 1);\n        assertTrue(\"Not notified\", latch.await(5, TimeUnit.SECONDS));\n     }\n     @Test", "fixed": "         }).start();\n         clientRunnable.run();\n         assertTrue(counter.get() > 1);\n        assertTrue(\"Not notified\", latch.await(25, TimeUnit.SECONDS));\n     }\n     @Test", "sourceBeforeFix": "latch.await(5,TimeUnit.SECONDS)", "sourceAfterFix": "latch.await(25,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "     setChildren(children);\n   }\n  protected void setJobStatuses(org.apache.hadoop.mapreduce.JobStatus[] stats) {\n     super.setJobStatuses(stats);\n   }", "fixed": "     setChildren(children);\n   }\n  @InterfaceAudience.Private\n  public void setJobStatuses(org.apache.hadoop.mapreduce.JobStatus[] stats) {\n     super.setJobStatuses(stats);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")", "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesHPAEndpointBuilder\n             extends\n                 KubernetesHPAEndpointConsumerBuilder, KubernetesHPAEndpointProducerBuilder {\n         default AdvancedKubernetesHPAEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesHPAEndpointBuilder\n             extends\n                 KubernetesHPAEndpointConsumerBuilder, KubernetesHPAEndpointProducerBuilder {\n         default AdvancedKubernetesHPAEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (Throwable t) {\n \t\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\t\t\t\tlog.debug(\"Could not set field \" + field.getName() + \" to null in class \"\n \t\t\t\t\t\t\t\t\t        + clazz.getName(), t);", "fixed": " \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (Exception t) {\n \t\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\t\t\t\tlog.debug(\"Could not set field \" + field.getName() + \" to null in class \"\n \t\t\t\t\t\t\t\t\t        + clazz.getName(), t);", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);", "fixed": "     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDozerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DozerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDozerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DozerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5b11b62810156d985ad70527c02708d9c7ecc2a4", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "         serviceBuilder.addDependency(threadFactoryName, ThreadFactory.class, service.getThreadFactoryInjector());\n         final String handoffExecutor = getHandoffExecutor();\n        if (handoffExecutor == null) {\n             final ServiceName handoffExecutorName = JBOSS_THREAD_EXECUTOR.append(handoffExecutor);\n             serviceBuilder.addDependency(handoffExecutorName, Executor.class, service.getHandoffExecutorInjector());\n         }", "fixed": "         serviceBuilder.addDependency(threadFactoryName, ThreadFactory.class, service.getThreadFactoryInjector());\n         final String handoffExecutor = getHandoffExecutor();\n        if (handoffExecutor != null) {\n             final ServiceName handoffExecutorName = JBOSS_THREAD_EXECUTOR.append(handoffExecutor);\n             serviceBuilder.addDependency(handoffExecutorName, Executor.class, service.getHandoffExecutorInjector());\n         }", "sourceBeforeFix": "handoffExecutor == null", "sourceAfterFix": "handoffExecutor != null"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "d9510ff4ae62d30d49f80749d8ab1f0d3c16d9a4", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n            out.writeObject(entry.getValue());\n         }\n     }", "fixed": "         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n            out.writeData(entry.getValue());\n         }\n     }", "sourceBeforeFix": "out.writeObject(entry.getValue())", "sourceAfterFix": "out.writeData(entry.getValue())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6ebe652ffe047767ce3f42aa6dd15b2a6d4a6683", "projectName": "square.okhttp", "bugType": "Wrong Function Name", "problem": "     String contentType = null;\n     for (Header header : request.getAllHeaders()) {\n       String name = header.getName();\n      if (\"Content-Type\".equals(name)) {\n         contentType = header.getValue();\n       } else {\n         builder.header(name, header.getValue());", "fixed": "     String contentType = null;\n     for (Header header : request.getAllHeaders()) {\n       String name = header.getName();\n      if (\"Content-Type\".equalsIgnoreCase(name)) {\n         contentType = header.getValue();\n       } else {\n         builder.header(name, header.getValue());", "sourceBeforeFix": "\"Content-Type\".equals(name)", "sourceAfterFix": "\"Content-Type\".equalsIgnoreCase(name)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "ba753282c681f55ff64cce2bbb9e545f5992b1ac", "projectName": "dropwizard.metrics", "bugType": "Wrong Function Name", "problem": "             this.startTime = tick();\n             nextScaleTime.set(System.nanoTime() + RESCALE_THRESHOLD);\n         } finally {\n            lockForRescale();\n         }\n     }", "fixed": "             this.startTime = tick();\n             nextScaleTime.set(System.nanoTime() + RESCALE_THRESHOLD);\n         } finally {\n            unlockForRescale();\n         }\n     }", "sourceBeforeFix": "lockForRescale()", "sourceAfterFix": "unlockForRescale()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3f3bab10b9ca68eb31a7ef5a31e49145b51006fd", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.read(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "fixed": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.readFully(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "sourceBeforeFix": "dis.read(serializedData,0,length)", "sourceAfterFix": "dis.readFully(serializedData,0,length)"}
{"fixCommitSHA1": "14eade7f6e21e560a08de348504584cba5e94c94", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     public static Archive<?> deployment() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "fixed": "     public static Archive<?> deployment() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.setWebXML(SimpleWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "sourceBeforeFix": "war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(),\"web.xml\")", "sourceAfterFix": "war.setWebXML(SimpleWebTestCase.class.getPackage(),\"web.xml\")"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "509beae1e2d9a01e952f9eaf0c4a88037076fc63", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "   }\n   @Override\n  public void openRegions(List<HRegionInfo> regions) {\n     LOG.info(\"Received request to open \" + regions.size() + \" region(s)\");\n     for (HRegionInfo region: regions) openRegion(region);\n   }", "fixed": "   }\n   @Override\n  public void openRegions(List<HRegionInfo> regions)\n  throws RegionServerStoppedException {\n     LOG.info(\"Received request to open \" + regions.size() + \" region(s)\");\n     for (HRegionInfo region: regions) openRegion(region);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "7f4ede5a12b6a6056d545edcbcba8754e7d05624", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         LdapContext ctx = getWiredContext(ldapServer);\n         SimpleRegistry reg = new SimpleRegistry();\n        reg.put(\"localhost:\" + port, ctx);\n         camel = new DefaultCamelContext(reg);\n         template = camel.createProducerTemplate();\n     }", "fixed": "         LdapContext ctx = getWiredContext(ldapServer);\n         SimpleRegistry reg = new SimpleRegistry();\n        reg.bind(\"localhost:\" + port, ctx);\n         camel = new DefaultCamelContext(reg);\n         template = camel.createProducerTemplate();\n     }", "sourceBeforeFix": "reg.put(\"localhost:\" + port,ctx)", "sourceAfterFix": "reg.bind(\"localhost:\" + port,ctx)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "60ab1b09e8d7b90a59ee711fd696612afcc6e60d", "projectName": "openmrs.openmrs-core", "bugType": "More Specific If", "problem": " \t\t\tContext.requirePrivilege(PrivilegeConstants.DELETE_PATIENTS);\n \t\t}\n\t\tif (patient.getIdentifiers().size() == 1) {\n \t\t\tpatient.getPatientIdentifier().setPreferred(true);\n \t\t}", "fixed": " \t\t\tContext.requirePrivilege(PrivilegeConstants.DELETE_PATIENTS);\n \t\t}\n\t\tif (!patient.isVoided() && patient.getIdentifiers().size() == 1) {\n \t\t\tpatient.getPatientIdentifier().setPreferred(true);\n \t\t}", "sourceBeforeFix": "patient.getIdentifiers().size() == 1", "sourceAfterFix": "!patient.isVoided() && patient.getIdentifiers().size() == 1"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "6a9e8a7860257545e4381d1e18df58234ee6f7c6", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "template.sendBodyAndHeader(\"file:\n        Thread.sleep(2000);\n         int count = jdbc.queryForInt(\"select count(*) from books\");\n         assertEquals(\"Number of books\", 3, count);", "fixed": "template.sendBodyAndHeader(\"file:\n        Thread.sleep(3000);\n         int count = jdbc.queryForInt(\"select count(*) from books\");\n         assertEquals(\"Number of books\", 3, count);", "sourceBeforeFix": "Thread.sleep(2000)", "sourceAfterFix": "Thread.sleep(3000)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6df23c1262ef16b539af7b0ac18d1da7bafbc694", "projectName": "scribejava.scribejava", "bugType": "Change Modifier", "problem": "      * @param response the contents of the response\n      * @return OAuth access token\n      */\n    public Token extract(String response);\n }", "fixed": "      * @param response the contents of the response\n      * @return OAuth access token\n      */\n    Token extract(String response);\n }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2cf6eb9e746ab1c610460badf4f99f1ee19bf0b3", "projectName": "clojure.clojure", "bugType": "Same Function Swap Args", "problem": " \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit){\n \t\tif(this.edit == edit)\n \t\t\treturn this;\n\t\treturn new HashCollisionNode(edit, count, hash, array);\n \t}\n \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit, int count, Object[] array){", "fixed": " \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit){\n \t\tif(this.edit == edit)\n \t\t\treturn this;\n\t\treturn new HashCollisionNode(edit, hash, count, array);\n \t}\n \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit, int count, Object[] array){", "sourceBeforeFix": "new HashCollisionNode(edit,count,hash,array)", "sourceAfterFix": "new HashCollisionNode(edit,hash,count,array)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CouchbaseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CouchbaseEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Wrong Function Name", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "fixed": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface UndertowEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedUndertowEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface UndertowEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedUndertowEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     \n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n    \n    private final Deque<PkgControl> stack = new ArrayDeque<>();\n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);", "fixed": "     \n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n    \n    private final Deque<ImportControl> stack = new ArrayDeque<>();\n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);", "sourceBeforeFix": "new PkgControl(pkg,regex)", "sourceAfterFix": "new ImportControl(pkg,regex)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "3ce5556c31e627cc5e47fddf0a639f9e1fa32a3b", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     try {\nconverter.fromBody(decodeBase64(\"\n       fail();\n    } catch (IllegalArgumentException e) {\n       assertThat(e).hasMessage(\"Expected a proto but was: yummy/bytes\");\n     }\n   }", "fixed": "     try {\nconverter.fromBody(decodeBase64(\"\n       fail();\n    } catch (ConversionException e) {\n       assertThat(e).hasMessage(\"Expected a proto but was: yummy/bytes\");\n     }\n   }", "sourceBeforeFix": "IllegalArgumentException e", "sourceAfterFix": "ConversionException e"}
{"fixCommitSHA1": "1924e30482861bbfd3c9a5d97b1be655777e9ed7", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             nodeKey.append(':');\n             nodeKey.append(vmId);\n        } catch (Exception e) {\n             nodeKey.append(\":?\");", "fixed": "             nodeKey.append(':');\n             nodeKey.append(vmId);\n        } catch (Throwable t) {\n             nodeKey.append(\":?\");", "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable t"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "885f7d1e71f16d5051ea7a71fb522ebf85821e97", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                             }\n                         });\n                        configuration.addClientInterceptor(method, factory, InterceptorOrder.View.COMPONENT_DISPATCHER);\n                     }\n                 }", "fixed": "                             }\n                         });\n                        configuration.addViewInterceptor(method, factory, InterceptorOrder.View.COMPONENT_DISPATCHER);\n                     }\n                 }", "sourceBeforeFix": "configuration.addClientInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)", "sourceAfterFix": "configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "             .containsKey(\"name.invalidPattern\"));\n     }\n    private void verifyConfigNode(\n         DefaultConfiguration config, String name, int childrenLength,\n         Properties atts) throws Exception {\n         assertEquals(\"name.\", name, config.getName());", "fixed": "             .containsKey(\"name.invalidPattern\"));\n     }\n    private static void verifyConfigNode(\n         DefaultConfiguration config, String name, int childrenLength,\n         Properties atts) throws Exception {\n         assertEquals(\"name.\", name, config.getName());", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8c31000efa3e7745855734a2babc18fc0ab20bed", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tSet<Object> set1 = this.importSelector.determineImports(\n \t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n \t\tSet<Object> set2 = this.importSelector.determineImports(\n\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n \t\tassertThat(set1).isEqualTo(set2);\n \t}", "fixed": " \t\tSet<Object> set1 = this.importSelector.determineImports(\n \t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class));\n \t\tSet<Object> set2 = this.importSelector.determineImports(\n\t\t\t\tgetAnnotationMetadata(ImportAutoConfigurationWithItemsTwo.class));\n \t\tassertThat(set1).isEqualTo(set2);\n \t}", "sourceBeforeFix": "ImportAutoConfigurationWithItemsOne.class", "sourceAfterFix": "ImportAutoConfigurationWithItemsTwo.class"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JingEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedJingEndpointBuilder advanced() {\n             return (AdvancedJingEndpointBuilder) this;\n         }", "fixed": "     \n    public interface JingEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedJingEndpointBuilder advanced() {\n             return (AdvancedJingEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "80247ada8e7daa46660c732c4fc927e26f055d76", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         for (Property property : legacyModel.asPropertyList()) {\n             String name = property.getName();\n             final ModelNode legacyValue = property.getValue();\n            if (legacyModel.isDefined()) {\n                 final ModelNode value;\n                 switch (name) {\n                     case JacORBSubsystemConstants.ORB_GIOP_MINOR_VERSION:", "fixed": "         for (Property property : legacyModel.asPropertyList()) {\n             String name = property.getName();\n             final ModelNode legacyValue = property.getValue();\n            if (legacyValue.isDefined()) {\n                 final ModelNode value;\n                 switch (name) {\n                     case JacORBSubsystemConstants.ORB_GIOP_MINOR_VERSION:", "sourceBeforeFix": "legacyModel.isDefined()", "sourceAfterFix": "legacyValue.isDefined()"}
