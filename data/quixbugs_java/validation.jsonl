{"name": "FLATTEN.java", "problem": "public static Object flatten(Object arr) { if (arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { result.add(flatten(x)); } } return result; } else { return flatten(arr); } } }", "fixed": "public static Object flatten(Object arr) { if (arr instanceof ArrayList) { ArrayList narr = (ArrayList) arr; ArrayList result = new ArrayList(50); for (Object x : narr) { if (x instanceof ArrayList) { result.addAll((ArrayList) flatten(x)); } else { result.add((x)); } } return result; } else { return arr; } } }", "hint": "Flatten\nFlattens a nested list data structure into a single list.\nInput:", "input": [["moe", "curly", "larry"]], "output": ["moe", "curly", "larry"]}
{"name": "HANOI.java", "problem": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); steps.add(new Pair<Integer,Integer>(start, helper)); steps.addAll(hanoi(height-1, helper, end)); } return steps; } public static class Pair<F, S> { private F first; private S second; public Pair(F first, S second) { this.first = first; this.second = second; } public void setFirst(F first) { this.first = first; } public void setSecond(S second) { this.second = second; } public F getFirst() { return first; } public S getSecond() { return second; } @Override public String toString() { return \"(\" + String.valueOf(first) + \", \" + String.valueOf(second) + \")\"; } } }", "fixed": "public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height-1, start, helper)); steps.add(new Pair<Integer,Integer>(start, end)); steps.addAll(hanoi(height-1, helper, end)); } return steps; } public static class Pair<F, S> { private F first; private S second; public Pair(F first, S second) { this.first = first; this.second = second; } public void setFirst(F first) { this.first = first; } public void setSecond(S second) { this.second = second; } public F getFirst() { return first; } public S getSecond() { return second; } @Override public String toString() { return \"(\" + String.valueOf(first) + \", \" + String.valueOf(second) + \")\"; } } }", "hint": "Towers of Hanoi\nhanoi\nAn algorithm for solving the Towers of Hanoi puzzle.  Three pegs exist, with a stack of differently-sized", "input": [1, 1, 3], "output": [[1, 3]]}
{"name": "SQRT.java", "problem": "public static double sqrt(double x, double epsilon) { double approx = x / 2d; while (Math.abs(x-approx) > epsilon) { approx = 0.5d * (approx + x / approx); } return approx; } }", "fixed": "public static double sqrt(double x, double epsilon) { double approx = x / 2d; while (Math.abs(x-approx*approx) > epsilon) { approx = 0.5d * (approx + x / approx); } return approx; } }", "hint": "Square Root\nNewton-Raphson method implementation.\nInput:", "input": [2, 0.01], "output": 1.4166666666666665}
{"name": "LCS_LENGTH.java", "problem": "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { if (dp.containsKey(i-1)) { Map<Integer, Integer> internal_map = dp.get(i); int insert_value = dp.get(i-1).get(j) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty() ? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } } }", "fixed": "public static Integer lcs_length(String s, String t) { Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>(); for (int i=0; i < s.length(); i++) { Map<Integer,Integer> initialize = new HashMap<Integer,Integer>(); dp.put(i, initialize); for (int j=0; j < t.length(); j++) { Map<Integer,Integer> internal_map = dp.get(i); internal_map.put(j,0); dp.put(i, internal_map); } } for (int i=0; i < s.length(); i++) { for (int j=0; j < t.length(); j++) { if (s.charAt(i) == t.charAt(j)) { if (dp.containsKey(i-1)&&dp.get(i-1).containsKey(j-1)) { Map<Integer, Integer> internal_map = dp.get(i); int insert_value = dp.get(i-1).get(j-1) + 1; internal_map.put(j, insert_value); dp.put(i,internal_map); } else { Map<Integer, Integer> internal_map = dp.get(i); internal_map.put(j,1); dp.put(i,internal_map); } } } } if (!dp.isEmpty()) { List<Integer> ret_list = new ArrayList<Integer>(); for (int i=0; i<s.length(); i++) { ret_list.add(!dp.get(i).isEmpty() ? Collections.max(dp.get(i).values()) : 0); } return Collections.max(ret_list); } else { return 0; } } }", "hint": "Longest Common Substring\nlongest-common-substring\nInput:", "input": "", "output": ""}
