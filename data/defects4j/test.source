static TernaryValue getImpureBooleanValue(Node n) {          return TernaryValue.TRUE;        default:          return getPureBooleanValue(n);
public static double factorialLog(final int n) {       * @since 1.1       */      public static int gcd(int u, int v) {         if (u * v == 0) {              return (Math.abs(u) + Math.abs(v));          }
public static String random(int count, int start, int end, boolean letters, bool          } else if (count < 0) {              throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");          }          if (start == 0 && end == 0) {                  if (!letters && !numbers) {                      end = Integer.MAX_VALUE;                  } else {                      end = 'z' + 1;                      start = ' ';                                  }          }          char[] buffer = new char[count];
protected VectorialPointValuePair doOptimize()                  double[] tmpVec = residuals;                  residuals = oldRes;                  oldRes    = tmpVec;                 determineLMParameter(oldRes, delta, diag, work1, work2, work3);                  double lmNorm = 0;
static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Local          TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {              mLocale = locale;              mStyle = style;             zone = timeZone;              mStandard = getTimeZoneDisplay(timeZone, false, style, locale);              mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);
public void addMapping(      generator.addMapping(          sourceFile, originalName,         new FilePosition(node.getLineno(), node.getCharno()),          outputStartPosition, outputEndPosition);    }
private void findAliases(NodeTraversal t) {              } else {                grandparent.addChildBefore(newDecl, varNode);              }            }
void replace() {          } else {           int indexOfDot = namespace.indexOf('.');            if (indexOfDot == -1) {              compiler.getNodeForCodeInsertion(minimumModule)
public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Fie              return new OngoingInjecter() {                   public boolean thenInject() {                       try {                               new FieldSetter(fieldInstance, field).set(matchingMock);                       } catch (Exception e) {                           throw new MockitoException("Problems injecting dependency in " + field.getName(), e);                       }
JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {      boolean resolved = resolveViaRegistry(t, enclosing);     if (detectImplicitPrototypeCycle()) {        handleTypeCycle(t);      }
public double doubleValue() {       * @return a new reduced fraction instance, or this if no simplification possible       */      public Fraction reduce() {          int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);          if (gcd == 1) {              return this;
public OpenMapRealVector ebeMultiply(RealVector v) {      public OpenMapRealVector ebeMultiply(double[] v) {          checkVectorDimensions(v.length);          OpenMapRealVector res = new OpenMapRealVector(this);         Iterator iter = res.entries.iterator();          while (iter.hasNext()) {              iter.advance();              res.setEntry(iter.key(), iter.value() * v[iter.key()]);
static String strEscape(String s, char quote,      for (int i = 0; i < s.length(); i++) {        char c = s.charAt(i);        switch (c) {         case '\0': sb.append("\\0"); break;          case '\n': sb.append("\\n"); break;          case '\r': sb.append("\\r"); break;          case '\t': sb.append("\\t"); break;
public static Number createNumber(String str) throws NumberFormatException {                  case 'L' :                      if (dec == null                          && exp == null                         && isDigits(numeric.substring(1))                         && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {                          try {                              return createLong(numeric);                          } catch (NumberFormatException nfe) {
public TypeBasedCandidateFilter(MockCandidateFilter next) {          this.next = next;      }     public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {          List<Object> mockTypeMatches = new ArrayList<Object>();          for (Object mock : mocks) {              if (field.getType().isAssignableFrom(mock.getClass())) {
public BrentOptimizer() {       */      protected double doOptimize()          throws MaxIterationsExceededException, FunctionEvaluationException {         throw new UnsupportedOperationException();     }     public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {         clearResult();          return localMin(getGoalType() == GoalType.MINIMIZE,                         f, goalType, min, startValue, max,                          getRelativeAccuracy(), getAbsoluteAccuracy());      }     public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException {         return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));     }      /**       * Find the minimum of the function within the interval {@code (lo, hi)}.
public boolean removeDomainMarker(int index, Marker marker, Layer layer,              markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(                       index));           }           boolean removed = markers.remove(marker);           if (removed && notify) {               fireChangeEvent();
private void skipEOLs() {     */    private String getRemainingJSDocLine() {      String result = stream.getRemainingJSDocLine();      return result;    }
protected VectorialPointValuePair doOptimize()          boolean firstIteration = true;          VectorialPointValuePair current = new VectorialPointValuePair(point, objective);          while (true) {              incrementIterationsCounter();
public void setExplodePercent(Comparable key, double percent) {       * @return The percent.        */       public double getMaximumExplodePercent() {           double result = 0.0;           Iterator iterator = this.dataset.getKeys().iterator();           while (iterator.hasNext()) {
public void misplacedArgumentMatcher(Location location) {                  ));      }     public void smartNullPointerException(Location location) {          throw new SmartNullPointerException(join(                  "You have a NullPointerException here:",                  new Location(),                  "Because this method was *not* stubbed correctly:",                  location,                  ""
public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwar          throw new NoInteractionsWanted(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "':",                  undesired.getLocation(),                  scenario          ));
public Complex(double real) {      public Complex(double real, double imaginary) {          this.real = real;          this.imaginary = imaginary;          isNaN = Double.isNaN(real) || Double.isNaN(imaginary);          isInfinite = !isNaN &&              (Double.isInfinite(real) || Double.isInfinite(imaginary));      }
public void visit(NodeTraversal t, Node n, Node parent) {          Node nameNode = n.getFirstChild();          NameInformation ns = createNameInformation(t, nameNode, n);          if (ns != null && ns.onlyAffectsClassDef) {           JsName name = getName(ns.name, false);           if (name != null) {            refNodes.add(new ClassDefiningFunctionNode(                name, n, parent, parent.getParent()));           }          }        }      }
public PoissonDistributionImpl(double p) {       */      public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {          if (p <= 0) {             throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);          }          mean = p;          normal = new NormalDistributionImpl(p, FastMath.sqrt(p));
public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) endIndex = -(endIndex + 1); endIndex = endIndex - 1;          }          if (endIndex < 0) {               emptyRange = true;           }           if (emptyRange) {
public double getChiSquare(EstimationProblem problem) {          final int rows = problem.getMeasurements().length;         final int cols = problem.getAllParameters().length;          final int max  = cols * rows;          double[][] jTj = new double[cols][cols];          for (int i = 0; i < cols; ++i) {
Node processFunctionNode(FunctionNode functionNode) {        Name name = functionNode.getFunctionName();        Boolean isUnnamedFunction = false;        if (name == null) {          name = new Name();          name.setIdentifier("");          isUnnamedFunction = true;
public String unescape(String str) {                              } else {                                  entityValue = Integer.parseInt(entityName.substring(1));                              }                          } catch (NumberFormatException ex) {                              entityValue = -1;                          }
private static void modify(Calendar val, int field, boolean round) {                  roundUp = offset > ((max - min) / 2);              }                  val.set(fields[i][0], val.get(fields[i][0]) - offset);          }          throw new IllegalArgumentException("The field " + field + " is not supported");
public MultiplePiePlot() {       */       public MultiplePiePlot(CategoryDataset dataset) {           super();          this.dataset = dataset;           PiePlot piePlot = new PiePlot(null);           this.pieChart = new JFreeChart(piePlot);           this.pieChart.removeLegend();
protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,          h[3] = h[2];           if (this.rightBlock != null) {               RectangleConstraint c4 = new RectangleConstraint(0.0,                      new Range(0.0, constraint.getWidth() - w[2]),                       LengthConstraintType.RANGE, h[2], null,                       LengthConstraintType.FIXED);               Size2D size = this.rightBlock.arrange(g2, c4);
public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {        JSDocInfo jsDoc = getFunctionJsDocInfo(n);        if (jsDoc != null &&            (jsDoc.isConstructor() ||             jsDoc.hasThisType() ||             jsDoc.isOverride())) {          return false;
public Range getDataRange(ValueAxis axis) {                              includedAnnotations.add(a);                           }                       }               }           }
public static double pow(double x, double y) {                    if (x < 0) {             if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {                  return pow(-x, y);              }
public Complex divide(double divisor) {          }          if (divisor == 0d) {             return isZero ? NaN : INF;          }          if (Double.isInfinite(divisor)) {              return !isInfinite() ? ZERO : NaN;
public static double linearCombination(final double[] a, final double[] b)              throw new DimensionMismatchException(len, b.length);          }          final double[] prodHigh = new double[len];          double prodLowSum = 0;
public void start() {          startTime = System.currentTimeMillis();      }  }
public static double factorialLog(final int n) {          if (n < 0) {              throw new IllegalArgumentException("must have n > 0 for n!");          }          double logSum = 0;          for (int i = 2; i <= n; i++) {              logSum += Math.log((double)i);
public static LocalDate fromCalendarFields(Calendar calendar) {          if (calendar == null) {              throw new IllegalArgumentException("The calendar must not be null");          }          int yearOfEra = calendar.get(Calendar.YEAR);          return new LocalDate(             yearOfEra,              calendar.get(Calendar.MONTH) + 1,              calendar.get(Calendar.DAY_OF_MONTH)          );
public Complex sqrt1z() {       * @since 1.2       */      public Complex tan() {         if (isNaN) {              return NaN;          }          double real2 = 2.0 * real;          double imaginary2 = 2.0 * imaginary;
public UnivariateRealPointValuePair optimize(final FUNC f,                                                   final GoalType goal,                                                   final double min, final double max)          throws FunctionEvaluationException {         return optimize(f, goal, min, max, 0);      }
private void traverse(Node node) {      do {        Node c = node.getFirstChild();        while(c != null) {         traverse(c);          Node next = c.getNext();          c = next;        }
public Node getChildBefore(Node child) {        return null;      }      Node n = first;      while (n.next != child) {        n = n.next;
public boolean equals(Object other) {                  if (rhs.isNaN()) {                      ret = this.isNaN();                  } else {                     ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));                   }              } catch (ClassCastException ex) {
private Node tryFoldArrayAccess(Node n, Node left, Node right) {      Node current = left.getFirstChild();      Node elem = null;     for (int i = 0; current != null && i < intIndex; i++) {          elem = current;        current = current.getNext();      }
public void removeColumn(Comparable columnKey) {          Iterator iterator = this.rows.iterator();           while (iterator.hasNext()) {               KeyedObjects rowData = (KeyedObjects) iterator.next();                  rowData.removeValue(columnKey);           }           this.columnKeys.remove(columnKey);       }
void replace() {          } else {           int indexOfDot = namespace.indexOf('.');            if (indexOfDot == -1) {              compiler.getNodeForCodeInsertion(minimumModule)
public Void call() throws Exception {         String code = toSource(root, sourceMap);          if (!code.isEmpty()) {            cb.append(code);
protected void declareNameInScope(FlowScope scope, Node node, JSType type) {          scope.inferQualifiedSlot(node, qualifiedName, origType, type);          break;        default:          throw new IllegalArgumentException("Node cannot be refined. \n" +
public long getCount(char v) {       */      @Deprecated      public double getPct(Object v) {         return getCumPct((Comparable<?>) v);      }      /**
private double localMin(boolean isMinim,                      u = x + d;                  }                 double fu = computeObjectiveValue(f, u);                 if (goalType == GoalType.MAXIMIZE) {                      fu = -fu;                  }
boolean isAssignedOnceInLifetime() {        for (BasicBlock block = ref.getBasicBlock();             block != null; block = block.getParent()) {          if (block.isFunction) {            break;          } else if (block.isLoop) {            return false;
public MultiStartUnivariateRealOptimizer(final UnivariateRealOptimizer optimizer            public double getFunctionValue() {         return optimizer.getFunctionValue();      }            public double getResult() {         return optimizer.getResult();      }
protected RealPointValuePair getSolution() {              continue;            }            Integer basicRow = getBasicRow(colIndex);           if (basicRows.contains(basicRow)) {                coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
public void atan2(final double[] y, final int yOffset,          }      }
public JSTypeSystem(AbstractCompiler compiler) {        }        return foundType;      }
public RealMatrix getV()                  final RealMatrix e =                     eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);                  final double[][] eData = e.getData();                  final double[][] wData = new double[n][p];                  double[] ei1 = eData[0];                 for (int i = 0; i < p - 1; ++i) {                      final double mi = mainBidiagonal[i];                      final double[] ei0 = ei1;                      final double[] wi  = wData[i];                          ei1 = eData[i + 1];                          final double si = secondaryBidiagonal[i];                          for (int j = 0; j < p; ++j) {                              wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];                          }                 }                          for (int j = 0; j < p; ++j) {                             wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];                          }                  for (int i = p; i < n; ++i) {                      wData[i] = new double[p];                  }
public static char anyChar() {       * @return <code>0</code>.        */       public static int anyInt() {          return reportMatcher(Any.ANY).returnZero();       }       /**
private void findAliases(NodeTraversal t) {          } else if (parent.getType() == Token.LP) {         } else if (isVar) {            Node grandparent = parent.getParent();           Node value = n.hasChildren() ?               v.getInitialValue().detachFromParent() :                null;           Node varNode = parent;            String name = n.getString();            int nameCount = scopedAliasNames.count(name);
boolean dependsOnOuterScopeVars(String name, Node useNode) {      GraphNode<Node, Branch> n = getCfg().getNode(useNode);      FlowState<MustDef> state = n.getAnnotation();      Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));      for (Var s : def.depends) {        if (s.scope != jsScope) {
public T sample() {       * @throws NotStrictlyPositiveException if {@code sampleSize} is not       * positive.       */     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {          if (sampleSize <= 0) {              throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,                      sampleSize);          }         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);          for (int i = 0; i < sampleSize; i++) {              out[i] = sample();
private void replaceAssignmentExpression(Var v, Reference ref,        }        Node replacement;          nodes.add(new Node(Token.TRUE));
protected PointValuePair doOptimize() {              steepestDescent = newSteepestDescent;             if (iter % n == 0 ||                  beta < 0) {                  searchDirection = steepestDescent.clone();
private void findAliases(NodeTraversal t) {            String qualifiedName =                aliasVar.getInitialValue().getQualifiedName();            transformation.addAlias(name, qualifiedName);          } else {            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());          }         }        }      }
public int translate(CharSequence input, int index, Writer out) throws IOExcepti                  isHex = true;              }              int end = start;             while(input.charAt(end) != ';')               {                  end++;              }
public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Ob              }          }         return next.filterCandidate(mockTypeMatches, field, fieldInstance);      }  }
private void rebuildIndex () {      public void removeValue(int index) {          this.keys.remove(index);          this.values.remove(index);         if (index < this.keys.size()) {          rebuildIndex();         }      }            public void removeValue(Comparable key) {          int index = getIndex(key);          if (index < 0) {    return;          }          removeValue(index);      }
public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {              DateTimeFieldType loopType = types[i];              DurationField loopUnitField = loopType.getDurationType().getField(iChronology);              if (i > 0) {                  int compare = lastUnitField.compareTo(loopUnitField);                  if (compare < 0) {                      throw new IllegalArgumentException("Types array must be in order largest-smallest: " +                              types[i - 1].getName() + " < " + loopType.getName());                 } else if (compare == 0) {                      if (types[i - 1].getRangeDurationType() == null) {                          if (loopType.getRangeDurationType() == null) {                              throw new IllegalArgumentException("Types array must not contain duplicate: " +
private static boolean mayThrowException(Node n) {        case Token.ASSIGN:        case Token.INC:        case Token.DEC:          return true;        case Token.FUNCTION:          return false;
public Object answer(InvocationOnMock invocation) {             return 1;          }          Class<?> returnType = invocation.getMethod().getReturnType();
public static String abbreviate(String str, int lower, int upper, String appendT          if (upper == -1 || upper > str.length()) {
public static int indexOfAnyBut(String str, String searchChars) {          int strLen = str.length();          for (int i = 0; i < strLen; i++) {              char ch = str.charAt(i);             if (searchChars.indexOf(ch) < 0) {                      return i;              }          }          return INDEX_NOT_FOUND;
private long startTime = -1;      public Timer(long durationMillis) {          this.durationMillis = durationMillis;      }
private static void modify(Calendar val, int field, boolean round) {              throw new ArithmeticException("Calendar value too large for accurate calculations");          }
public static boolean equal(GeneralPath p1, GeneralPath p2) {              return false;          }          PathIterator iterator1 = p1.getPathIterator(null);         PathIterator iterator2 = p1.getPathIterator(null);          double[] d1 = new double[6];          double[] d2 = new double[6];          boolean done = iterator1.isDone() && iterator2.isDone();
private String format(JSError error, boolean warning) {        if (excerpt.equals(LINE)           && 0 <= charno && charno < sourceExcerpt.length()) {          for (int i = 0; i < charno; i++) {            char c = sourceExcerpt.charAt(i);            if (Character.isWhitespace(c)) {
public int compare(final PointValuePair o1,              previous = simplex.getPoints();              simplex.iterate(evalFunc, comparator);    ++iteration;          }      }
JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {    @Override    public void matchConstraint(ObjectType constraintObj) {
public void visit(NodeTraversal t, Node n, Node parent) {          JSDocInfo info = n.getJSDocInfo();         if (info != null) {            for (Node node : info.getTypeNodes()) {              fixTypeNode(node);            }
private Fraction(double value, double epsilon, int maxDenominator, int maxIterat          long overflow = Integer.MAX_VALUE;          double r0 = value;          long a0 = (long)FastMath.floor(r0);         if (a0 > overflow) {              throw new FractionConversionException(value, a0, 1l);          }
public static boolean toBoolean(String str) {                          (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&                          (str.charAt(2) == 'S' || str.charAt(2) == 's');                  }              }              case 4: {                  char ch = str.charAt(0);
public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,          PiePlotState state = new PiePlotState(info);           state.setPassesRequired(2);               state.setTotal(DatasetUtilities.calculatePieDatasetTotal(                       plot.getDataset()));           state.setLatestAngle(plot.getStartAngle());           return state;
public static boolean isEmpty(boolean[] array) {          final Class<?> type1 = array1.getClass().getComponentType();          T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);          System.arraycopy(array1, 0, joinedArray, 0, array1.length);              System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);          return joinedArray;      }
public void unescape(Writer writer, String string) throws IOException {                                      case 'X' :                                      case 'x' : {                                          entityValue = Integer.parseInt(entityContent.substring(2), 16);                                      }                                      default : {                                          entityValue = Integer.parseInt(entityContent.substring(1), 10);                                      }                                  }                              } catch (NumberFormatException e) {                              }                          } } else {
public static int anyInt() {       * @return <code>0</code>.        */       public static long anyLong() {          return reportMatcher(Any.ANY).returnZero();       }       /**
public double toDouble() {          Dfp y = this;          boolean negate = false;         if (lessThan(getZero())) {              y = negate();              negate = true;          }
private void findAliases(NodeTraversal t) {
public void applyAlias() {      private final Map<String, Var> aliases = Maps.newHashMap();
protected VectorialPointValuePair doOptimize()              }              if (maxCosine <= orthoTolerance) {                 return new VectorialPointValuePair(point, objective);              }
public double getL1Norm() {      public double getLInfNorm() {          double max = 0;          for (double a : data) {             max += Math.max(max, Math.abs(a));          }          return max;      }
public XYDataItem addOrUpdate(Number x, Number y) {          if (x == null) {               throw new IllegalArgumentException("Null 'x' argument.");           }           XYDataItem overwritten = null;           int index = indexOf(x);          if (index >= 0 && !this.allowDuplicateXValues) {               XYDataItem existing = (XYDataItem) this.data.get(index);               try {                   overwritten = (XYDataItem) existing.clone();
private void computeShiftIncrement(final int start, final int end, final int def                  double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);                 if (end - start > 2) {                      b2 = work[nn - 13] / work[nn - 15];                      a2 = a2 + b2;                      for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
*/  public class ExtendedMessageFormat extends MessageFormat {      private static final long serialVersionUID = -2362048321261811743L;      private static final String DUMMY_PATTERN = "";      private static final String ESCAPED_QUOTE = "''";
* @since 2.0   */  public abstract class BitsStreamGenerator     implements RandomGenerator {                  private double nextGaussian;
public ValueMarker(double value, Paint paint, Stroke stroke) {       */       public ValueMarker(double value, Paint paint, Stroke stroke,                           Paint outlinePaint, Stroke outlineStroke, float alpha) {          super(paint, stroke, paint, stroke, alpha);           this.value = value;       }
public RealMatrix getCorrelationPValues() throws MathException {                  } else {                      double r = correlationMatrix.getEntry(i, j);                      double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));                     out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));                  }              }          }
private Node tryFoldArrayJoin(Node n) {        return n;      }      String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);      List<Node> arrayFoldedChildren = Lists.newLinkedList();
protected double acceptStep(final AbstractStepInterpolator interpolator,              double previousT = interpolator.getGlobalPreviousTime();              final double currentT = interpolator.getGlobalCurrentTime();             resetOccurred = false;              if (! statesInitialized) {
void endCaseBody() {      @Override      void appendOp(String op, boolean binOp) {        if (binOp) {         if (getLastChar() != ' ') {            append(" ");          }          append(op);
public double getTrace() throws IllegalArgumentException {          if (v.length != nCols) {              throw new IllegalArgumentException("vector has wrong length");          }         final double[] out = new double[v.length];          for (int row = 0; row < nRows; row++) {              final double[] dataRow = data[row];              double sum = 0;
public void enterScope(NodeTraversal t) {      reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);      reachingUses.analyze();      for (Candidate c : candidates) {       if (c.canInline()) {          c.inlineVariable();
public boolean isFeasible(final double[] x) {                  return true;              }              for (int i = 0; i < x.length; i++) {                 if (x[i] < 0) {                      return false;                  }                 if (x[i] > 1.0) {                      return false;                  }              }
public String toString(PrintSettings printSettings) {      public void captureArgumentsFrom(Invocation i) {          int k = 0;          for (Matcher m : matchers) {             if (m instanceof CapturesArguments) {                  ((CapturesArguments) m).captureFrom(i.getArguments()[k]);              }              k++;
public CholeskyDecompositionImpl(final RealMatrix matrix,              final double[] ltI = lTData[i];              ltI[i] = Math.sqrt(ltI[i]);              final double inverse = 1.0 / ltI[i];
public void visit(NodeTraversal t, Node n, Node parent) {        case Token.FUNCTION:          nameStack.pop();          break;        case Token.CATCH:
public double optimize(final UnivariateRealFunction f, final GoalType goalType,       * the function.       */      private double localMin(boolean isMinim,                             UnivariateRealFunction f,                             GoalType goalType,                              double lo, double mid, double hi,                              double eps, double t)          throws MaxIterationsExceededException, FunctionEvaluationException {
public double abs() {      public Complex add(Complex rhs)          throws NullArgumentException {          MathUtils.checkNotNull(rhs);          return createComplex(real + rhs.getReal(),              imaginary + rhs.getImaginary());      }
protected CompilerOptions createOptions() {      for (FormattingOption formattingOption : flags.formatting) {        formattingOption.applyToOptions(options);      }     if (flags.process_closure_primitives) {       options.closurePass = true;     }      initOptionsFromFlags(options);      return options;    }
public void add(BoxAndWhiskerItem item, Comparable rowKey,                  && this.minimumRangeValueColumn == c))  {               updateBounds();           }               double minval = Double.NaN;               if (item.getMinOutlier() != null) {
public Partial with(DateTimeFieldType fieldType, int value) {              System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);             Partial newPartial = new Partial(iChronology, newTypes, newValues);              iChronology.validate(newPartial, newValues);              return newPartial;          }
public static byte anyByte() {       * @return <code>0</code>.        */       public static char anyChar() {          return reportMatcher(Any.ANY).returnChar();       }       /**
String toStringHelper(boolean forAnnotations) {        prettyPrint = true;        return sb.toString();      } else {       return "{...}";      }    }
public static LocalDate fromDateFields(Date date) {          if (date == null) {              throw new IllegalArgumentException("The date must not be null");          }          return new LocalDate(              date.getYear() + 1900,              date.getMonth() + 1,
public long set(long instant, String text, Locale locale) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, text, locale);             return iZone.convertLocalToUTC(localInstant, false);          }          public int getDifference(long minuendInstant, long subtrahendInstant) {
public static short anyShort() {       * @return <code>null</code>.        */       public static <T> T any(Class<T> clazz) {          return (T) reportMatcher(Any.ANY).returnFor(clazz);       }       /**
private void computeDependence(final Definition def, Node rValue) {          new AbstractCfgNodeTraversalCallback() {        @Override        public void visit(NodeTraversal t, Node n, Node parent) {         if (n.isName() && jsScope.isDeclared(n.getString(), true)) {            Var dep = jsScope.getVar(n.getString());              def.depends.add(dep);          }        }      });
private double innerCumulativeProbability(int x0, int x1, int dx) {       * size {@code n}, the mean is {@code n * m / N}.       */      public double getNumericalMean() {         return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();      }      /**
public int getArgumentsCount() {      }      public Object callRealMethod() throws Throwable {          return realMethod.invoke(mock, rawArguments);      }
protected VectorialPointValuePair doOptimize()              qrDecomposition();             qTy(residuals);              for (int k = 0; k < solvedCols; ++k) {
public int estimateLength() {           */          @Override          public void appendTo(StringBuffer buffer, Calendar calendar) {              if (zone.useDaylightTime()                      && calendar.get(Calendar.DST_OFFSET) != 0) {                  buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));
public int translate(CharSequence input, int index, Writer out) throws IOException {          int seqEnd = input.length();         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '              int start = index + 2;              boolean isHex = false;
public static List anyList() {       * @return empty List.        */       public static <T> List<T> anyListOf(Class<T> clazz) {          return (List) reportMatcher(Any.ANY).returnList();       }           /**
private void visitScript(NodeTraversal t, Node script) {       */      private void emitOptionalModuleExportsOverride(Node script,          String moduleName) {        Node moduleExportsProp = IR.getprop(IR.name(moduleName),            IR.string("module$exports"));
String toStringHelper(boolean forAnnotations) {          sb.append(property);          sb.append(": ");         sb.append(getPropertyType(property).toString());          ++i;         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {            sb.append(", ...");            break;          }
private void visitLabel(Node node, Node parent) {        String name = nameNode.getString();        LabelInfo li = getLabelInfo(name);       if (li.referenced) {          String newName = getNameForId(li.id);          if (!name.equals(newName)) {
public double dotProduct(RealVector v) {      public OpenMapRealVector ebeDivide(RealVector v) {          checkVectorDimensions(v.getDimension());          OpenMapRealVector res = new OpenMapRealVector(this);         Iterator iter = res.entries.iterator();          while (iter.hasNext()) {              iter.advance();              res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));
private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericM                  : withSettings();           return mockSettings                   .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));       }
protected Dfp(final DfpField field, double x) {              if (x == 0) {                  return;              }
Reference getInitializingReferenceForConstants() {      boolean isAssignedOnceInLifetime() {        Reference ref = getOneAndOnlyAssignment();        if (ref == null) {          return false;        }        return true;      }
static String strEscape(String s, char quote,             if (c > 0x1f && c <= 0x7f) {                sb.append(c);              } else {
private FlowScope traverseNew(Node n, FlowScope scope) {          }          if (ct != null && ct.isConstructor()) {            type = ct.getInstanceType();          }        }      }      n.setJSType(type);     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {       scope = traverse(arg, scope);     }      return scope;    }
protected static int between(ReadablePartial start, ReadablePartial end, Readabl              throw new IllegalArgumentException("ReadablePartial objects must be contiguous");          }          Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();         int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));          return values[0];      }
public void stop() {          if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {              throw new IllegalStateException("Stopwatch is not running. ");          }              stopTime = System.currentTimeMillis();          this.runningState = STATE_STOPPED;      }
*/      static boolean isRegistered(Object value) {          Map<Object, Object> m = getRegistry();         return m.containsKey(value);      }      /**
public void markName(String name, int lineno, int charno) {     * @return {@code true} if the description was recorded.     */    public boolean recordBlockDescription(String description) {     if (parseDocumentation) {      populated = true;     }      return currentInfo.documentBlock(description);    }
private void prelim(double[] lowerBound,                  final int ih = ipt * (ipt - 1) / 2 + jpt - 1;                  final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);                  modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp); throw new PathIsExploredException();              }          } while (getEvaluations() < npt); }
private void visitModuleExports(Node prop) {        Node exports = prop.getChildAtIndex(1);        exports.putProp(Node.ORIGINALNAME_PROP, "exports");        exports.setString("module$exports");      }      /**
private boolean isInlinableObject(List<Reference> refs) {              return false;            }            Node childVal = child.getFirstChild();
private void prelim(double[] lowerBound,                      final int tmp2 = jpt;                      jpt = ipt - n;                      ipt = tmp2; throw new PathIsExploredException();                  }                 final int iptMinus1 = ipt;                 final int jptMinus1 = jpt;                  interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));                  interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));              }
private static Object copyArrayGrow1(Object array, Class<?> newArrayComponentTyp          } else if (element != null) {              clss = element.getClass();          } else {             return (T[]) new Object[] { null };          } @SuppressWarnings("unchecked")          final T[] newArray = (T[]) add(array, index, element, clss);
private void computeGenKill(Node n, BitSet gen, BitSet kill,              lhs = lhs.getLastChild();            }              addToSetIfLocal(lhs, kill);              addToSetIfLocal(lhs, gen);            computeGenKill(rhs, gen, kill, conditional);          }          return;
public int compare(EventState es0, EventState es1) {                  final double[] eventY = interpolator.getInterpolatedState().clone();                 currentEvent.stepAccepted(eventT, eventY);                 isLastStep = currentEvent.stop();                  for (final StepHandler handler : stepHandlers) {
public void setSecondOfMinute(final int secondOfMinute) {       * @throws IllegalArgumentException if the value is invalid       */      public void addSeconds(final int seconds) {              setMillis(getChronology().seconds().add(getMillis(), seconds));      }
public boolean matches(Object actual) {      public void describeTo(Description description) {          description.appendText("same(");          appendQuoting(description);         description.appendText(wanted.toString());          appendQuoting(description);          description.appendText(")");      }
public static boolean anyBoolean() {       * @return <code>0</code>.        */       public static byte anyByte() {          return reportMatcher(Any.ANY).returnZero();       }       /**
JSType meet(JSType that) {        builder.addAlternate(that);      }      JSType result = builder.build();     if (result != null) {        return result;      } else if (this.isObject() && that.isObject()) {        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type                  : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);         if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {              return typeVarAssigns;          }
public final void translate(CharSequence input, Writer out) throws IOException {              return;          }          int pos = 0;         int len = Character.codePointCount(input, 0, input.length());          while (pos < len) {              int consumed = translate(input, pos, out);              if (consumed == 0) {                  char[] c = Character.toChars(Character.codePointAt(input, pos));                  out.write(c);              }             else {              for (int pt = 0; pt < consumed; pt++) {                     if (pos < len - 2) {                  pos += Character.charCount(Character.codePointAt(input, pos));                     } else {                         pos++;                     }                 }                 pos--;              }             pos++;          }      }
public double evaluate(double x, double epsilon, int maxIterations) {          int n = 1;          double dPrev = 0.0;         double p0 = 1.0;         double q1 = 1.0;          double cPrev = hPrev;          double hN = hPrev;
private void tryRemoveUnconditionalBranching(Node n) {                  outEdges.get(0).getValue() == Branch.UNCOND);              Node fallThrough = computeFollowing(n);              Node nextCfgNode = outEdges.get(0).getDestination().getValue();             if (nextCfgNode == fallThrough) {                removeNode(n);              }            }        }      }      private Node computeFollowing(Node n) {        Node next = ControlFlowAnalysis.computeFollowNode(n);
public int indexOf(char ch, int startIndex) {              return -1;          }          char[] thisBuf = buffer;         for (int i = startIndex; i < thisBuf.length; i++) {              if (thisBuf[i] == ch) {                  return i;              }
public Object handle(Invocation invocation) throws Throwable {          if (verificationMode != null) {              if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                                   VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);                               verificationMode.verify(data);                   return null;               }           }
public Fraction parse(String source, ParsePosition pos) {              return null;           }           int startIndex = pos.getIndex();
public static float anyFloat() {       * @return <code>0</code>.        */       public static double anyDouble() {          return reportMatcher(Any.ANY).returnZero();       }       /**
public static double solve(UnivariateRealFunction f, double x0, double x1,          } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&                   ((a > lowerBound) || (b < upperBound)));         if (fa * fb >= 0.0 ) {              throw new ConvergenceException(                        "number of iterations={0}, maximum iterations={1}, " +                        "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
protected final double doSolve() {                  case PEGASUS:                      f0 *= f1 / (f1 + fx);                      break;                  default:                  }              }
private void visitCall(NodeTraversal t, Node n) {        visitParameterList(t, n, functionType);        ensureTyped(t, n, functionType.getReturnType());
public BigFraction divide(final BigFraction fraction) {      @Override      public double doubleValue() {          double result = numerator.doubleValue() / denominator.doubleValue();          return result;      }
public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {        }      }      if (parent != null && parent.getType() == Token.ASSIGN) {
public void cannotInjectDependency(Field field, Object matchingMock, Exception d      }      private String exceptionCauseMessageIfAvailable(Exception details) {          return details.getCause().getMessage();      }
static String strEscape(String s, char quote,      for (int i = 0; i < s.length(); i++) {        char c = s.charAt(i);        switch (c) {          case '\n': sb.append("\\n"); break;          case '\r': sb.append("\\r"); break;          case '\t': sb.append("\\t"); break;
public static Locale toLocale(final String str) {                  throw new IllegalArgumentException("Invalid locale format: " + str);              }              return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));      }
public double density(double x) {       */      public double cumulativeProbability(double x) throws MathException {          final double dev = x - mean;         try {          return 0.5 * (1.0 + Erf.erf((dev) /                      (standardDeviation * FastMath.sqrt(2.0))));         } catch (MaxIterationsExceededException ex) { if (x < (mean - 20 * standardDeviation)) {                 return 0;             } else if (x > (mean + 20 * standardDeviation)) {                 return 1;             } else {                 throw ex;             }         }      }      /**
Node parseInputs() {        if (options.dependencyOptions.needsManagement() &&           !options.skipAllPasses &&            options.closurePass) {          for (CompilerInput input : inputs) {
public void injectMocksOnFields(Set<Field> injectMocksFields, Set<Object> mocks,      private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {           for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {              mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();           }       }
private VariableLiveness isVariableReadBeforeKill(          for (Node child = n.getFirstChild();              child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {            VariableLiveness state = isVariableReadBeforeKill(child, variable);            if (state != VariableLiveness.MAYBE_LIVE) {              return state;            }          }       }      }      return VariableLiveness.MAYBE_LIVE;
public int compare(EventState es0, EventState es1) {                  if (isLastStep) {                      System.arraycopy(eventY, 0, y, 0, y.length);                     for (final EventState remaining : occuringEvents) {                         remaining.stepAccepted(eventT, eventY);                     }                      return eventT;                  }                 boolean needReset = currentEvent.reset(eventT, eventY);                  if (needReset) {                      System.arraycopy(eventY, 0, y, 0, y.length);                      computeDerivatives(eventT, y, yDot);                      resetOccurred = true;                     for (final EventState remaining : occuringEvents) {                         remaining.stepAccepted(eventT, eventY);                     }                      return eventT;                  }
private void findAliases(NodeTraversal t) {              NodeUtil.setDebugInformation(                  newDecl.getFirstChild().getFirstChild(), n, name);                grandparent.addChildBefore(newDecl, varNode);            }
protected VectorialPointValuePair doOptimize()                  updateResidualsAndCost();                 current = new VectorialPointValuePair(point, objective);                  double actRed = -1.0;
private void declareArguments(Node functionNode) {            for (Node astParameter : astParameters.children()) {              if (jsDocParameter != null) {                defineSlot(astParameter, functionNode,                   jsDocParameter.getJSType(), true);                jsDocParameter = jsDocParameter.getNext();              } else {                defineSlot(astParameter, functionNode, null, true);
private Object spiedInstance;       private Answer<Object> defaultAnswer;       private MockName mockName;       public MockSettings serializable() {          return this.extraInterfaces(java.io.Serializable.class);       }       public MockSettings extraInterfaces(Class<?>... extraInterfaces) {
public static boolean containsAny(CharSequence cs, char[] searchChars) {              char ch = cs.charAt(i);              for (int j = 0; j < searchLength; j++) {                  if (searchChars[j] == ch) {                     if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {                         if (searchChars[j + 1] == cs.charAt(i + 1)) {                              return true;                          }                      } else {
private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu       * @param parentMock The parent of the current deep stub mock.        * @return The mock        */      private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {           return mockitoCore().mock(                   returnTypeGenericMetadata.rawType(),                  withSettingsUsing(returnTypeGenericMetadata)           );       }      private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {           MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?                   withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())                   : withSettings();          return mockSettings.serializable()                   .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));       }       private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {           return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);
private Integer getPivotRow(SimplexTableau tableau, final int col) {                  for (Integer row : minRatioPositions) {                      for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {                          int column = i + tableau.getArtificialVariableOffset();
public OpenMapRealVector ebeDivide(RealVector v) {      public OpenMapRealVector ebeDivide(double[] v) {          checkVectorDimensions(v.length);          OpenMapRealVector res = new OpenMapRealVector(this);         Iterator iter = res.entries.iterator();          while (iter.hasNext()) {              iter.advance();              res.setEntry(iter.key(), iter.value() / v[iter.key()]);
public Void call() throws Exception {    @Override    String toSource(Node n) {      initCompilerOptionsIfTesting();     return toSource(n, null);    }       private String toSource(Node n, SourceMap sourceMap) {      CodePrinter.Builder builder = new CodePrinter.Builder(n);      builder.setPrettyPrint(options.prettyPrint);      builder.setLineBreak(options.lineBreak);      builder.setSourceMap(sourceMap);      builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);     builder.setTagAsStrict(          options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);      builder.setLineLengthThreshold(options.lineLengthThreshold);
public int translate(CharSequence input, int index, Writer out) throws IOExcepti                  out.write(entityValue);              }             return 2 + (end - start) + (isHex ? 1 : 0) + 1;          }          return 0;      }
private static String extractClassNameIfGoog(Node node, Node parent,          String qualifiedName = callee.getQualifiedName();          if (functionName.equals(qualifiedName)) {            Node target = callee.getNext();           if (target != null) {              className = target.getString();            }          }
private Node tryRemoveUnconditionalBranching(Node n) {              (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {            Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);           Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));            Node nextCfgNode = outEdges.get(0).getDestination().getValue();            if (nextCfgNode == fallThrough) {              removeDeadExprStatementSafely(n);
public static short eq(short value) {       * @return <code>null</code>.        */       public static <T> T same(T value) {          return reportMatcher(new Same(value)).<T>returnNull();       }       /**
void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,      String joinString = NodeUtil.getStringValue(right);      List<Node> arrayFoldedChildren = Lists.newLinkedList();     StringBuilder sb = new StringBuilder();      int foldedSize = 0;      Node elem = arrayNode.getFirstChild();      while (elem != null) {        if (NodeUtil.isImmutableValue(elem)) {         if (sb.length() > 0) {            sb.append(joinString);          }          sb.append(NodeUtil.getStringValue(elem));        } else {         if (sb.length() > 0) {            foldedSize += sb.length() + 2;            arrayFoldedChildren.add(Node.newString(sb.toString()));           sb = new StringBuilder();          }          foldedSize += InlineCostEstimator.getCost(elem);          arrayFoldedChildren.add(elem);
public boolean removeDomainMarker(int index, Marker marker, Layer layer,              markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(                       index));           }           boolean removed = markers.remove(marker);           if (removed && notify) {               fireChangeEvent();
public static short anyShort() {       * @return <code>null</code>.        */       public static <T> T any() {          return (T) anyObject();       }       /**
public RectangularCholeskyDecomposition(RealMatrix matrix, double small)          final double[][] c = matrix.getData();          final double[][] b = new double[order][order];         int[] swap  = new int[order];          int[] index = new int[order];          for (int i = 0; i < order; ++i) {              index[i] = i;
public double getL1Distance(double[] v) throws IllegalArgumentException {          return max;      }     public double getLInfNorm() {         double max = 0;         Iterator iter = entries.iterator();         while (iter.hasNext()) {             iter.advance();             max += iter.value();         }         return max;     }      /**       * Optimized method to compute LInfDistance.       * @param v The vector to compute from
public Fraction abs() {       *         than <tt>object</tt>, 0 if they are equal.       */      public int compareTo(Fraction object) {         double nOd = doubleValue();         double dOn = object.doubleValue();          return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);      }
Node processUnaryExpression(UnaryExpression exprNode) {        }      }      @Override      Node processVariableDeclaration(VariableDeclaration declarationNode) {
public String format(long millis) {       * @return the formatted string       */      public String format(Date date) {         Calendar c = new GregorianCalendar(mTimeZone);          c.setTime(date);          return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();      }
public static void escapeJavaScript(Writer out, String str) throws IOException {       * @param escapeForwardSlash TODO       * @return the escaped string       */     private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {          if (str == null) {              return null;          }          try {              StringWriter writer = new StringWriter(str.length() * 2);             escapeJavaStyleString(writer, str, escapeSingleQuotes);              return writer.toString();          } catch (IOException ioe) {
ReachingUses flowThrough(Node n, ReachingUses input) {    }    private boolean hasExceptionHandler(Node cfgNode) {      return false;    }
private void guessAOmega() {                  }                  a = 0.5 * (yMax - yMin);              } else {                  a = FastMath.sqrt(c1 / c2);                  omega = FastMath.sqrt(c2 / c3);
public int getOffsetFromLocal(long instantLocal) {                      return offsetLocal;                  }              }          }          return offsetAdjusted;      }
protected void updateResidualsAndCost()      public double getRMS() {         double criterion = 0;         for (int i = 0; i < rows; ++i) {             final double residual = residuals[i];             criterion += residual * residual * residualsWeights[i];         }         return Math.sqrt(criterion / rows);      }            public double getChiSquare() {          double chiSquare = 0;          for (int i = 0; i < rows; ++i) {              final double residual = residuals[i];             chiSquare += residual * residual / residualsWeights[i];          }          return chiSquare;      }      /**       * Get the covariance matrix of optimized parameters.       * @return covariance matrix       * @exception FunctionEvaluationException if the function jacobian cannot       * be evaluated       * @exception OptimizationException if the covariance matrix
public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int          if (timeZone != null) {              key = new Pair(key, timeZone);          }         if (locale != null) {             key = new Pair(key, locale);          }          FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);          if (format == null) {             if (locale == null) {                 locale = Locale.getDefault();             }              try {                  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,                          locale);
private void visitScript(NodeTraversal t, Node script) {        Preconditions.checkArgument(scriptNodeCount == 1,            "ProcessCommonJSModules supports only one invocation per " +            "CompilerInput / script node");       String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));        script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())            .copyInformationFromForTree(script));        if (reportDependencies) {
protected PointValuePair doOptimize() {          generationLoop:          for (iterations = 1; iterations <= maxIterations; iterations++) {              final RealMatrix arz = randn1(dimension, lambda);
public static int gcd(final int p, final int q) {          int u = p;          int v = q;          if ((u == 0) || (v == 0)) {              return (Math.abs(u) + Math.abs(v));          }
public Dfp multiply(final Dfp x) {       * @return product of this and x       */      public Dfp multiply(final int x) {              return multiplyFast(x);      }      /** Multiply this by a single digit 0&lt;=x&lt;radix.
protected final double doSolve() {                  case REGULA_FALSI:                      break;                  default:
private void visitParameterList(NodeTraversal t, Node call,      Node parameter = null;      Node argument = null;      while (arguments.hasNext() &&            parameters.hasNext()) {          parameter = parameters.next();        argument = arguments.next();        ordinal++;
private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {            } else {              recordDepScope(nameNode, ns);            }         } else {
protected double getDomainUpperBound(double p) {       * @return initial domain value       */      protected double getInitialDomain(double p) {         double ret;          double d = getDenominatorDegreesOfFreedom();              ret = d / (d - 2.0);          return ret;      }
public static Number createNumber(String str) throws NumberFormatException {              }              dec = null;          }         if (!Character.isDigit(lastChar)) {              if (expPos > -1 && expPos < str.length() - 1) {                  exp = str.substring(expPos + 1, str.length() - 1);              } else {
public static BigDecimal createBigDecimal(String str) {          if (StringUtils.isBlank(str)) {              throw new NumberFormatException("A blank string is not a valid number");          }          return new BigDecimal(str);      }
public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) {          if (width > 0) {              ensureCapacity(size + width);              String str = (obj == null ? getNullText() : obj.toString());              int strLen = str.length();              if (strLen >= width) {                  str.getChars(strLen - width, strLen, buffer, size);
private Integer getPivotRow(SimplexTableau tableau, final int col) {                  Integer minRow = null;                  int minIndex = tableau.getWidth();                  for (Integer row : minRatioPositions) {
private VariableLiveness isVariableReadBeforeKill(        Node n, String variable) {      if (NodeUtil.isName(n) && variable.equals(n.getString())) {        if (NodeUtil.isLhs(n, n.getParent())) {          return VariableLiveness.KILL;        } else {          return VariableLiveness.READ;
public class Equality {       public static boolean areEqual(Object o1, Object o2) {          if (o1 == null || o2 == null) {               return o1 == null && o2 == null;           } else if (isArray(o1)) {               return isArray(o2) && areArraysEqual(o1, o2);
private Node transformBlock(AstNode node) {     * Check to see if the given block comment looks like it should be JSDoc.     */    private void handleBlockComment(Comment comment) {     if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {        errorReporter.warning(            SUSPICIOUS_COMMENT_WARNING,            sourceName,
private boolean inferTemplatedTypesForCall(      }     Map<TemplateType, JSType> inferred =          inferTemplateTypesFromParameters(fnType, n);
private Fraction(double value, double epsilon, int maxDenominator, int maxIterat              long a1 = (long)FastMath.floor(r1);              p2 = (a1 * p1) + p0;              q2 = (a1 * q1) + q0;             if ((p2 > overflow) || (q2 > overflow)) {                  throw new FractionConversionException(value, p2, q2);              }
void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,        elem = elem.getNext();      }     if (sb.length() > 0) {        foldedSize += sb.length() + 2;        arrayFoldedChildren.add(Node.newString(sb.toString()));
private void copyArray(final double[] src, final double[] dest,       */      protected RealPointValuePair getSolution() {        double[] coefficients = new double[getOriginalNumDecisionVariables()];       Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());        double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());        Set<Integer> basicRows = new HashSet<Integer>();        for (int i = 0; i < coefficients.length; i++) {           Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);            if (basicRows.contains(basicRow)) {
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff       * @return the DateTimeZone object for the offset       */      public static DateTimeZone forOffsetMillis(int millisOffset) {          String id = printOffset(millisOffset);          return fixedOffsetZone(id, millisOffset);      }
void addNumber(double x) {      char prev = getLastChar();      boolean negativeZero = isNegativeZero(x);     if (x < 0 && prev == '-') {        add(" ");      }
public JSType caseNumberType() {      public JSType caseObjectType(ObjectType type) {        if (value.equals("function")) {          JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);         return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;        }        return matchesExpectation("object") ? type : null;      }
new RestrictByTrueTypeOfResultVisitor() {          @Override          protected JSType caseTopType(JSType topType) {           return topType;          }          @Override
public double integrate(final FirstOrderDifferentialEquations equations,          }          if (firstTime) {           final double[] scale;            if (vecAbsoluteTolerance == null) {               scale = new double[y0.length];               java.util.Arrays.fill(scale, scalAbsoluteTolerance);              } else {               scale = vecAbsoluteTolerance;              }            hNew = initializeStep(equations, forward, getOrder(), scale,                                  stepStart, y, yDotK[0], yTmp, yDotK[1]);
private BigFraction(final double value, final double epsilon,              if ((p2 > overflow) || (q2 > overflow)) {                  throw new FractionConversionException(value, p2, q2);              }
private boolean isSafeReplacement(Node node, Node replacement) {      }      Preconditions.checkArgument(node.isGetProp());        node = node.getFirstChild();      if (node.isName()          && isNameAssignedTo(node.getString(), replacement)) {        return false;
private static Node computeFollowNode(          } else if (parent.getLastChild() == node){            if (cfa != null) {              for (Node finallyNode : cfa.finallyMap.get(parent)) {               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);              }            }            return computeFollowNode(fromNode, parent, cfa);
else if (lclip <= 0.0) {          }              double valueDelta = dataset.getStdDevValue(row, column).doubleValue();               double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue()                        + valueDelta, dataArea, yAxisLocation);               double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
public double solve(final UnivariateRealFunction f,          double yMax = f.value(max);          if (Math.abs(yMax) <= functionValueAccuracy) {             setResult(yMax, 0);              return result;          }
private Node performArithmeticOp(int opType, Node left, Node right) {          break;        case Token.MOD:          if (rval == 0) {           error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);            return null;          }          result = lval % rval;          break;        case Token.DIV:          if (rval == 0) {           error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);            return null;          }          result = lval / rval;
public IOngoingStubbing stub() {          } else if (!mockUtil.isMock(mock)) {               reporter.notAMockPassedToVerify();           }          mockingProgress.verificationStarted(mode);           return mock;       }
public int parseInto(ReadWritableInstant instant, String text, int position) {          chrono = selectChronology(chrono);          DateTimeParserBucket bucket = new DateTimeParserBucket(             instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);          int newPos = parser.parseInto(bucket, text, position);          instant.setMillis(bucket.computeMillis(false, text));          if (iOffsetParsed && bucket.getOffsetInteger() != null) {
static float toJavaVersionFloat(String version) {       *        * @return the version, for example 131 for Java 1.3.1       */     static float toJavaVersionInt(String version) {          return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));      }
private void checkPropertyVisibility(NodeTraversal t,      if (objectType != null) {       boolean isOverride = t.inGlobalScope() &&            parent.getType() == Token.ASSIGN &&            parent.getFirstChild() == getprop;
protected UnivariatePointValuePair doOptimize() {          UnivariatePointValuePair current              = new UnivariatePointValuePair(x, isMinim ? fx : -fx);          int iter = 0;          while (true) {
private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,            }            ignoreStar = true;            token = next();            continue;
public CholeskyDecompositionImpl(final RealMatrix matrix,              final double[] lI = lTData[i];             if (lTData[i][i] < absolutePositivityThreshold) {                 throw new NotPositiveDefiniteMatrixException();             }              for (int j = i + 1; j < order; ++j) {                  final double[] lJ = lTData[j];
public static boolean containsAny(CharSequence cs, char[] searchChars) {       * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input       * @since 2.4       */     public static boolean containsAny(CharSequence cs, String searchChars) {          if (searchChars == null) {              return false;          }
public void visit(NodeTraversal t, Node n, Node parent) {     if (n.isExprResult()) {        return;      }
public boolean apply(JSType type) {       if (!type.isSubtype(                typeRegistry.getNativeType(OBJECT_TYPE))) {          reportWarning(THIS_TYPE_NON_OBJECT, type.toString());          return false;
public static boolean isNumber(String str) {                  return false;              }              if (!allowSigns                  && (chars[i] == 'd'                      || chars[i] == 'D'
private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,              return new ExtractionInfo(multilineText, token);            }           if (builder.length() > 0) {             builder.append(' ');           }            builder.append(toString(token));            line = stream.getRemainingJSDocLine();
private double calculateAsymptoticPValue(final double Umin,                                               final int n2)          throws ConvergenceException, MaxCountExceededException {         final int n1n2prod = n1 * n2;          final double EU = n1n2prod / 2.0;
public boolean isSupportLowerBoundInclusive() {            public boolean isSupportUpperBoundInclusive() {         return false;      }      /**
public Complex divide(Complex divisor)          if (divisor.isZero) {             return isZero ? NaN : INF;          }          if (divisor.isInfinite() && !isInfinite()) {
private void readTypeVariables() {              for (Type type : typeVariable.getBounds()) {                   registerTypeVariablesOn(type);               }               registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));           }
public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr          }     private String formatMethodCall() {     return invocation.getMethod().getName() + "()";     }       }
* @param lookup CharSequence[][] table of size [*][2]       */      public LookupTranslator(final CharSequence[]... lookup) {         lookupMap = new HashMap<CharSequence, CharSequence>();          int _shortest = Integer.MAX_VALUE;          int _longest = 0;          if (lookup != null) {              for (final CharSequence[] seq : lookup) {                 this.lookupMap.put(seq[0], seq[1]);                  final int sz = seq[0].length();                  if (sz < _shortest) {                      _shortest = sz;
protected static double getInvertedCoeffiecientSum(final RealVector coefficients      private Integer getBasicRow(final int col) {          Integer row = null;          for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {             if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {                 if (row == null) {                  row = i;                 } else {                  return null;                 }              }          }          return row;
public static Node block(Node ... stmts) {      return block;    }    public static Node script(Node ... stmts) {
public double solve(double min, double max)            public double solve(final UnivariateRealFunction f, double min, double max, double initial)          throws MaxIterationsExceededException, FunctionEvaluationException {         return solve(min, max);      }
protected VectorialPointValuePair doOptimize()          lmPar = 0;          boolean firstIteration = true;          while (true) {              incrementIterationsCounter();              updateJacobian();              qrDecomposition();
void add(String newcode) {        append(" ");      }      append(newcode);
public Fraction parse(String source, ParsePosition pos) {              return null;           }           int w = whole.intValue();           int n = num.intValue();
private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {                  "inline_",                  isCallInLoop)));    }    static class LabelNameSupplier implements Supplier<String> {
private static void escapeJavaStyleString(Writer out, String str, boolean escape                          out.write('\\');                          out.write('\\');                          break;                      default :                          out.write(ch);                          break;
public boolean removeRangeMarker(int index, Marker marker, Layer layer,              markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(                       index));           }           boolean removed = markers.remove(marker);           if (removed && notify) {               fireChangeEvent();
private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {    }    private FlowScope traverseNew(Node n, FlowScope scope) {      Node constructor = n.getFirstChild();     scope = traverse(constructor, scope);      JSType constructorType = constructor.getJSType();      JSType type = null;      if (constructorType != null) {
public OngoingInjecter filterCandidate(Collection<Object> mocks,       mockNameMatches.add(mock);      }     }    return next.filterCandidate(mockNameMatches, field,       fieldInstance);     /*      * In this case we have to check whether we have conflicting naming
public void setStandardDeviation(double sd) {       * convergence exception is caught and 0 or 1 is returned.       */      public double cumulativeProbability(double x) throws MathException {              return 0.5 * (1.0 + Erf.erf((x - mean) /                      (standardDeviation * Math.sqrt(2.0))));      }      /**
public String toString() {       */      @Deprecated      public void addValue(Object v) {      /**       * Adds 1 to the frequency count for v.
void add(Node n, Context context) {        case Token.HOOK: {          Preconditions.checkState(childCount == 3);          int p = NodeUtil.precedence(type);         Context rhsContext = Context.OTHER;          addExpr(first, p + 1, context);          cc.addOp("?", true);          addExpr(first.getNext(), 1, rhsContext);
public void setWeekyear(final int weekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addWeekyears(final int weekyears) {              setMillis(getChronology().weekyears().add(getMillis(), weekyears));      }
private boolean isInlinableObject(List<Reference> refs) {            continue;          }
private String format(JSError error, boolean warning) {        if (excerpt.equals(LINE)           && 0 <= charno && charno < sourceExcerpt.length()) {          for (int i = 0; i < charno; i++) {            char c = sourceExcerpt.charAt(i);            if (Character.isWhitespace(c)) {
private void fixTypeNode(Node typeNode) {          Var aliasVar = aliases.get(baseName);          if (aliasVar != null) {            Node aliasedNode = aliasVar.getInitialValue();           aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));          }        }
boolean canCollapseUnannotatedChildNames() {        }       if (type != Type.FUNCTION && aliasingGets > 0) {          return false;        }
protected UnivariatePointValuePair doOptimize() {                  previous = current;                  current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);                  if (checker != null) {                      if (checker.converged(iter, previous, current)) {                         return best(current, previous, isMinim);                      }                  }
else if (minval < this.minimumRangeValue) {                  this.minimumRangeValueRow = r;                   this.minimumRangeValueColumn = c;               }           this.rangeBounds = new Range(this.minimumRangeValue,                 this.maximumRangeValue);
public FitnessFunction() {              double[] res = new double[x.length];              for (int i = 0; i < x.length; i++) {                  double diff = boundaries[1][i] - boundaries[0][i];                 res[i] = (x[i] - boundaries[0][i]) / diff;              }              return res;          }
public OpenMapRealVector ebeDivide(RealVector v) {           * this only. Indeed, if this[i] = 0d and v[i] = 0d, then           * this[i] / v[i] = NaN, and not 0d.           */         Iterator iter = entries.iterator();         while (iter.hasNext()) {             iter.advance();             res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));          }          return res;      }
public void setCategoryKeys(Comparable[] categoryKeys) {          if (categoryKeys == null) {               throw new IllegalArgumentException("Null 'categoryKeys' argument.");           }          if (categoryKeys.length != this.startData[0].length) {               throw new IllegalArgumentException(                       "The number of categories does not match the data.");           }
public String getLine(int lineNumber) {          return null;      } else {        return js.substring(pos, js.indexOf('\n', pos));      }
public static int lcm(int a, int b) {              return 0;          }          int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));          return lcm;      }
public static String join(Object[] array, char separator, int startIndex, int en              return EMPTY;          }         StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);          for (int i = startIndex; i < endIndex; i++) {              if (i > startIndex) {
private StringBuffer appendQuotedString(String pattern, ParsePosition pos,          int start = pos.getIndex();          char[] c = pattern.toCharArray();          if (escapingOn && c[start] == QUOTE) {              return appendTo == null ? null : appendTo.append(QUOTE);          }          int lastHold = start;
public String midString(int index, int length) {       */      public boolean contains(char ch) {          char[] thisBuf = buffer;         for (int i = 0; i < thisBuf.length; i++) {              if (thisBuf[i] == ch) {                  return true;              }
public Object answer(InvocationOnMock invocation) throws Throwable {          return getMock(invocation, returnTypeGenericMetadata);       }       private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {        InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
Node processExpressionStatement(ExpressionStatement statementNode) {      @Override      Node processForInLoop(ForInLoop loopNode) {        return newNode(            Token.FOR,            transform(loopNode.getIterator()),
boolean parse() {                          }                          break;                      }                    token = eatTokensUntilEOL();                   }                    continue retry;                }              }
public void visit(NodeTraversal t, Node n, Node parent) {          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {            ensureTyped(t, n, STRING_TYPE);          }          break;
public double getSupportUpperBound() {            public boolean isSupportLowerBoundInclusive() {         return true;      }
private boolean canBeRedeclared(Node n, Scope s) {        Var var = s.getVar(lhs.getString());        return var != null            && var.getScope() == s            && !blacklistedVars.contains(var);      }    }    private void applyCollapses() {      for (Collapse collapse : collapses) {
static boolean mayBeString(Node n) {    static boolean mayBeString(Node n, boolean recurse) {      if (recurse) {       return allResultsMatch(n, MAY_BE_STRING_PREDICATE);      } else {        return mayBeStringHelper(n);      }
public static String escapeJavaScript(String str) {       * @throws IOException if error occurs on underlying Writer       **/      public static void escapeJavaScript(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, true);      }      /**
private Node tryFoldSimpleFunctionCall(Node n) {        Node value = callTarget.getNext();       if (value != null) {          Node addition = IR.add(              IR.string("").srcref(callTarget),              value.detachFromParent());
JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {      }      resolveViaProperties(t, enclosing);     if (detectImplicitPrototypeCycle()) {        handleTypeCycle(t);      }
public int hashCode() {      public String toString() {          return "FastDateFormat[" + mPattern + "]";      }            private interface Rule {                    int estimateLength();                    void appendTo(StringBuffer buffer, Calendar calendar);      }            private interface NumberRule extends Rule {          /**           * Appends the specified value to the output buffer based on the rule implementation.           *            * @param buffer the output buffer
protected VectorialPointValuePair doOptimize()                      tmpVec    = residuals;                      residuals = oldRes;                      oldRes    = tmpVec;                  }                  if (checker==null) {                   if (((Math.abs(actRed) <= costRelativeTolerance) &&
public static Map anyMap() {       * @return empty Collection.        */       public static Collection anyCollection() {          return reportMatcher(Any.ANY).returnList();       }           /**
private int goodStep(final int start, final int end) {      private boolean flipIfWarranted(final int n, final int step) {          if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {             int j = 4 * n - 1;              for (int i = 0; i < j; i += 4) {                  for (int k = 0; k < 4; k += step) {                      final double tmp = work[i + k];
private void createSynthesizedExternVar(String varName) {      getSynthesizedExternsRoot().addChildToBack(          new Node(Token.VAR, nameNode));      varsToDeclareInExterns.remove(varName);    }    /**
* @return Set the registry of objects being traversed       */      static Map<Object, Object> getRegistry() {         return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();      }      /**
public double solve(final UnivariateRealFunction f,          double yMin = f.value(min);          if (Math.abs(yMin) <= functionValueAccuracy) {             setResult(yMin, 0);              return result;          }
private Node parseBasicTypeExpression(JsDocToken token) {        }      }      return reportGenericTypeSyntaxWarning();    }
boolean canCollapseUnannotatedChildNames() {        if (isClassOrEnum) {          return true;
void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,           if (!qVar.isTypeInferred()) {
public int compare(final PointValuePair o1,          int iteration = 0;          final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();          while (true) {             if (iteration > 0) {                  boolean converged = true;                  for (int i = 0; i < simplex.getSize(); i++) {                      PointValuePair prev = previous[i];
private Node tryFoldShift(Node n, Node left, Node right) {           result = lvalInt >>> rvalInt;            break;          default:            throw new AssertionError("Unknown shift operator: " +
public final int getValue() {       * @throws NullPointerException if other is <code>null</code>       */      public int compareTo(Object other) {          return iValue - ((ValuedEnum) other).iValue;      }
private Fraction(double value, double epsilon, int maxDenominator, int maxIterat              if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {                  throw new FractionConversionException(value, p2, q2);              }
public static String join(Object[] array, String separator, int startIndex, int              return EMPTY;          }         StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());          for (int i = startIndex; i < endIndex; i++) {              if (i > startIndex) {
public static double factorialDouble(final int n) {          if (n < 0) {              throw new IllegalArgumentException("must have n >= 0 for n!");          }          return Math.floor(Math.exp(factorialLog(n)) + 0.5);      }
public static int reflectionHashCode(Object object, String[] excludeFields) {       *            The object to register.       */      static void register(Object value) {          getRegistry().add(new IDKey(value));      }
public static Set availableLocaleSet() {       * @return true if the locale is a known locale       */      public static boolean isAvailableLocale(Locale locale) {         return cAvailableLocaleSet.contains(locale);      }
private void removeUnreferencedFunctionArgs(Scope fnScope) {      Node function = fnScope.getRootNode();
private static String replaceEach(String text, String[] searchList, String[] rep          for (int i = 0; i < searchList.length; i++) {              int greater = replacementList[i].length() - searchList[i].length();              if (greater > 0) { increase += 3 * greater;
private void updateBounds(TimePeriod period, int index) {          }           if (this.maxMiddleIndex >= 0) {              long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()                   .getTime();              long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()                   .getTime();               long maxMiddle = s + (e - s) / 2;               if (middle > maxMiddle) {
else if (lclip <= 0.0) {              line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25,                                         lowVal, rectY + rectHeight * 0.75);               g2.draw(line);           CategoryItemLabelGenerator generator = getItemLabelGenerator(row,                    column);
public static LocalDateTime fromDateFields(Date date) {          if (date == null) {              throw new IllegalArgumentException("The date must not be null");          }          return new LocalDateTime(              date.getYear() + 1900,              date.getMonth() + 1,
public void add(DurationFieldType type, int amount) {          if (type == null) {              throw new IllegalArgumentException("Field must not be null");          }              setMillis(type.getField(getChronology()).add(getMillis(), amount));      }
private void reportCodeChange(String changeDescription) {    public void process(Node externs, Node root) {      new NodeTraversal(          compiler, new NormalizeStatements(compiler, assertOnChange))         .traverse(root);      if (MAKE_LOCAL_NAMES_UNIQUE) {        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();        NodeTraversal t = new NodeTraversal(compiler, renamer);
public static LocalDateTime fromCalendarFields(Calendar calendar) {          if (calendar == null) {              throw new IllegalArgumentException("The calendar must not be null");          }          int yearOfEra = calendar.get(Calendar.YEAR);          return new LocalDateTime(             yearOfEra,              calendar.get(Calendar.MONTH) + 1,              calendar.get(Calendar.DAY_OF_MONTH),              calendar.get(Calendar.HOUR_OF_DAY),
private void processRequireCall(NodeTraversal t, Node n, Node parent) {       if (provided != null) {          parent.detachFromParent();          compiler.reportCodeChange();        }
public void setMillisOfSecond(final int millisOfSecond) {       * @throws IllegalArgumentException if the value is invalid       */      public void addMillis(final int millis) {              setMillis(getChronology().millis().add(getMillis(), millis));      }
public BigDecimal getTrace() throws IllegalArgumentException {          }          final int nRows = this.getRowDimension();          final int nCols = this.getColumnDimension();         final BigDecimal[] out = new BigDecimal[v.length];          for (int row = 0; row < nRows; row++) {              BigDecimal sum = ZERO;              for (int i = 0; i < nCols; i++) {
public Vector3D intersection(final SubLine subLine, final boolean includeEndPoin          Vector3D v1D = line.intersection(subLine.line);          Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
public void validate(Answer<?> answer, Invocation invocation) {              validateDoNothing((DoesNothing) answer, invocation);           }       }       private void validateDoNothing(DoesNothing answer, Invocation invocation) {           if (!invocation.isVoid()) {
static TernaryValue getPureBooleanValue(Node n) {          return TernaryValue.FALSE;        case Token.VOID:            return TernaryValue.FALSE;        case Token.NAME:          String name = n.getString();
public void verify(VerificationData data) {              } catch (MockitoAssertionError e) {                  error = handleVerifyException(e);              }             catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {                  error = handleVerifyException(e);              }          }
public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {              return INDEX_NOT_FOUND;          }          int csLen = cs.length();          int searchLen = searchChars.length;          outer:          for (int i = 0; i < csLen; i++) {              char ch = cs.charAt(i);              for (int j = 0; j < searchLen; j++) {                  if (searchChars[j] == ch) {                          continue outer;                  }              }              return i;
public static String getShortClassName(String className) {          if (innerIdx != -1) {              out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);          }         return out;      }
private static void modify(Calendar val, int field, boolean round) {          int millisecs = val.get(Calendar.MILLISECOND);          if (!round || millisecs < 500) {              time = time - millisecs;          if (field == Calendar.SECOND) {              done = true;             }          }          int seconds = val.get(Calendar.SECOND);          if (!done && (!round || seconds < 30)) {              time = time - (seconds * 1000L);          if (field == Calendar.MINUTE) {              done = true;             }          }
public Object answer(InvocationOnMock invocation) throws Throwable {          return mock;       }       protected GenericMetadataSupport actualParameterizedType(Object mock) {
public PointVectorValuePair doOptimize() {          PointVectorValuePair current = null;         int iter = 0;          for (boolean converged = false; !converged;) {             ++iter;              PointVectorValuePair previous = current;
public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar)              String str = (obj == null ? getNullText() : obj.toString());              int strLen = str.length();              if (strLen >= width) {                 str.getChars(0, strLen, buffer, size);              } else {                  int padLen = width - strLen;                  str.getChars(0, strLen, buffer, size);
public boolean removeRangeMarker(int index, Marker marker, Layer layer,              markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(                       index));           }           boolean removed = markers.remove(marker);           if (removed && notify) {               fireChangeEvent();
*/  public class FastMath {                  public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;
*/      public Weight(double[] weight) {          final int dim = weight.length;         weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);         for (int i = 0; i < dim; i++) {             weightMatrix.setEntry(i, i, weight[i]);         }      }      /**
protected VectorialPointValuePair doOptimize()                  updateResidualsAndCost();                  double actRed = -1.0;
public static boolean containsIgnoreCase(String str, String searchStr) {          if (str == null || searchStr == null) {              return false;          }         return contains(str.toUpperCase(), searchStr.toUpperCase());      }
protected VectorialPointValuePair doOptimize()                  }                      if (((Math.abs(actRed) <= costRelativeTolerance) &&                           (preRed <= costRelativeTolerance) &&                           (ratio <= 2.0)) ||                          (delta <= parRelativeTolerance * xNorm)) {                         return new VectorialPointValuePair(point, objective);                      }
public int compare(EventState es0, EventState es1) {                  if (isLastStep) {                      System.arraycopy(eventY, 0, y, 0, y.length);                      return eventT;                  }
private void replaceAssignmentExpression(Var v, Reference ref,          }          cur.addChildToFront(nodes.get(i));          cur.addChildToFront(nodes.get(i + 1));        Node replace = ref.getParent();        replacement.copyInformationFromForTree(replace);
private double localMin(boolean isMinim,                      }                  } } else {                 setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);                  return x;              }             ++count;          }         throw new MaxIterationsExceededException(maximalIterationCount);      }  }
private static String escapeJavaStyleString(String str, boolean escapeSingleQuot       * @param escapeForwardSlash TODO       * @throws IOException if an IOException occurs       */     private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {          if (out == null) {              throw new IllegalArgumentException("The Writer must not be null");          }
protected RealPointValuePair getSolution() {          Integer basicRow =              getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());          double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());          for (int i = 0; i < coefficients.length; i++) {              basicRow = getBasicRow(getNumObjectiveFunctions() + i);                  coefficients[i] =                      (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -                      (restrictToNonNegative ? 0 : mostNegative);             if (basicRow != null) {                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {                     if (tableau.getEntry(basicRow, j) == 1) {                          coefficients[i] = 0;                     }                 }              }          }          return new RealPointValuePair(coefficients, f.getValue(coefficients));
public int estimateParsedLength() {          public int parseInto(DateTimeParserBucket bucket, String text, int position) {              String str = text.substring(position);              for (String id : ALL_IDS) {                  if (str.startsWith(id)) {                     bucket.setZone(DateTimeZone.forID(id));                     return position + id.length();                  }              }              return ~position;          }      }
public double getUpperBound() {      public Paint getPaint(double value) {           double v = Math.max(value, this.lowerBound);           v = Math.min(v, this.upperBound);          int g = (int) ((value - this.lowerBound) / (this.upperBound                    - this.lowerBound) * 255.0);           return new Color(g, g, g);       }
public static boolean isNumber(String str) {              if (chars[i] == 'l'                  || chars[i] == 'L') {                 return foundDigit && !hasExp;              }              return false;
public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgume       * @return a new instance, with reversed direction       */      public Line revert() {         final Line reverted = new Line(zero, zero.subtract(direction));          return reverted;      }
public void setYear(final int year) {       * @throws IllegalArgumentException if the value is invalid       */      public void addYears(final int years) {              setMillis(getChronology().years().add(getMillis(), years));      }
public Object handle(Invocation invocation) throws Throwable {          if (verificationMode != null) {                   VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);                               verificationMode.verify(data);                   return null;           }           invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
public static double anyDouble() {       * @return <code>0</code>.        */       public static short anyShort() {          return reportMatcher(Any.ANY).returnZero();       }       /**
private void init() {              currentFormatField= nextFormatField;              currentStrategy= nextStrategy;          }          if(currentStrategy.addRegex(this, regex)) {              collector.add(currentStrategy);          }
public StringEscapeUtils() {       * @return String with escaped values, <code>null</code> if null string input       */      public static String escapeJava(String str) {         return escapeJavaStyleString(str, false);      }      /**
private Integer getPivotRow(SimplexTableau tableau, final int col) {                      }                  }                  return minRow;          }          return minRatioPositions.get(0);      }
private void parseOptimizationData(OptimizationData... optData) {       * @return the square-root of the weight matrix.       */      private RealMatrix squareRoot(RealMatrix m) {              final EigenDecomposition dec = new EigenDecomposition(m);              return dec.getSquareRoot();      }  }
static boolean isBooleanResultHelper(Node n) {        case Token.NOT:          return true;        default:          return false;
public int compare(EventState es0, EventState es1) {                      System.arraycopy(eventY, 0, y, 0, y.length);                      computeDerivatives(eventT, y, yDot);                      resetOccurred = true;                      return eventT;                  }
private static String toCanonicalName(String className) {          }          Class<?>[] classes = new Class[array.length];          for (int i = 0; i < array.length; i++) {             classes[i] = array[i].getClass();          }          return classes;      }
public static double binomialCoefficientLog(final int n, final int k) {           * For values small enough to do exact integer computation,           * return the log of the exact value            */                    /*           * Sum logs for values that could overflow
private void identifyNameNode(    private JSType getNativeType(JSTypeNative nativeType) {      return typeRegistry.getNativeType(nativeType);    }    private abstract class AbstractScopeBuilder        implements NodeTraversal.Callback {            final Scope scope;      private final List<DeferredSetType> deferredSetTypes =          Lists.newArrayList();            private final List<Node> nonExternFunctions = Lists.newArrayList();                  private final List<StubDeclaration> stubDeclarations =          Lists.newArrayList();            private String sourceName = null;            private InputId inputId;
private boolean isVariableStillLiveWithinExpression(     */    private VariableLiveness isVariableReadBeforeKill(        Node n, String variable) {      if (NodeUtil.isName(n) && variable.equals(n.getString())) {        if (NodeUtil.isLhs(n, n.getParent())) {
public void integrate(final ExpandableStatefulODE equations, final double t)          }          stepSize = hNew;          for (int k = 1; k < stages; ++k) {
public static Node labelName(String name) {    }    public static Node tryFinally(Node tryBody, Node finallyBody) {     Preconditions.checkState(tryBody.isLabelName());     Preconditions.checkState(finallyBody.isLabelName());      Node catchBody = block().copyInformationFrom(tryBody);      return new Node(Token.TRY, tryBody, catchBody, finallyBody);    }
public static Number createNumber(String str) throws NumberFormatException {              return null;          }         if (str.startsWith("0x") || str.startsWith("-0x")) {              return createInteger(str);          }             char lastChar = str.charAt(str.length() - 1);
protected PointValuePair doOptimize() {              final PointValuePair current = new PointValuePair(x, fVal); if (!stop) {                  if (checker != null) {                     stop = checker.converged(iter, previous, current);                  }              }              if (stop) {
private static final double TWO_POWER_52 = 4503599627370496.0;                  private static final double F_1_3 = 1d / 3d;
public String toString() {       * @return chromosome iterator       */      public Iterator<Chromosome> iterator() {         return chromosomes.iterator();      }  }
private void annotateCalls(Node n) {        Node first = n.getFirstChild();        if (!NodeUtil.isGet(first)) {          n.putBooleanProp(Node.FREE_CALL, true);
public boolean evaluateStep(final StepInterpolator interpolator)                  if (g0Positive ^ (gb >= 0)) {
private Node parseTypeExpression(JsDocToken token) {     * For expressions on the right hand side of a this: or new:     */    private Node parseContextTypeExpression(JsDocToken token) {           return parseTypeName(token);    }    /**
public StandardToolTipTagFragmentGenerator() {       * @return The formatted HTML area tag attribute(s).        */       public String generateToolTipFragment(String toolTipText) {          return " title=\"" + toolTipText               + "\" alt=\"\"";       }
protected CompilerOptions createOptions() {        options.messageBundle = new EmptyMessageBundle();      }      return options;
public static short anyShort() {       * @return <code>null</code>.        */       public static <T> T anyObject() {          return (T) reportMatcher(Any.ANY).returnNull();       }       /**
protected VectorialPointValuePair doOptimize()          double[] diag    = new double[cols];          double[] oldX    = new double[cols];          double[] oldRes  = new double[rows];          double[] work1   = new double[cols];          double[] work2   = new double[cols];          double[] work3   = new double[cols];
private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();      Node cArg = callNode.getFirstChild().getNext();
public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {      Vector3D u2Prime = u1.crossProduct(u3);      c = k.dotProduct(u2Prime);     if (c == 0) {        k = v2Su2.crossProduct(v3Su3);;        c = k.dotProduct(u2.crossProduct(u3));;       if (c == 0) {          q0 = 1.0;
private void init() {                  rule = new TextField(Calendar.ERA, ERAs);                  break; case 'y':                 if (tokenLen >= 4) {                     rule = selectNumberRule(Calendar.YEAR, tokenLen);                 } else {                      rule = TwoDigitYearField.INSTANCE;                  }                  break; case 'M':
public static String anyString() {       * @return empty List.        */       public static List anyList() {          return reportMatcher(Any.ANY).returnList();       }           /**
public static long max(final long a, final long b) {       * @return b if a is lesser or equal to b, a otherwise       */      public static float max(final float a, final float b) {         return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);      }      /** Compute the maximum of two values
private static class Definition {      final Node node;      final Set<Var> depends = Sets.newHashSet();      Definition(Node node) {        this.node = node;
* Construct a solver.       */      public BrentOptimizer() {         setMaxEvaluations(Integer.MAX_VALUE);          setMaximalIterationCount(100);         setAbsoluteAccuracy(1E-10);         setRelativeAccuracy(1.0e-14);      }      /**
boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,        JSType leftType, Node owner, String propName) {      if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {       if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {         registerMismatch(rightType, leftType, null);       } else {
public Range getDataRange(ValueAxis axis) {                      }                   }                       Collection c = r.getAnnotations();                       Iterator i = c.iterator();                       while (i.hasNext()) {
public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {    Vector3D k     = v1Su1.crossProduct(v2Su2);    Vector3D u3    = u1.crossProduct(u2);    double c       = k.dotProduct(u3);   if (c == 0) {      Vector3D v3 = Vector3D.crossProduct(v1, v2);
protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {          this.checker = checker;          evaluations = new Incrementor(0, new MaxEvalCallback());         iterations = new Incrementor(0, new MaxIterCallback());      }      /**
public long computeMillis(boolean resetFields, String text) {              for (int i = 0; i < count; i++) {                  millis = savedFields[i].set(millis, resetFields);              }          } catch (IllegalFieldValueException e) {              if (text != null) {                  e.prependMessage("Cannot parse \"" + text + '"');
public Class getGenericType(Field field) {          Type generic = field.getGenericType();           if (generic != null && generic instanceof ParameterizedType) {               Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];                   return (Class) actual;           }           return Object.class;
private Integer getBasicRowForSolution(final int col) {       */      private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {          Integer row = null;         int start = getNumObjectiveFunctions();          for (int i = start; i < getHeight(); i++) {              if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {                  row = i;
public static Locale toLocale(final String str) {          if (str == null) {              return null;          }          final int len = str.length();          if (len < 2) {              throw new IllegalArgumentException("Invalid locale format: " + str);
protected void drawVerticalItem(Graphics2D g2,          Number meanValue = dataset.getMeanValue(row, column);           double value = meanValue.doubleValue();           double base = 0.0;
public boolean equals(final Object other) {      @Override      public float floatValue() {          float result = numerator.floatValue() / denominator.floatValue();          return result;      }
public static Number createNumber(String str) throws NumberFormatException {          if (StringUtils.isBlank(str)) {              throw new NumberFormatException("A blank string is not a valid number");          }           if (str.startsWith("--")) {             return null;         }          if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) { int hexDigits = str.length() - 2; if (str.startsWith("-")) {
public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,          for (int i = 0; i < starts; ++i) {              try {                 final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);                 final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);                 optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));              } catch (FunctionEvaluationException fee) {                  optima[i] = null;              } catch (ConvergenceException ce) {
public static Map anyMap() {       * @return empty Map.        */       public static <K, V>  Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {          return reportMatcher(Any.ANY).returnMap();       }       /**
public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy e          while (resultSet.size() < k) {             int sum = 0;              for (int i = 0; i < pointSet.size(); i++) {                  final T p = pointSet.get(i);                  final Cluster<T> nearest = getNearestCluster(resultSet, p);
public static short eq(short value) {       * @return <code>null</code>.        */       public static <T> T eq(T value) {          return reportMatcher(new Equals(value)).<T>returnNull();       }         /**
*/  public class LookupTranslator extends CharSequenceTranslator {     private final HashMap<CharSequence, CharSequence> lookupMap;      private final int shortest;      private final int longest;
Object returnValueFor(Class<?> type) {              return Primitives.defaultValueForPrimitiveOrWrapper(type);          } else if (type == Collection.class) {              return new LinkedList<Object>();          } else if (type == Set.class) {
public double value(double x, double[] p) {       */      public double[] fit() {          final double[] guess = (new ParameterGuesser(getObservations())).guess();         return fit(new Gaussian.Parametric(), guess);      }      /**
Node processFunctionNode(FunctionNode functionNode) {        node.addChildToBack(lp);        Node bodyNode = transform(functionNode.getBody());        parseDirectives(bodyNode);        node.addChildToBack(bodyNode);       return node;
public void setMonthOfYear(final int monthOfYear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addMonths(final int months) {              setMillis(getChronology().months().add(getMillis(), months));      }
public static String toModuleName(String requiredFilename,    private String normalizeSourceName(String filename) {      if (filename.indexOf(filenamePrefix) == 0) {        filename = filename.substring(filenamePrefix.length());
public LevenbergMarquardtOptimizer() {          setMaxIterations(1000);          setInitialStepBoundFactor(100.0);          setCostRelativeTolerance(1.0e-10);          setParRelativeTolerance(1.0e-10);
public RectangularCholeskyDecomposition(RealMatrix matrix, double small)                  final double sqrt = FastMath.sqrt(c[ir][ir]);                  b[r][r] = sqrt;                  final double inverse  = 1 / sqrt;                  for (int i = r + 1; i < order; ++i) {                      final int ii = index[i];                      final double e = inverse * c[ii][ir];                      b[i][r] = e;                     c[ii][ii] -= e * e;                      for (int j = r + 1; j < i; ++j) {                          final int ij = index[j];                          final double f = c[ii][ij] - e * b[j][r];
private CanInlineResult canInlineReferenceDirectly(        if (fnParam != null) {          if (cArg != null) {
public Object getObject(Comparable rowKey, Comparable columnKey) {              throw new UnknownKeyException("Column key (" + columnKey                        + ") not recognised.");           }          if (row >= 0) {           KeyedObjects rowData = (KeyedObjects) this.rows.get(row);              return rowData.getObject(columnKey);           }           else {               return null;
private void checkInterfaceConflictProperties(NodeTraversal t, Node n,        ObjectType interfaceType) {      ObjectType implicitProto = interfaceType.getImplicitPrototype();      Set<String> currentPropertyNames;        currentPropertyNames = implicitProto.getOwnPropertyNames();      for (String name : currentPropertyNames) {        ObjectType oType = properties.get(name);        if (oType != null) {
public Complex reciprocal() {          }          if (real == 0.0 && imaginary == 0.0) {             return NaN;          }          if (isInfinite) {
protected PointValuePair doOptimize() {          }          PointValuePair current = null;         int iter = 0;          int maxEval = getMaxEvaluations();          while (true) {             ++iter;              final double objective = computeObjectiveValue(point);              PointValuePair previous = current;              current = new PointValuePair(point, objective);              if (previous != null) {                 if (checker.converged(iter, previous, current)) {                      return current;                  }
public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {              DurationField loopUnitField = loopType.getDurationType().getField(iChronology);              if (i > 0) {                  int compare = lastUnitField.compareTo(loopUnitField);                 if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {                      throw new IllegalArgumentException("Types array must be in order largest-smallest: " +                              types[i - 1].getName() + " < " + loopType.getName());                  } else if (compare == 0) {
public int calculatePrintedLength(ReadablePeriod period, Locale locale) {              if (iFieldType >= SECONDS_MILLIS) {                 sum = Math.max(sum, 4);                  sum++;                  if (iFieldType == SECONDS_OPTIONAL_MILLIS &&
public void setDayOfWeek(final int dayOfWeek) {       * @throws IllegalArgumentException if the value is invalid       */      public void addDays(final int days) {              setMillis(getChronology().days().add(getMillis(), days));      }
static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Local      private static class TimeZoneNameRule implements Rule {          private final Locale mLocale;          private final int mStyle;         private final TimeZone zone;          private final String mStandard;          private final String mDaylight;
private void findAliases(NodeTraversal t) {
private void computeGershgorinCircles() {          lowerSpectra = Math.min(lowerSpectra, lower);          final double upper = dCurrent + eCurrent;          work[upperStart + m - 1] = upper;          minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);      }
public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {      }      if (parent != null && parent.getType() == Token.ASSIGN) {
public Partial with(DateTimeFieldType fieldType, int value) {                          if (compare > 0) {                              break;                          } else if (compare == 0) {                              DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);                              DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);                              if (rangeField.compareTo(loopRangeField) > 0) {
public static double distance(double[] p1, double[] p2) {       * @return the L<sub>2</sub> distance between the two points       */      public static double distance(int[] p1, int[] p2) {       int sum = 0;        for (int i = 0; i < p1.length; i++) {           final int dp = p1[i] - p2[i];            sum += dp * dp;        }        return Math.sqrt(sum);
boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,    boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,        JSType leftType, String msg) {      if (!rightType.canAssignTo(leftType)) {       if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {         registerMismatch(rightType, leftType, null);       } else {        mismatch(t, n, msg, rightType, leftType);       }        return false;      }      return true;
public static Set anySet() {       * @return empty Map.        */       public static Map anyMap() {          return reportMatcher(Any.ANY).returnMap();       }       /**
private void traverseFunction(Node n, Node parent) {      Preconditions.checkState(body.getNext() == null &&             body.isBlock());      traverseBranch(body, n);      popScope();
private void findAliases(NodeTraversal t) {          Node n = v.getNode();          Node parent = n.getParent();          boolean isVar = parent.isVar();          if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {            recordAlias(v);          } else if (v.isBleedingFunction()) {
public Complex parse(String source, ParsePosition pos) {          int n = getImaginaryCharacter().length();          startIndex = pos.getIndex();          int endIndex = startIndex + n;         if (              source.substring(startIndex, endIndex).compareTo(              getImaginaryCharacter()) != 0) {
public double getSlope() {       * @return sum of squared errors associated with the regression model       */      public double getSumSquaredErrors() {         return sumYY - sumXY * sumXY / sumXX;      }      /**
public double evaluate(final double[] values, final double[] weights,                  }                  double sumWts = 0;                 for (int i = 0; i < weights.length; i++) {                      sumWts += weights[i];                  }
public Node parseHelperCode(Reducer reducer) {    }    private static boolean isReduceableFunctionExpression(Node n) {     return NodeUtil.isFunctionExpression(n);    }    /**
public Date parse(String source, ParsePosition pos) {       * @return The <code>StringBuilder</code>       */      private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {         boolean wasWhite= false;          for(int i= 0; i<value.length(); ++i) {              char c= value.charAt(i);             if(Character.isWhitespace(c)) {                 if(!wasWhite) {                     wasWhite= true;                     regex.append("\\s*+");                 }                 continue;             }             wasWhite= false;              switch(c) {              case '\'':                  if(unquote) {
public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar)          if (width > 0) {              ensureCapacity(size + width);              String str = (obj == null ? getNullText() : obj.toString());              int strLen = str.length();              if (strLen >= width) {                  str.getChars(0, width, buffer, size);
public static Number createNumber(String val) throws NumberFormatException {          if (val.length() == 0) {              throw new NumberFormatException("\"\" is not a valid number.");          }          if (val.startsWith("--")) {
public long add(long instant, long months) {          if (valueToAdd == 0) {              return values;          }          if (DateTimeUtils.isContiguous(partial)) {              long instant = 0L;              for (int i = 0, isize = partial.size(); i < isize; i++) {
public MockUtil() {          Class<?>[] interfaces = settings.getExtraInterfaces();           Class<?>[] ancillaryTypes;               ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;           Object spiedInstance = settings.getSpiedInstance();
public MultiDirectional(final double khi, final double gamma) {      protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)          throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {          while (true) {              incrementIterationsCounter();
FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,      }      if (templateTypeName != null && !foundTemplateType) {        reportError(TEMPLATE_TYPE_EXPECTED, fnName);
public static boolean equals(double[] x, double[] y) {       * @throws IllegalArgumentException if n < 0       */      public static long factorial(final int n) {         long result = Math.round(factorialDouble(n));         if (result == Long.MAX_VALUE) {              throw new ArithmeticException(                      "factorial value is too large to fit in a long");          }
public PointVectorValuePair doOptimize() {              if (previous != null) {                 converged = checker.converged(iter, previous, current);                  if (converged) {                      setCost(computeCost(currentResiduals));                      return current;
void addNumber(double x) {        add(" ");      }     if ((long) x == x) {        long value = (long) x;        long mantissa = value;        int exp = 0;
public static int indexOfAny(CharSequence cs, char[] searchChars) {              return INDEX_NOT_FOUND;          }          int csLen = cs.length();          int searchLen = searchChars.length;          for (int i = 0; i < csLen; i++) {              char ch = cs.charAt(i);              for (int j = 0; j < searchLen; j++) {                  if (searchChars[j] == ch) {                          return i;                  }              }          }
* @return <code>false</code>.        */       public static boolean anyBoolean() {          return reportMatcher(Any.ANY).returnFalse();       }       /**
private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {      Node greatGramps = gramps.getParent();      Node greatGreatGramps = greatGramps.getParent();      Node nameNode = NodeUtil.newName(
public void removeColumn(int columnIndex) {      public void removeColumn(Comparable columnKey) {           Iterator iterator = this.rows.iterator();           while (iterator.hasNext()) {               DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();                   rowData.removeValue(columnKey);           }           this.columnKeys.remove(columnKey);       }
else if (edge == RectangleEdge.RIGHT) {          }           if (plotState != null && hotspot != null) {               ChartRenderingInfo owner = plotState.getOwner();                   EntityCollection entities = owner.getEntityCollection();                   if (entities != null) {                       entities.add(new AxisLabelEntity(this, hotspot,                                this.labelToolTip, this.labelURL));                   }           }           return state;
public void addValue(Object v) {       * @param v the value to add.       * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries       */          Object obj = v;          if (v instanceof Integer) {             obj = Long.valueOf(((Integer) v).longValue());
public int getOffsetFromLocal(long instantLocal) {                      return offsetLocal;                  }              }         } else if (offsetLocal > 0) {              long prev = previousTransition(instantAdjusted);              if (prev < instantAdjusted) {                  int offsetPrev = getOffset(prev);
public ByteBuddyMockMaker() {                  settings.getTypeToMock(),                  settings.getExtraInterfaces()          );          T mockInstance = null;          try {             mockInstance = classInstantiator.instantiate(mockedProxyType);              MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;              mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
public static double cosh(double x) {        if (x > 20) {                return 0.5 * exp(x);            }       if (x < -20) {                return 0.5 * exp(-x);        }        final double hiPrec[] = new double[2];
else if (lclip <= 0.0) {          }              double valueDelta = dataset.getStdDevValue(row, column).doubleValue();               double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue()                        + valueDelta, dataArea, yAxisLocation);               double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
public static Collection anyCollection() {       * @return empty Collection.        */       public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {          return (Collection) reportMatcher(Any.ANY).returnList();       }           /**
public static Set anySet() {       * @return empty Set        */       public static <T> Set<T> anySetOf(Class<T> clazz) {          return (Set) reportMatcher(Any.ANY).returnSet();       }       /**
protected VectorialPointValuePair doOptimize()                         (delta <= parRelativeTolerance * xNorm)) {                         return current;                     }                 } else {                     if (checker.converged(getIterations(), previous, current)) {                         return current;                     }                  }
public static long anyLong() {       * @return <code>0</code>.        */       public static float anyFloat() {          return reportMatcher(Any.ANY).returnZero();       }       /**
public StringBuffer format(Date date, StringBuffer buf) {       */      public StringBuffer format(Calendar calendar, StringBuffer buf) {          if (mTimeZoneForced) {              calendar = (Calendar) calendar.clone();              calendar.setTimeZone(mTimeZone);          }
public static void escapeJava(Writer out, String str) throws IOException {       * @return String with escaped values, <code>null</code> if null string input       */      public static String escapeJavaScript(String str) {         return escapeJavaStyleString(str, true);      }      /**
public static Range iterateRangeBounds(XYDataset dataset,              for (int series = 0; series < seriesCount; series++) {                   int itemCount = dataset.getItemCount(series);                   for (int item = 0; item < itemCount; item++) {                       double lvalue = ixyd.getStartYValue(series, item);                       double uvalue = ixyd.getEndYValue(series, item);                       if (!Double.isNaN(lvalue)) {                           minimum = Math.min(minimum, lvalue);                       }                       if (!Double.isNaN(uvalue)) {                           maximum = Math.max(maximum, uvalue);                       }                   }
void defineSlot(Node n, Node parent, JSType type, boolean inferred) {        Scope scopeToDeclareIn = scope;        if (scopeToDeclareIn.isDeclared(variableName, false)) {
public ByteBuddyMockMaker() {                      "  class to mock : " + describeClass(mockedProxyType),                      "  created class : " + describeClass(settings.getTypeToMock()),                      "  proxy instance class : " + describeClass(mockInstance),                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),                      "",                      "You might experience classloading issues, please ask the mockito mailing-list.",                      ""
public void enterScope(NodeTraversal t) {        renamer = nameStack.peek().forChildScope();      }     if (declarationRoot.getType() == Token.FUNCTION) {       for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {         String name = c.getString();         renamer.addDeclaredName(name);       }       Node functionBody = declarationRoot.getLastChild();       findDeclaredNames(functionBody, null, renamer);     }  else       if (declarationRoot.getType() != Token.FUNCTION) {        findDeclaredNames(declarationRoot, null, renamer);
public void setPrototypeBasedOn(ObjectType baseType) {      if (baseType.hasReferenceName() ||         baseType.isUnknownType() ||          isNativeObjectType() ||          baseType.isFunctionPrototypeType() ||          !(baseType instanceof PrototypeObjectType)) {
private JSType getDeclaredType(String sourceName, JSDocInfo info,            if (info.isConstant()) {              JSType knownType = null;              if (rValue != null) {               if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {                  return rValue.getJSType();
public int translate(final CharSequence input, final int index, final Writer out          for (int i = max; i >= shortest; i--) {              final CharSequence subSeq = input.subSequence(index, index + i);             final CharSequence result = lookupMap.get(subSeq);              if (result != null) {                  out.write(result.toString());                  return i;
public static int indexOfAny(CharSequence cs, String searchChars) {       * <code>false</code> if no match or null input       * @since 2.4       */     public static boolean containsAny(CharSequence cs, char[] searchChars) {          if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {              return false;          }
public double integrate(final FirstOrderDifferentialEquations equations,                  loop     = false;              } else {
private static final long serialVersionUID = 9057165148930624087L;       public Object answer(InvocationOnMock invocation) throws Throwable {          return invocation.callRealMethod();       }   } \ No newline at end of file
private void reportCodeChange(String changeDescription) {    @Override    public void process(Node externs, Node root) {      NodeTraversal.traverse(compiler, root, this);      if (MAKE_LOCAL_NAMES_UNIQUE) {        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();        NodeTraversal t = new NodeTraversal(compiler, renamer);        t.traverseRoots(externs, root);      }     removeDuplicateDeclarations(root);      new PropogateConstantAnnotations(compiler, assertOnChange)          .process(externs, root);    }
* </ul>   */  public class FinalMockCandidateFilter implements MockCandidateFilter {     public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {          if(mocks.size() == 1) {              final Object matchingMock = mocks.iterator().next();
protected PointVectorValuePair doOptimize() {          lmPar = 0;          boolean firstIteration = true;         int iter = 0;          final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();          while (true) {             ++iter;              final PointVectorValuePair previous = current;
private CanInlineResult canInlineReferenceDirectly(        if (fnParam != null) {          if (cArg != null) {           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {             return CanInlineResult.NO;           }
public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {          return 0;      }
public FitnessFunction() {              double[] res = new double[x.length];              for (int i = 0; i < x.length; i++) {                  double diff = boundaries[1][i] - boundaries[0][i];                 res[i] = diff * x[i] + boundaries[0][i];              }              return res;          }
private void interpretAssigns() {              assignedToUnknownValue = true;            }            for (Assign assign : assignsByVar.get(var)) {              if (assign.isPropertyAssign) {                hasPropertyAssign = true;
protected void setUp() {       * @return the square-root of the weight matrix.       */      private RealMatrix squareRoot(RealMatrix m) {              final EigenDecomposition dec = new EigenDecomposition(m);              return dec.getSquareRoot();      }  }
public MockUtil() {      public <T> void resetMock(T mock) {           MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);          MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);          MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));           ((Factory) mock).setCallback(0, newFilter);       }
public double evaluate(double x, double epsilon, int maxIterations) {                  break;              }             dPrev = q1;             cPrev = cN / q2;             p0 = hPrev;             hPrev = cN;             q1 = q2;              n++;          }
public NameBasedCandidateFilter(MockCandidateFilter next) {   }   public OngoingInjecter filterCandidate(Collection<Object> mocks,    Field field, Object fieldInstance) {    List<Object> mockNameMatches = new ArrayList<Object>();    if (mocks.size() > 1) {     for (Object mock : mocks) {
public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {              if (iFieldType >= SECONDS_MILLIS) {                  int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);                  if (iFieldType == SECONDS_MILLIS || dp > 0) {                      buf.append('.');                      FormatUtils.appendPaddedInteger(buf, dp, 3);                  }
public static Locale toLocale(String str) {                  throw new IllegalArgumentException("Invalid locale format: " + str);              }              char ch3 = str.charAt(3);              char ch4 = str.charAt(4);              if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {                  throw new IllegalArgumentException("Invalid locale format: " + str);
protected VectorialPointValuePair doOptimize()              }              if (maxCosine <= orthoTolerance) {                  return current;              }
private static synchronized String getConvertedId(String id) {              map.put("PNT", "America/Phoenix");              map.put("CST", "America/Chicago"); map.put("EST", "America/New_York");             map.put("IET", "America/Indianapolis");              map.put("PRT", "America/Puerto_Rico");              map.put("CNT", "America/St_Johns");             map.put("AGT", "America/Buenos_Aires");              map.put("BET", "America/Sao_Paulo");             map.put("WET", "Europe/London");             map.put("ECT", "Europe/Paris");              map.put("ART", "Africa/Cairo");              map.put("CAT", "Africa/Harare");             map.put("EET", "Europe/Bucharest");              map.put("EAT", "Africa/Addis_Ababa");             map.put("MET", "Asia/Tehran");              map.put("NET", "Asia/Yerevan");              map.put("PLT", "Asia/Karachi");             map.put("IST", "Asia/Calcutta");              map.put("BST", "Asia/Dhaka");             map.put("VST", "Asia/Saigon");              map.put("CTT", "Asia/Shanghai");              map.put("JST", "Asia/Tokyo");              map.put("ACT", "Australia/Darwin");
static boolean functionCallHasSideEffects(        }        if (compiler != null && !compiler.hasRegExpGlobalReferences()) {          if (nameNode.getFirstChild().getType() == Token.REGEXP
public void exitScope(NodeTraversal t) {}    @Override    public void process(Node externs, Node root) {     (new NodeTraversal(compiler, this)).traverse(root);    }    @Override
public long roundCeiling(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundCeiling(localInstant);                 return iZone.convertLocalToUTC(localInstant, false);              }          }
public static String random(int count, int start, int end, boolean letters, bool                      start = ' ';                                  }              }          }          char[] buffer = new char[count];
protected PointValuePair doOptimize() {          double[] x = guess;          double fVal = computeObjectiveValue(x);          double[] x1 = x.clone();         int iter = 0;          while (true) {             ++iter;              double fX = fVal;              double fX2 = 0;
public static short anyShort() {       * @return empty String ("")        */       public static String anyString() {          return reportMatcher(Any.ANY).returnString();       }       /**
public boolean apply(Node n) {            return true;          }          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
public Complex tan() {       * @since 1.2       */      public Complex tanh() {         if (isNaN) {              return NaN;          }          double real2 = 2.0 * real;          double imaginary2 = 2.0 * imaginary;          double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);
public static boolean containsAny(CharSequence cs, char[] searchChars) {    }    int csLength = cs.length();    int searchLength = searchChars.length;    for (int i = 0; i < csLength; i++) {     char ch = cs.charAt(i);     for (int j = 0; j < searchLength; j++) {      if (searchChars[j] == ch) {        return true;      }     }    }
public void process(Class<?> context, Object testClass) {                          Mockito.reset(instance);                       } else {                          field.set(testClass, Mockito.spy(instance));                       }                   } catch (IllegalAccessException e) {                       throw new MockitoException("Problems initiating spied field " + field.getName(), e);
protected void drawHorizontalItem(Graphics2D g2,          Number meanValue = dataset.getMeanValue(row, column);           double value = meanValue.doubleValue();           double base = 0.0;
*/      public OpenMapRealMatrix(int rowDimension, int columnDimension) {          super(rowDimension, columnDimension);          this.rows = rowDimension;          this.columns = columnDimension;          this.entries = new OpenIntToDoubleHashMap(0.0);
public static boolean equals(CharSequence cs1, CharSequence cs2) {          if (cs1 == null || cs2 == null) {              return false;          }              return cs1.equals(cs2);      }      /**
protected UnivariatePointValuePair doOptimize() {                      }                  } } else {                 return current;              }              ++iter;          }
private Node getDefCfgNode() {        return defMetadata.node;      }     private boolean canInline() {        if (getDefCfgNode().isFunction()) {          return false;
else if (lclip <= 0.0) {              line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,                                        rectX + rectWidth / 2.0d + 5.0d, lowVal);               g2.draw(line);           CategoryItemLabelGenerator generator = getItemLabelGenerator(row,                    column);
public String toString() {       */      @Deprecated      public void addValue(Object v) {              addValue((Comparable<?>) v);                  }      /**
public static String getPackageName(Class<?> cls) {       * @return the package name or an empty string       */      public static String getPackageName(String className) {         if (className == null) {              return StringUtils.EMPTY;          }          int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);          if (i == -1) {
private static final long serialVersionUID = -6587513359895466954L;           private static final double DEFAULT_EPSILON = 10e-9;            private static double[] lanczos =
public void initOptions(CompilerOptions options) {            CheckLevel.OFF);      }     if (options.checkGlobalThisLevel.isOn()) {        options.setWarningLevel(            DiagnosticGroups.GLOBAL_THIS,            options.checkGlobalThisLevel);
public void setDomainAxes(CategoryAxis[] axes) {       * @since 1.0.3        */       public int getDomainAxisIndex(CategoryAxis axis) {           return this.domainAxes.indexOf(axis);       }
static boolean isSimpleNumber(String s) {          return false;        }      }     return len > 0;    }    static double getSimpleNumber(String s) {
static String trimJsWhiteSpace(String s) {    static TernaryValue isStrWhiteSpaceChar(int c) {      switch (c) { case '\u000B':         return TernaryValue.TRUE; case ' ': case '\n': case '\r':
public OpenMapRealVector ebeDivide(double[] v) {      public OpenMapRealVector ebeMultiply(RealVector v) {          checkVectorDimensions(v.getDimension());          OpenMapRealVector res = new OpenMapRealVector(this);         Iterator iter = res.entries.iterator();          while (iter.hasNext()) {              iter.advance();              res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));
public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);    }
protected VectorialPointValuePair doOptimize()                          xNorm    += xK * xK;                      }                      xNorm = Math.sqrt(xNorm);                  } else {                      cost = previousCost;
public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {        } else {            if (lhs.getType() == Token.GETPROP &&                lhs.getLastChild().getString().equals("prototype")) {              return false;            }           if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {              return false;            }        }      }
private void processGeneralBlock(final int n)                      diagMax    = work[4 * i0];                      offDiagMin = work[4 * i0 + 2];                      double previousEMin = work[4 * i0 + 3];                     for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {                         if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&                              (work[i + 2] <= TOLERANCE_2 * sigma)) {                              work[i + 2]  = -sigma;
public static Range iterateDomainBounds(XYDataset dataset,              for (int series = 0; series < seriesCount; series++) {                   int itemCount = dataset.getItemCount(series);                   for (int item = 0; item < itemCount; item++) {                       lvalue = intervalXYData.getStartXValue(series, item);                       uvalue = intervalXYData.getEndXValue(series, item);                       if (!Double.isNaN(lvalue)) {                           minimum = Math.min(minimum, lvalue);                       }                       if (!Double.isNaN(uvalue)) {                           maximum = Math.max(maximum, uvalue);                       }                   }
public ConstructorInstantiator(Object outerClassInstance) {          if (outerClassInstance == null) {              return noArgConstructor(cls);          }         return withOuterClass(cls);      }     private <T> T withOuterClass(Class<T> cls) {          try {             Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());             return c.newInstance(outerClassInstance);          } catch (Exception e) {              throw paramsException(cls, e);          }      }      private static <T> InstantationException paramsException(Class<T> cls, Exception e) {
public boolean isAbstract() {       */      @Override      public boolean equals(Object o) {              return method.equals(o);      }      @Override      public int hashCode() {         return 1;      }  } \ No newline at end of file
public static synchronized FastDateFormat getDateInstance(int style, TimeZone ti              key = new Pair(key, timeZone);          }         if (locale != null) {             key = new Pair(key, locale);          }          FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);          if (format == null) {             if (locale == null) {                 locale = Locale.getDefault();             }              try {                  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);                  String pattern = formatter.toPattern();
public boolean equals(Object obj) {          if (!(obj instanceof ShapeList)) {              return false;          }         return super.equals(obj);      }
private Node tryRemoveUnconditionalBranching(Node n) {    private Node computeFollowing(Node n) {      Node next = ControlFlowAnalysis.computeFollowNode(n);      return next;    }
private Integer getPivotRow(SimplexTableau tableau, final int col) {                          }                      }                  }
public static List anyList() {       * @return empty Set        */       public static Set anySet() {          return reportMatcher(Any.ANY).returnSet();       }       /**
static Chronology cLenientISO;     static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();     static {         cVerbose.set(Boolean.FALSE);     }      /**       * Gets a flag indicating that verbose logging is required.
public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {         return true;        case Token.FUNCTION:        case Token.REGEXP:        case Token.ARRAYLIT:
protected UnivariatePointValuePair doOptimize() {                  if (checker != null) {                      if (checker.converged(iter, previous, current)) {                         return current;                      }                  }
public double solve(final UnivariateRealFunction f,              return solve(f, initial, yInitial, max, yMax, initial, yInitial);          }          return solve(f, min, yMin, max, yMax, initial, yInitial);
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset < -23 || hoursOffset > 23) {              throw new IllegalArgumentException("Hours out of range: " + hoursOffset);          }         if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {              int hoursInMinutes = hoursOffset * 60;              if (hoursInMinutes < 0) {                 minutesOffset = hoursInMinutes - minutesOffset;              } else {                  minutesOffset = hoursInMinutes + minutesOffset;              }
public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }
private void interpretAssigns() {                  assign.assignNode.getLastChild(), true)) {                assignedToUnknownValue = true;              }            }           if (assignedToUnknownValue && hasPropertyAssign) {              changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;
public static int safeMultiply(int val1, int val2) {      public static long safeMultiply(long val1, int val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L;
private boolean isVarInlineForbidden(Var var) {       */      private boolean isInlinableObject(List<Reference> refs) {        boolean ret = false;        for (Reference ref : refs) {          Node name = ref.getNode();          Node parent = ref.getParent();
public EqualsBuilder append(Object lhs, Object rhs) {          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else if (lhs.getClass() != rhs.getClass()) {              this.setEquals(false);
private Node tryMinimizeIf(Node n) {               !mayEffectMutableState(lhs)) {              n.removeChild(cond);              Node assignName = thenOp.removeFirstChild();
private boolean isInlinableObject(List<Reference> refs) {
private void findAliases(NodeTraversal t) {          Node n = v.getNode();          int type = n.getType();          Node parent = n.getParent();         if (parent.isVar()) {           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {            String name = n.getString();            Var aliasVar = scope.getVar(name);            aliases.put(name, aliasVar);
public void exitScope(NodeTraversal t) {        if (t.getScopeDepth() == 2) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;
public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNull();       }       /**
protected UnivariatePointValuePair doOptimize() {                      }                  } } else {                 return                              best(current,                                   previous,                              isMinim);              }              ++iter;
public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false);      }      /**
private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object      private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();              if (injected != null) {                  injectionOccurred |= true;                  mocks.remove(injected);
public static Node tryFinally(Node tryBody, Node finallyBody) {    public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    }
protected void computeGeometricalProperties() {          if (v.length == 0) {              final BSPTree<Euclidean2D> tree = getTree(false);             if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);
public boolean setPrototype(PrototypeObjectType prototype) {        return false;      }     boolean replacedPrototype = prototype != null;      this.prototype = prototype;      this.prototypeSlot = new SimpleSlot("prototype", prototype, true);      this.prototype.setOwnerFunction(this);      if (isConstructor() || isInterface()) {        FunctionType superClass = getSuperClassConstructor();
public RealMatrix getU()              if (m >= n) {                  final RealMatrix e =                     eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);                  final double[][] eData = e.getData();                  final double[][] wData = new double[m][p];                  double[] ei1 = eData[0];                 for (int i = 0; i < p - 1; ++i) {                      final double mi = mainBidiagonal[i];                      final double[] ei0 = ei1;                      final double[] wi  = wData[i];                          ei1 = eData[i + 1];                          final double si = secondaryBidiagonal[i];                          for (int j = 0; j < p; ++j) {                              wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];                          }                 }                          for (int j = 0; j < p; ++j) {                             wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];                          }                  for (int i = p; i < m; ++i) {                      wData[i] = new double[p];
public boolean apply(Node input) {                    case Token.REGEXP:                    case Token.NEW:                      return true;                  }                  return false;                }
public static Number createNumber(String str) throws NumberFormatException {          if (decPos > -1) {              if (expPos > -1) {                 if (expPos < decPos) {                      throw new NumberFormatException(str + " is not a valid number.");                  }                  dec = str.substring(decPos + 1, expPos);
public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);          Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
public FitnessFunction() {           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }
private boolean canInline(          }        }
public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit);         this.elitismRate = elitismRate;      }      /**
void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);        } else {         addExpr(first, p, context);         cc.addOp(opstr, true);         addExpr(last, p + 1, rhsContext);        }        return;      }
public long add(long instant, long value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertLocalToUTC(localInstant, false);              }          }
protected PointVectorValuePair doOptimize() {                      if (checker != null) {                         if (checker.converged(iter, previous, current)) {                              setCost(currentCost);                              return current;                          }
void tryMinimizeExits(Node n, int exitType, String labelName) {         * can cause problems if it changes the completion type of the finally         * block. See ECMA 262 Sections 8.9 & 12.14         */       if (NodeUtil.hasFinally(n)) {         Node finallyBlock = n.getLastChild();         tryMinimizeExits(finallyBlock, exitType, labelName);       }      }
public BooleanOptionHandler(        @Override        public int parseArguments(Parameters params) throws CmdLineException {         String param = params.getParameter(0);          if (param == null) {            setter.addValue(true);
private static final long serialVersionUID = 9386874258972L;                  private volatile int iPeriod;
private static synchronized String getConvertedId(String id) {              map = new HashMap<String, String>();              map.put("GMT", "UTC");              map.put("MIT", "Pacific/Apia"); map.put("HST", "Pacific/Honolulu");              map.put("AST", "America/Anchorage");
public boolean isNoObjectType() {    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {
public TimeSeries createCopy(int start, int end)              throw new IllegalArgumentException("Requires start <= end.");           }           TimeSeries copy = (TimeSeries) super.clone();           copy.data = new java.util.ArrayList();           if (this.data.size() > 0) {               for (int index = start; index <= end; index++) {
public String escape(String str) {      public void escape(Writer writer, String str) throws IOException {          int len = str.length();          for (int i = 0; i < len; i++) {             char c = str.charAt(i);              String entityName = this.entityName(c);              if (entityName == null) {                 if (c > 0x7F) { writer.write("&                      writer.write(Integer.toString(c, 10));                      writer.write(';');
public void setHourOfDay(final int hourOfDay) {       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {              setMillis(getChronology().hours().add(getMillis(), hours));      }
public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false;                } else {
public static Number createNumber(final String str) throws NumberFormatException          final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);          try {                  final Float f = createFloat(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {                      return f;                  } } catch (final NumberFormatException nfe) {          }          try {                  final Double d = createDouble(str);                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {                      return d;                  } } catch (final NumberFormatException nfe) {          }
public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }
public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertLocalToUTC(localInstant, false);              }          }
private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();     boolean hasSideEffects = false;     if (block.hasChildren()) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();
private static final long serialVersionUID = -7105341425736035847L;      private MockitoCore mockitoCore = new MockitoCore();      private ReturnsEmptyValues delegate = new ReturnsEmptyValues();       public Object answer(InvocationOnMock invocation) throws Throwable {           GenericMetadataSupport returnTypeGenericMetadata =                   actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());           Class<?> rawType = returnTypeGenericMetadata.rawType();           if (!mockitoCore.isTypeMockable(rawType)) {               return delegate.returnValueFor(rawType);           }
public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount() - 1);           return clone;       }
public int parseInto(ReadWritableInstant instant, String text, int position) {          long instantMillis = instant.getMillis();          Chronology chrono = instant.getChronology();          long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);          chrono = selectChronology(chrono);         int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);
public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "':",                  undesired.getLocation()          ));      }
public static boolean isJSIdentifier(String s) {        int length = s.length();        if (length == 0 ||            !Character.isJavaIdentifierStart(s.charAt(0))) {          return false;        }        for (int i = 1; i < length; i++) {         if (              !Character.isJavaIdentifierPart(s.charAt(i))) {            return false;          }
private void visitNew(NodeTraversal t, Node n) {      JSType type = getJSType(constructor).restrictByNotNullOrUndefined();      if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {        FunctionType fnType = type.toMaybeFunctionType();       if (fnType != null) {          visitParameterList(t, n, fnType);          ensureTyped(t, n, fnType.getInstanceType());        } else {
private void unrollBinaryOperator(      Node current = firstNonOperator;      do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current != n);    }
public void setRangeAxes(ValueAxis[] axes) {       * @since 1.0.7        */       public int getRangeAxisIndex(ValueAxis axis) {           int result = this.rangeAxes.indexOf(axis);  if (result < 0) {              Plot parent = getParent();
public void removeRow(int rowIndex) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       }
public static double cosh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y)) || x == y;      }      /**
public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {              setMillis(getChronology().minutes().add(getMillis(), minutes));      }
private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,      do {        switch (token) {          case STAR:            if (ignoreStar) {            } else {              if (builder.length() > 0) {
public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);       }       public void initiateMockName(Class classToMock) {
void apply() {        this.nameNode = nameNode;        this.isPropertyAssign = isPropertyAssign;       this.maybeAliased = !assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||
private Node tryFoldComparison(Node n, Node left, Node right) {            && right.getString().equals("undefined"))            || (Token.VOID == right.getType()                && NodeUtil.isLiteralValue(right.getFirstChild(), false)));     int lhType = left.getType();     int rhType = right.getType();      switch (lhType) {        case Token.VOID:          if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {
private void inlineAliases(GlobalNamespace namespace) {          continue;        }       if (name.globalSets == 1 && name.localSets == 0 &&            name.aliasingGets > 0) {
private static boolean isAssignable(Type type, ParameterizedType toParameterized                  toClass, typeVarAssigns);         for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());
public static boolean isEmpty(boolean[] array) {          } else if (element != null) {              type = element.getClass();          } else {             type = Object.class;          } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);
public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           }
void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,              || FunctionTypeBuilder.isFunctionTypeDeclaration(info));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction() &&             (info != null || !scope.isDeclared(qName, false)));        }        if (!inferred) {
private static void escapeJavaStyleString(Writer out, String str, boolean escape                          out.write('\\');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      default :
FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }
private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**
package org.mockito.internal.util;  public class Timer {
public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));      }
public Week(Date time) {       */       public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**
public static boolean isPrimitiveWrapper(Class<?> type) {          primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);          primitiveValues.put(double.class, 0);       }   } \ No newline at end of file
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;        case Token.IN:          return true;
protected VectorialPointValuePair doOptimize()                      if (s != 0) {                          double sum = 0;                          for (int i = 0; i <= j; ++i) {                             sum += jacobian[i][pj] * residuals[i];                          }                          maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                      }
private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }
private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean no          int size = elementPairs.size();          if (size >= 2 && elementPairs.get(0) instanceof Separator) {              Separator sep = (Separator) elementPairs.get(0);                  PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);                  sep = sep.finish(f.getPrinter(), f.getParser());                  return new PeriodFormatter(sep, sep);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {
public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;          } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono;
protected GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                   return mock;               }
private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }      }
public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset != null) {               return result;           }           int seriesCount = dataset.getRowCount();
public Fraction pow(int power) {       */      private static int greatestCommonDivisor(int u, int v) {         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {              return 1;          }
public boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga;
protected void dropPhase1Objective() {          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }
protected double doSolve() {              double targetY;              if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0;
public void applyAlias() {    private class AliasedTypeNode implements AliasUsage {      private final Node typeReference;      private final String aliasName;     AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;        this.aliasName = aliasName;      }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }    }
public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {              if (iPrefix != null) {                  iPrefix.printTo(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                  FormatUtils.appendUnpaddedInteger(buf, value);
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset == 0 && minutesOffset == 0) {              return DateTimeZone.UTC;          }          if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);              if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);              }              offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);          } catch (ArithmeticException ex) {
static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);
private OriginalMapping getOriginalMappingForEntry(Entry entry) {        Builder x = OriginalMapping.newBuilder()          .setOriginalFile(sources[entry.getSourceFileId()])         .setLineNumber(entry.getSourceLine())         .setColumnPosition(entry.getSourceColumn());        if (entry.getNameId() != UNMAPPED) {          x.setIdentifier(names[entry.getNameId()]);        }
boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,            "assignment to property " + propName + " of " +            getReadableJSTypeName(owner, true),            rightType, leftType);       }        return false;      }      return true;
void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }
public double getChiSquare(EstimationProblem problem) {      public double[] guessParametersErrors(EstimationProblem problem)        throws EstimationException {          int m = problem.getMeasurements().length;         int p = problem.getAllParameters().length;          if (m <= p) {              throw new EstimationException("no degrees of freedom ({0} measurements, {1} parameters)",                                            new Object[] { new Integer(m), new Integer(p)});          }         double[] errors = new double[problem.getAllParameters().length];          final double c = Math.sqrt(getChiSquare(problem) / (m - p));          double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {
private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }
private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)            && n.getType() == Token.GETPROP           ) {          boolean isChainedProperty =              n.getFirstChild().getType() == Token.GETPROP;
public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall()  + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           }
public Complex conjugate() {      public Complex divide(Complex divisor)          throws NullArgumentException {          MathUtils.checkNotNull(divisor);          if (isNaN || divisor.isNaN) {              return NaN;          }         if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {             return NaN;          }          if (divisor.isInfinite() && !isInfinite()) {              return ZERO;          }          final double c = divisor.getReal();          final double d = divisor.getImaginary();          if (FastMath.abs(c) < FastMath.abs(d)) {              double q = c / d;              double denominator = c * q + d;              return createComplex((real * q + imaginary) / denominator,                  (imaginary * q - real) / denominator);          } else {              double q = d / c;              double denominator = d * q + c;              return createComplex((imaginary * q + real) / denominator,                  (imaginary - real * q) / denominator);          }      }            public Complex divide(double divisor) {          if (isNaN || Double.isNaN(divisor)) {              return NaN;          }          if (divisor == 0d) {             return NaN;          }          if (Double.isInfinite(divisor)) {              return !isInfinite() ? ZERO : NaN;          }          return createComplex(real / divisor,                               imaginary  / divisor);      }      /**       * Test for the equality of two Complex objects.       * If both the real and imaginary parts of two complex numbers       * are exactly the same, and neither is {@code Double.NaN}, the two       * Complex objects are considered to be equal.       * All {@code NaN} values are considered to be equal - i.e, if either       * (or both) real and imaginary parts of the complex number are equal
private double localMin(boolean isMinim,          double w = x;          double d = 0;          double e = 0;         double fx = computeObjectiveValue(f, x);         if (goalType == GoalType.MAXIMIZE) {              fx = -fx;          }          double fv = fx;          double fw = fx;         int count = 0;         while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;
public int translate(CharSequence input, int index, Writer out) throws IOExcepti                  return 0;              }                  out.write(entityValue);              return 2 + (end - start) + (isHex ? 1 : 0) + 1;          }          return 0;
public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {          return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&                  cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&                  cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&                 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                  cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                  cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
public long addWrapField(long instant, int value) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.addWrapField(localInstant, value);                 return iZone.convertLocalToUTC(localInstant, false);              }          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);             long result = iZone.convertLocalToUTC(localInstant, false);              if (get(result) != value) {                  throw new IllegalFieldValueException(iField.getType(), new Integer(value),                      "Illegal instant due to time zone offset transition: " +
public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str;
private Node parseFunctionType(JsDocToken token) {      if (token != JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");      }
private Integer getPivotRow(final int col, final SimplexTableau tableau) {          for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio;
public void addValue(double value) {          secondMoment.increment(value);         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++;
public void captureArgumentsFrom(Invocation invocation) {                      ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));                  }              }             for (int position = indexOfVararg; position < matchers.size(); position++) {                 Matcher m = matchers.get(position);                  if (m instanceof CapturesArguments) {                     ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);                  }              }          } else {
private void inlineNonConstants(        if (!maybeModifiedArguments &&            !staleVars.contains(v) &&            referenceInfo.isWellDefined() &&           referenceInfo.isAssignedOnceInLifetime()) {          List<Reference> refs = referenceInfo.references;          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();
public int indexOf(String str, int startIndex) {              return -1;          }          char[] thisBuf = buffer;         int len = thisBuf.length - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {
public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;
Node parseInputs() {        boolean staleInputs = false;       if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {
* @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**
protected final double doSolve() {                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  default:
public static String formatPeriod(long startMillis, long endMillis, String forma              days -= 1;          }          while (days < 0) {             days += 31;              months -= 1;          }          while (months < 0) {              months += 12;              years -= 1;          }         milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);         seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);         minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);         hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);         days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);         months -= reduceAndCorrect(start, end, Calendar.MONTH, months);         years -= reduceAndCorrect(start, end, Calendar.YEAR, years);
protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**
public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      }
private void visitGetProp(NodeTraversal t, Node n, Node parent) {      if (childType.isDict()) {        report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     } else if (n.getJSType() != null && parent.isAssign()) {       return;      } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE))) {        checkPropertyAccess(childType, property.getString(), t, n);
public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }
private void unrollBinaryOperator(    static boolean isSimpleNumber(String s) {      int len = s.length();      for (int index = 0; index < len; index++) {        char c = s.charAt(index);        if (c < '0' || c > '9') {          return false;        }      }     return len > 0 && s.charAt(0) != '0';    }    static double getSimpleNumber(String s) {
static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**
public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {          super(chromosomes, populationLimit);         this.elitismRate = elitismRate;      }      /**
protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return;              }
Node processArrayLiteral(ArrayLiteral literalNode) {      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }
public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false);              }          }
protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                   contextualActualTypeParameters.put(typeParameter, actualTypeArgument);               }
JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;      }
private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0;      @Override      public void visit(NodeTraversal t, Node n, Node parent) {
*        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()
private void handleObjectLit(NodeTraversal t, Node n) {            child != null;            child = child.getNext()) {          String name = child.getString();
public static double sinh(double x) {        if (x > 20) {                return 0.5 * exp(x);            }       if (x < -20) {                return -0.5 * exp(-x);        }        if (x == 0) {
